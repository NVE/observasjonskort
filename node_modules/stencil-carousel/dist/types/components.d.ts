/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from './stencil.core';


export namespace Components {
  interface JeepCarousel {
    /**
    * Add new slides to required index slides could be HTMLElement or HTML string with new slide or array with such slides
    */
    'addSlide': (index: number, slides: any) => Promise<void>;
    /**
    * Append new slides  slides could be HTMLElement or HTML string with new slide or array with such slides
    */
    'appendSlide': (slides: any) => Promise<void>;
    /**
    * Slide data style
    */
    'cstyle': string;
    /**
    * Slide data
    */
    'data': string;
    /**
    * Get the index of the active slide.
    */
    'getActiveIndex': () => Promise<number>;
    /**
    * Get the index of the previous slide.
    */
    'getPreviousIndex': () => Promise<number>;
    /**
    * Init data from properties.
    */
    'init': () => Promise<void>;
    /**
    * Get whether or not the current slide is the first slide.
    */
    'isBeginning': () => Promise<boolean>;
    /**
    * Get whether or not the current slide is the last slide.
    */
    'isEnd': () => Promise<boolean>;
    /**
    * Get the total number of slides.
    */
    'length': () => Promise<number>;
    /**
    * Clean styles when swiper destroys
    */
    'notcleanstyles': boolean;
    /**
    * Swiper options
    */
    'options': string;
    /**
    * Swiper data-swiper-parallax
    */
    'parallaxoptions': string;
    /**
    * PlayControls when autoplay
    */
    'playcontrols': boolean;
    /**
    * Swiper RTL Layout
    */
    'rtl': boolean;
    /**
    * Set the swiper.
    */
    'setSwiper': () => Promise<void>;
    /**
    * Transition to the next slide.
    */
    'slideNext': (speed?: number, runCallbacks?: boolean) => Promise<void>;
    /**
    * Transition to the previous slide.
    */
    'slidePrev': (speed?: number, runCallbacks?: boolean) => Promise<void>;
    /**
    * Transition to the specified slide.
    */
    'slideTo': (index: number, speed?: number, runCallbacks?: boolean) => Promise<void>;
    /**
    * Start auto play.
    */
    'startAutoplay': () => Promise<void>;
    /**
    * Stop auto play.
    */
    'stopAutoplay': () => Promise<void>;
    /**
    * Swiper destroy.
    */
    'swiperDestroy': (cleanstyles: boolean) => Promise<void>;
    /**
    * Update the underlying slider implementation. Call this if you've added or removed child slides.
    */
    'update': () => Promise<void>;
  }
}

declare global {


  interface HTMLJeepCarouselElement extends Components.JeepCarousel, HTMLStencilElement {}
  var HTMLJeepCarouselElement: {
    prototype: HTMLJeepCarouselElement;
    new (): HTMLJeepCarouselElement;
  };
  interface HTMLElementTagNameMap {
    'jeep-carousel': HTMLJeepCarouselElement;
  }
}

declare namespace LocalJSX {
  interface JeepCarousel {
    /**
    * Slide data style
    */
    'cstyle'?: string;
    /**
    * Slide data
    */
    'data'?: string;
    /**
    * Clean styles when swiper destroys
    */
    'notcleanstyles'?: boolean;
    /**
    * Emitted after Swiper destroy
    */
    'onJeepCarouselAfterDestroy'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted before Swiper destroy
    */
    'onJeepCarouselBeforeDestroy'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted after the active slide has changed.
    */
    'onJeepCarouselDidChange'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted after Swiper initialization
    */
    'onJeepCarouselDidLoad'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the user double taps on the slide's container.
    */
    'onJeepCarouselDoubleTap'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the slider is actively being moved.
    */
    'onJeepCarouselDrag'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the next slide has ended.
    */
    'onJeepCarouselNextEnd'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the next slide has started.
    */
    'onJeepCarouselNextStart'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the previous slide has ended.
    */
    'onJeepCarouselPrevEnd'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the previous slide has started.
    */
    'onJeepCarouselPrevStart'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the slider is at the last slide.
    */
    'onJeepCarouselReachEnd'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the slider is at its initial position.
    */
    'onJeepCarouselReachStart'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the active slide has changed.
    */
    'onJeepCarouselSlideChange'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the user taps/clicks on the slide's container.
    */
    'onJeepCarouselTap'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the user releases the touch.
    */
    'onJeepCarouselTouchEnd'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the user first touches the slider.
    */
    'onJeepCarouselTouchStart'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the slide transition has ended.
    */
    'onJeepCarouselTransitionEnd'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the slide transition has started.
    */
    'onJeepCarouselTransitionStart'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted before the active slide has changed.
    */
    'onJeepCarouselWillChange'?: (event: CustomEvent<void>) => void;
    /**
    * Swiper options
    */
    'options'?: string;
    /**
    * Swiper data-swiper-parallax
    */
    'parallaxoptions'?: string;
    /**
    * PlayControls when autoplay
    */
    'playcontrols'?: boolean;
    /**
    * Swiper RTL Layout
    */
    'rtl'?: boolean;
  }

  interface IntrinsicElements {
    'jeep-carousel': JeepCarousel;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'jeep-carousel': LocalJSX.JeepCarousel & JSXBase.HTMLAttributes<HTMLJeepCarouselElement>;
    }
  }
}


