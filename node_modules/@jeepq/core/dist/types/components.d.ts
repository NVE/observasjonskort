/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from './stencil.core';
import {
  Color,
} from './global/interfaces/color';
import {
  CloseData,
  StateProperties,
} from './global/interfaces/jeep-colorpicker';
import {
  Status,
} from './global/interfaces/charts';
import {
  Rect,
} from './global/interfaces/geom';
import {
  Variables,
} from './global/interfaces/jeep-columnchart';
import {
  Variables as Variables1,
} from './global/interfaces/jeep-linechart';
import {
  HeaderVisibility,
  PaginationIndex,
} from './global/interfaces/jeep-slides';
import {
  StretchyHeaderToolbar,
} from './global/interfaces/stretchyheader';
import {
  StateProperties as StateProperties1,
} from './global/interfaces/jeep-svgmorph';
import {
  CubicBezier,
} from './global/interfaces/svggeom';

export namespace Components {
  interface JeepCarousel {
    /**
    * Add new slides to required index slides could be HTMLElement or HTML string with new slide or array with such slides
    */
    'addSlide': (index: number, slides: any) => Promise<void>;
    /**
    * Append new slides  slides could be HTMLElement or HTML string with new slide or array with such slides
    */
    'appendSlide': (slides: any) => Promise<void>;
    /**
    * Slide data style
    */
    'cstyle': string;
    /**
    * Slide data
    */
    'data': string;
    /**
    * Get the index of the active slide.
    */
    'getActiveIndex': () => Promise<number>;
    /**
    * Get the index of the previous slide.
    */
    'getPreviousIndex': () => Promise<number>;
    /**
    * Init data from properties.
    */
    'init': () => Promise<void>;
    /**
    * Get whether or not the current slide is the first slide.
    */
    'isBeginning': () => Promise<boolean>;
    /**
    * Get whether or not the current slide is the last slide.
    */
    'isEnd': () => Promise<boolean>;
    /**
    * Get the total number of slides.
    */
    'length': () => Promise<number>;
    /**
    * Clean styles when swiper destroys
    */
    'notcleanstyles': boolean;
    /**
    * Swiper options
    */
    'options': string;
    /**
    * Swiper data-swiper-parallax
    */
    'parallaxoptions': string;
    /**
    * PlayControls when autoplay
    */
    'playcontrols': boolean;
    /**
    * Swiper RTL Layout
    */
    'rtl': boolean;
    /**
    * Set the swiper.
    */
    'setSwiper': () => Promise<void>;
    /**
    * Transition to the next slide.
    */
    'slideNext': (speed?: number, runCallbacks?: boolean) => Promise<void>;
    /**
    * Transition to the previous slide.
    */
    'slidePrev': (speed?: number, runCallbacks?: boolean) => Promise<void>;
    /**
    * Transition to the specified slide.
    */
    'slideTo': (index: number, speed?: number, runCallbacks?: boolean) => Promise<void>;
    /**
    * Start auto play.
    */
    'startAutoplay': () => Promise<void>;
    /**
    * Stop auto play.
    */
    'stopAutoplay': () => Promise<void>;
    /**
    * Swiper destroy.
    */
    'swiperDestroy': (cleanstyles: boolean) => Promise<void>;
    /**
    * Update the underlying slider implementation. Call this if you've added or removed child slides.
    */
    'update': () => Promise<void>;
  }
  interface JeepColorpicker {
    /**
    * The buttons text
    */
    'buttons': string;
    /**
    * Method close the cpicker component
    */
    'close': (color: Color, button: number) => Promise<void>;
    /**
    * The preselected color
    */
    'color': string;
    /**
    * Validation buttons hidden
    */
    'hidebuttons': boolean;
    /**
    * Header hidden
    */
    'hideheader': boolean;
    /**
    * Opacity Slider hidden
    */
    'hideopacity': boolean;
    /**
    * Method initialize
    */
    'init': () => Promise<void>;
    /**
    * The preselected opacity
    */
    'opacity': string;
    /**
    * Method open the cpicker component
    */
    'open': () => Promise<void>;
  }
  interface JeepColumnchart {
    'animation': boolean;
    'cborder': boolean;
    'color': string;
    'cstyle': string;
    'ctitle': string;
    'datapoints': string;
    'delay': string;
    'getCssProperties': () => Promise<Variables>;
    'getStatus': () => Promise<Status>;
    'getWindowSize': () => Promise<Rect>;
    'init': () => Promise<void>;
    'renderChart': () => Promise<void>;
    'subtitle': string;
    'xtitle': string;
    'ytitle': string;
  }
  interface JeepCpicker {
    /**
    * The buttons text
    */
    'buttons': string;
    /**
    * Method get the vertical position for the brightness slider handler
    */
    'calcB': (y: number, height: number) => Promise<number>;
    /**
    * Method get the vertical position for the hue slider handler
    */
    'calcH': (y: number, height: number) => Promise<number>;
    /**
    * Method get the vertical position for the opacity slider handler
    */
    'calcO': (y: number, height: number) => Promise<number>;
    /**
    * Method get the horizontal position for the saturation slider handler
    */
    'calcS': (x: number, width: number) => Promise<number>;
    /**
    * The preselected color
    */
    'color': string;
    /**
    * Method get StateProperties
    */
    'getStateProperties': () => Promise<StateProperties>;
    /**
    * Method get local wrapper css variables
    */
    'getWrapperCssVariables': () => Promise<any>;
    /**
    * Validation buttons hidden
    */
    'hidebuttons': boolean;
    /**
    * Header hidden
    */
    'hideheader': boolean;
    /**
    * Opacity Slider hidden
    */
    'hideopacity': boolean;
    /**
    * Method initialize
    */
    'init': () => Promise<void>;
    /**
    * The preselected opacity
    */
    'opacity': string;
  }
  interface JeepFlipimages {
    /**
    * The container padding
    */
    'fpadding': string;
    /**
    * Method initialize
    */
    'init': () => Promise<void>;
    /**
    * The type of image horizontal or vertical
    */
    'type': string;
  }
  interface JeepFullscreen {
    /**
    * Exit Fullscreen
    */
    'fullscreenExit': () => Promise<void>;
    /**
    * Request Fullscreen
    */
    'fullscreenRequest': (elem: any) => Promise<void>;
    /**
    * Init data from properties.
    */
    'init': () => Promise<void>;
    /**
    * Is Fullscreen
    */
    'isFullscreen': () => Promise<boolean>;
    /**
    * Set the Fullscreen component.
    */
    'setFullscreen': () => Promise<void>;
    /**
    * Set the Fullscreen Visibility (visible/hidden)
    */
    'setJeepFullscreenVisibility': (state: any) => Promise<void>;
  }
  interface JeepHtmlToprint {
    'emitPrint': () => Promise<void>;
    'getSlotStyle': () => Promise<string>;
    /**
    * Method initialize
    */
    'init': () => Promise<void>;
    'load': () => Promise<void>;
    /**
    * The style for elements in slot
    */
    'slotstyle': string;
  }
  interface JeepLinechart {
    'animation': boolean;
    'cborder': boolean;
    'cstyle': string;
    'ctitle': string;
    'data': string;
    'delay': string;
    'getCssProperties': () => Promise<Variables>;
    'getStatus': () => Promise<Status>;
    'getWindowSize': () => Promise<Rect>;
    'init': () => Promise<void>;
    'renderChart': () => Promise<void>;
    'subtitle': string;
    'xtitle': string;
    'ytitle': string;
  }
  interface JeepNavigation {
    /**
    * Get icon name
    */
    'getJeepNavigationIconFamily': () => Promise<string>;
    /**
    * Init data from properties.
    */
    'init': () => Promise<void>;
    /**
    * The navigation icon name must be "arrow-circle" or "arrow-round"
    */
    'name': string;
    /**
    * Set the Navigation next button to enable/disable
    */
    'setJeepNavigationNextDisabled': (state: any) => Promise<void>;
    /**
    * Set the Navigation previous button to enable/disable
    */
    'setJeepNavigationPrevDisabled': (state: any) => Promise<void>;
    /**
    * Set the Navigation Visibility (visible/hidden)
    */
    'setJeepNavigationVisibility': (state: any) => Promise<void>;
    /**
    * Set the navigation component.
    */
    'setNavigation': () => Promise<void>;
  }
  interface JeepPagination {
    /**
    * The pagination clickable option
    */
    'clickable': boolean;
    /**
    * The pagination direction
    */
    'direction': string;
    /**
    * Get the Pagination Number of bullets displayed
    */
    'getJeepPaginationBulletNumber': () => Promise<number>;
    /**
    * Init data from properties.
    */
    'init': () => Promise<void>;
    /**
    * The pagination number of items display
    */
    'ndisplay': number;
    /**
    * Set the Pagination Active Index
    */
    'setJeepPaginationActiveIndex': (state: any) => Promise<void>;
    /**
    * Set the Pagination Slides Number
    */
    'setJeepPaginationSlidesNumber': (state: any) => Promise<void>;
    /**
    * Set the Pagination Visibility (visible/hidden)
    */
    'setJeepPaginationVisibility': (state: any) => Promise<void>;
  }
  interface JeepPlayControls {
    /**
    * Pause autoplay
    */
    'autoplayPause': () => Promise<void>;
    /**
    * Start autoplay
    */
    'autoplayStart': () => Promise<void>;
    /**
    * Stop autoplay
    */
    'autoplayStop': () => Promise<void>;
    /**
    * The play controls duration time time to stay on same slide
    */
    'duration': number;
    /**
    * The play controls from slides number The first slide index is 0
    */
    'fromslide': number;
    /**
    * Get PlayControls Current Index
    */
    'getCurrentIndex': () => Promise<number>;
    /**
    * Get the PlayControls duration
    */
    'getJeepPlayControlsDuration': () => Promise<number>;
    /**
    * Init data from properties.
    */
    'init': () => Promise<void>;
    /**
    * Is Playing
    */
    'isPlaying': () => Promise<boolean>;
    /**
    * The play controls slides number
    */
    'nslides': number;
    /**
    * Set PlayControls Active Index
    */
    'setActiveIndexAndPlay': (index: number) => Promise<void>;
    /**
    * Set PlayControls Current Index
    */
    'setCurrentIndex': (index: number, notemit?: boolean) => Promise<void>;
    /**
    * Set the PlayControls skipbackward icon to enable/disable
    */
    'setJeepPlayControlsSkipBackwardDisabled': (state: any) => Promise<void>;
    /**
    * Set the PlayControls skipforward icon to enable/disable
    */
    'setJeepPlayControlsSkipForwardDisabled': (state: any) => Promise<void>;
    /**
    * Set the PlayControls Visibility (visible/hidden)
    */
    'setJeepPlayControlsVisibility': (state: any) => Promise<void>;
    /**
    * Set the PlayControls component.
    */
    'setPlayControls': () => Promise<void>;
    /**
    * The play controls to slides number The last slide index is slides.length - 1
    */
    'toslide': number;
  }
  interface JeepSlide {
    /**
    * The slide subtitle
    */
    'cstyle': string;
    /**
    * Init data from properties.
    */
    'init': () => Promise<void>;
    /**
    * Set the slide component.
    */
    'setSlide': () => Promise<void>;
    /**
    * The slide title
    */
    'stitle': string;
    /**
    * The slide subtitle
    */
    'subtitle': string;
  }
  interface JeepSlides {
    /**
    * Get Active Slide Index.
    */
    'getActiveSlideIndex': () => Promise<number>;
    /**
    * Init data from properties.
    */
    'init': () => Promise<void>;
    /**
    * The slides options
    */
    'options': string;
    /**
    * Set the slides.
    */
    'setSlides': () => Promise<void>;
  }
  interface JeepStretchyHeader {
    /**
    * The Header Background Linear Gtradient if any and Url   headerbackground="linear-gradient(to bottom, rgba(0,0,0,0), rgba(0,0,0,0.75)) ,    url(https://raw.githubusercontent.com/jepiqueau/jeep/master/assets/images/italy-mountains.jpeg)"
    */
    'headerbackground': string;
    /**
    * The blur effect
    */
    'headerbackgroundblur': boolean;
    /**
    * The Header Height
    */
    'headerheight': string;
    /**
    * Init data from properties.
    */
    'init': () => Promise<void>;
    /**
    * The Navbar Contrast Color
    */
    'toolbarcontrastcolor': string;
  }
  interface JeepSvgmorph {
    /**
    * The preselected calculation mode
    */
    'calcmode': string;
    /**
    * The preselected duration
    */
    'duration': string;
    /**
    * The preselected fill color
    */
    'fill': string;
    'getAlignedPaths': (calc: boolean) => Promise<CubicBezier[]>;
    'getFillColor': () => Promise<string[]>;
    'getPath': () => Promise<void>;
    'getPathList': () => Promise<string[]>;
    'getStateProperties': () => Promise<StateProperties>;
    /**
    * Method initialize
    */
    'init': () => Promise<void>;
    /**
    * The preselected key splines
    */
    'keysplines': string;
    /**
    * The preselected key times
    */
    'keytimes': string;
    /**
    * The preselected number of segments
    */
    'nsegment': string;
    /**
    * The preselected path index
    */
    'pathindex': string;
    'renderSVGFirstPath': () => Promise<void>;
    /**
    * The preselected repeat count
    */
    'repeatcount': string;
  }
}

declare global {


  interface HTMLJeepCarouselElement extends Components.JeepCarousel, HTMLStencilElement {}
  var HTMLJeepCarouselElement: {
    prototype: HTMLJeepCarouselElement;
    new (): HTMLJeepCarouselElement;
  };

  interface HTMLJeepColorpickerElement extends Components.JeepColorpicker, HTMLStencilElement {}
  var HTMLJeepColorpickerElement: {
    prototype: HTMLJeepColorpickerElement;
    new (): HTMLJeepColorpickerElement;
  };

  interface HTMLJeepColumnchartElement extends Components.JeepColumnchart, HTMLStencilElement {}
  var HTMLJeepColumnchartElement: {
    prototype: HTMLJeepColumnchartElement;
    new (): HTMLJeepColumnchartElement;
  };

  interface HTMLJeepCpickerElement extends Components.JeepCpicker, HTMLStencilElement {}
  var HTMLJeepCpickerElement: {
    prototype: HTMLJeepCpickerElement;
    new (): HTMLJeepCpickerElement;
  };

  interface HTMLJeepFlipimagesElement extends Components.JeepFlipimages, HTMLStencilElement {}
  var HTMLJeepFlipimagesElement: {
    prototype: HTMLJeepFlipimagesElement;
    new (): HTMLJeepFlipimagesElement;
  };

  interface HTMLJeepFullscreenElement extends Components.JeepFullscreen, HTMLStencilElement {}
  var HTMLJeepFullscreenElement: {
    prototype: HTMLJeepFullscreenElement;
    new (): HTMLJeepFullscreenElement;
  };

  interface HTMLJeepHtmlToprintElement extends Components.JeepHtmlToprint, HTMLStencilElement {}
  var HTMLJeepHtmlToprintElement: {
    prototype: HTMLJeepHtmlToprintElement;
    new (): HTMLJeepHtmlToprintElement;
  };

  interface HTMLJeepLinechartElement extends Components.JeepLinechart, HTMLStencilElement {}
  var HTMLJeepLinechartElement: {
    prototype: HTMLJeepLinechartElement;
    new (): HTMLJeepLinechartElement;
  };

  interface HTMLJeepNavigationElement extends Components.JeepNavigation, HTMLStencilElement {}
  var HTMLJeepNavigationElement: {
    prototype: HTMLJeepNavigationElement;
    new (): HTMLJeepNavigationElement;
  };

  interface HTMLJeepPaginationElement extends Components.JeepPagination, HTMLStencilElement {}
  var HTMLJeepPaginationElement: {
    prototype: HTMLJeepPaginationElement;
    new (): HTMLJeepPaginationElement;
  };

  interface HTMLJeepPlayControlsElement extends Components.JeepPlayControls, HTMLStencilElement {}
  var HTMLJeepPlayControlsElement: {
    prototype: HTMLJeepPlayControlsElement;
    new (): HTMLJeepPlayControlsElement;
  };

  interface HTMLJeepSlideElement extends Components.JeepSlide, HTMLStencilElement {}
  var HTMLJeepSlideElement: {
    prototype: HTMLJeepSlideElement;
    new (): HTMLJeepSlideElement;
  };

  interface HTMLJeepSlidesElement extends Components.JeepSlides, HTMLStencilElement {}
  var HTMLJeepSlidesElement: {
    prototype: HTMLJeepSlidesElement;
    new (): HTMLJeepSlidesElement;
  };

  interface HTMLJeepStretchyHeaderElement extends Components.JeepStretchyHeader, HTMLStencilElement {}
  var HTMLJeepStretchyHeaderElement: {
    prototype: HTMLJeepStretchyHeaderElement;
    new (): HTMLJeepStretchyHeaderElement;
  };

  interface HTMLJeepSvgmorphElement extends Components.JeepSvgmorph, HTMLStencilElement {}
  var HTMLJeepSvgmorphElement: {
    prototype: HTMLJeepSvgmorphElement;
    new (): HTMLJeepSvgmorphElement;
  };
  interface HTMLElementTagNameMap {
    'jeep-carousel': HTMLJeepCarouselElement;
    'jeep-colorpicker': HTMLJeepColorpickerElement;
    'jeep-columnchart': HTMLJeepColumnchartElement;
    'jeep-cpicker': HTMLJeepCpickerElement;
    'jeep-flipimages': HTMLJeepFlipimagesElement;
    'jeep-fullscreen': HTMLJeepFullscreenElement;
    'jeep-html-toprint': HTMLJeepHtmlToprintElement;
    'jeep-linechart': HTMLJeepLinechartElement;
    'jeep-navigation': HTMLJeepNavigationElement;
    'jeep-pagination': HTMLJeepPaginationElement;
    'jeep-play-controls': HTMLJeepPlayControlsElement;
    'jeep-slide': HTMLJeepSlideElement;
    'jeep-slides': HTMLJeepSlidesElement;
    'jeep-stretchy-header': HTMLJeepStretchyHeaderElement;
    'jeep-svgmorph': HTMLJeepSvgmorphElement;
  }
}

declare namespace LocalJSX {
  interface JeepCarousel {
    /**
    * Slide data style
    */
    'cstyle'?: string;
    /**
    * Slide data
    */
    'data'?: string;
    /**
    * Clean styles when swiper destroys
    */
    'notcleanstyles'?: boolean;
    /**
    * Emitted after Swiper destroy
    */
    'onJeepCarouselAfterDestroy'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted before Swiper destroy
    */
    'onJeepCarouselBeforeDestroy'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted after the active slide has changed.
    */
    'onJeepCarouselDidChange'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted after Swiper initialization
    */
    'onJeepCarouselDidLoad'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the user double taps on the slide's container.
    */
    'onJeepCarouselDoubleTap'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the slider is actively being moved.
    */
    'onJeepCarouselDrag'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the next slide has ended.
    */
    'onJeepCarouselNextEnd'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the next slide has started.
    */
    'onJeepCarouselNextStart'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the previous slide has ended.
    */
    'onJeepCarouselPrevEnd'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the previous slide has started.
    */
    'onJeepCarouselPrevStart'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the slider is at the last slide.
    */
    'onJeepCarouselReachEnd'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the slider is at its initial position.
    */
    'onJeepCarouselReachStart'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the active slide has changed.
    */
    'onJeepCarouselSlideChange'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the user taps/clicks on the slide's container.
    */
    'onJeepCarouselTap'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the user releases the touch.
    */
    'onJeepCarouselTouchEnd'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the user first touches the slider.
    */
    'onJeepCarouselTouchStart'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the slide transition has ended.
    */
    'onJeepCarouselTransitionEnd'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the slide transition has started.
    */
    'onJeepCarouselTransitionStart'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted before the active slide has changed.
    */
    'onJeepCarouselWillChange'?: (event: CustomEvent<void>) => void;
    /**
    * Swiper options
    */
    'options'?: string;
    /**
    * Swiper data-swiper-parallax
    */
    'parallaxoptions'?: string;
    /**
    * PlayControls when autoplay
    */
    'playcontrols'?: boolean;
    /**
    * Swiper RTL Layout
    */
    'rtl'?: boolean;
  }
  interface JeepColorpicker {
    /**
    * The buttons text
    */
    'buttons'?: string;
    /**
    * The preselected color
    */
    'color'?: string;
    /**
    * Validation buttons hidden
    */
    'hidebuttons'?: boolean;
    /**
    * Header hidden
    */
    'hideheader'?: boolean;
    /**
    * Opacity Slider hidden
    */
    'hideopacity'?: boolean;
    'onJeepColorpickerClose'?: (event: CustomEvent<CloseData>) => void;
    'onJeepColorpickerGetColor'?: (event: CustomEvent<Color>) => void;
    'onJeepColorpickerOpen'?: (event: CustomEvent<any>) => void;
    /**
    * The preselected opacity
    */
    'opacity'?: string;
  }
  interface JeepColumnchart {
    'animation'?: boolean;
    'cborder'?: boolean;
    'color'?: string;
    'cstyle'?: string;
    'ctitle'?: string;
    'datapoints'?: string;
    'delay'?: string;
    'subtitle'?: string;
    'xtitle'?: string;
    'ytitle'?: string;
  }
  interface JeepCpicker {
    /**
    * The buttons text
    */
    'buttons'?: string;
    /**
    * The preselected color
    */
    'color'?: string;
    /**
    * Validation buttons hidden
    */
    'hidebuttons'?: boolean;
    /**
    * Header hidden
    */
    'hideheader'?: boolean;
    /**
    * Opacity Slider hidden
    */
    'hideopacity'?: boolean;
    'onJeepCpickerClose'?: (event: CustomEvent<CloseData>) => void;
    'onJeepCpickerInstantColor'?: (event: CustomEvent<Color>) => void;
    'onJeepCpickerOpen'?: (event: CustomEvent<any>) => void;
    /**
    * The preselected opacity
    */
    'opacity'?: string;
  }
  interface JeepFlipimages {
    /**
    * The container padding
    */
    'fpadding'?: string;
    /**
    * Emitted when the first image is loaded
    */
    'onJeepFlipImagesImgLoaded'?: (event: CustomEvent<HTMLImageElement>) => void;
    /**
    * The type of image horizontal or vertical
    */
    'type'?: string;
  }
  interface JeepFullscreen {
    /**
    * Emitted when Fullscreen Change
    */
    'onJeepFullscreenChange'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when Fullscreen Exit
    */
    'onJeepFullscreenExit'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when Fullscreen Requested
    */
    'onJeepFullscreenRequest'?: (event: CustomEvent<void>) => void;
  }
  interface JeepHtmlToprint {
    'onJeepHtmlToPrint'?: (event: CustomEvent<void>) => void;
    'onJeepHtmlToPrintCompleted'?: (event: CustomEvent<void>) => void;
    'onJeepHtmlToPrintReady'?: (event: CustomEvent<void>) => void;
    /**
    * The style for elements in slot
    */
    'slotstyle'?: string;
  }
  interface JeepLinechart {
    'animation'?: boolean;
    'cborder'?: boolean;
    'cstyle'?: string;
    'ctitle'?: string;
    'data'?: string;
    'delay'?: string;
    'onJeepLinechartReady'?: (event: CustomEvent<any>) => void;
    'subtitle'?: string;
    'xtitle'?: string;
    'ytitle'?: string;
  }
  interface JeepNavigation {
    /**
    * The navigation icon name must be "arrow-circle" or "arrow-round"
    */
    'name'?: string;
    /**
    * Emitted when the next button was clicked
    */
    'onJeepNavigationNext'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the previous button was clicked
    */
    'onJeepNavigationPrev'?: (event: CustomEvent<void>) => void;
  }
  interface JeepPagination {
    /**
    * The pagination clickable option
    */
    'clickable'?: boolean;
    /**
    * The pagination direction
    */
    'direction'?: string;
    /**
    * The pagination number of items display
    */
    'ndisplay'?: number;
    /**
    * Emitted when a pagination bullet was clicked
    */
    'onJeepPaginationIndex'?: (event: CustomEvent<PaginationIndex>) => void;
  }
  interface JeepPlayControls {
    /**
    * The play controls duration time time to stay on same slide
    */
    'duration'?: number;
    /**
    * The play controls from slides number The first slide index is 0
    */
    'fromslide'?: number;
    /**
    * The play controls slides number
    */
    'nslides'?: number;
    /**
    * Emitted when autoplay pause button clicked
    */
    'onJeepPlayControlsAutoplayPause'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when autoplay skip backward button clicked
    */
    'onJeepPlayControlsAutoplaySkipBackward'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when autoplay skip forward button clicked
    */
    'onJeepPlayControlsAutoplaySkipForward'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when autoplay start button clicked
    */
    'onJeepPlayControlsAutoplayStart'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when autoplay stop button clicked
    */
    'onJeepPlayControlsAutoplayStop'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the current index change
    */
    'onJeepPlayControlsCurrentIndex'?: (event: CustomEvent<{index:string}>) => void;
    /**
    * Emitted when current index is fromslide
    */
    'onJeepPlayControlsIsBeginning'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when current index is toslide
    */
    'onJeepPlayControlsIsEnd'?: (event: CustomEvent<void>) => void;
    /**
    * The play controls to slides number The last slide index is slides.length - 1
    */
    'toslide'?: number;
  }
  interface JeepSlide {
    /**
    * The slide subtitle
    */
    'cstyle'?: string;
    /**
    * Emitted when a pagination bullet was clicked
    */
    'onJeepSlideDidLoad'?: (event: CustomEvent<any>) => void;
    /**
    * The slide title
    */
    'stitle'?: string;
    /**
    * The slide subtitle
    */
    'subtitle'?: string;
  }
  interface JeepSlides {
    /**
    * Emitted the Header visibility change
    */
    'onJeepSlidesHeaderVisibility'?: (event: CustomEvent<HeaderVisibility>) => void;
    /**
    * The slides options
    */
    'options'?: string;
  }
  interface JeepStretchyHeader {
    /**
    * The Header Background Linear Gtradient if any and Url   headerbackground="linear-gradient(to bottom, rgba(0,0,0,0), rgba(0,0,0,0.75)) ,    url(https://raw.githubusercontent.com/jepiqueau/jeep/master/assets/images/italy-mountains.jpeg)"
    */
    'headerbackground'?: string;
    /**
    * The blur effect
    */
    'headerbackgroundblur'?: boolean;
    /**
    * The Header Height
    */
    'headerheight'?: string;
    /**
    * Emitted the Header visibility change
    */
    'onJeepStretchyHeaderToolbar'?: (event: CustomEvent<StretchyHeaderToolbar>) => void;
    /**
    * The Navbar Contrast Color
    */
    'toolbarcontrastcolor'?: string;
  }
  interface JeepSvgmorph {
    /**
    * The preselected calculation mode
    */
    'calcmode'?: string;
    /**
    * The preselected duration
    */
    'duration'?: string;
    /**
    * The preselected fill color
    */
    'fill'?: string;
    /**
    * The preselected key splines
    */
    'keysplines'?: string;
    /**
    * The preselected key times
    */
    'keytimes'?: string;
    /**
    * The preselected number of segments
    */
    'nsegment'?: string;
    /**
    * The preselected path index
    */
    'pathindex'?: string;
    /**
    * The preselected repeat count
    */
    'repeatcount'?: string;
  }

  interface IntrinsicElements {
    'jeep-carousel': JeepCarousel;
    'jeep-colorpicker': JeepColorpicker;
    'jeep-columnchart': JeepColumnchart;
    'jeep-cpicker': JeepCpicker;
    'jeep-flipimages': JeepFlipimages;
    'jeep-fullscreen': JeepFullscreen;
    'jeep-html-toprint': JeepHtmlToprint;
    'jeep-linechart': JeepLinechart;
    'jeep-navigation': JeepNavigation;
    'jeep-pagination': JeepPagination;
    'jeep-play-controls': JeepPlayControls;
    'jeep-slide': JeepSlide;
    'jeep-slides': JeepSlides;
    'jeep-stretchy-header': JeepStretchyHeader;
    'jeep-svgmorph': JeepSvgmorph;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'jeep-carousel': LocalJSX.JeepCarousel & JSXBase.HTMLAttributes<HTMLJeepCarouselElement>;
      'jeep-colorpicker': LocalJSX.JeepColorpicker & JSXBase.HTMLAttributes<HTMLJeepColorpickerElement>;
      'jeep-columnchart': LocalJSX.JeepColumnchart & JSXBase.HTMLAttributes<HTMLJeepColumnchartElement>;
      'jeep-cpicker': LocalJSX.JeepCpicker & JSXBase.HTMLAttributes<HTMLJeepCpickerElement>;
      'jeep-flipimages': LocalJSX.JeepFlipimages & JSXBase.HTMLAttributes<HTMLJeepFlipimagesElement>;
      'jeep-fullscreen': LocalJSX.JeepFullscreen & JSXBase.HTMLAttributes<HTMLJeepFullscreenElement>;
      'jeep-html-toprint': LocalJSX.JeepHtmlToprint & JSXBase.HTMLAttributes<HTMLJeepHtmlToprintElement>;
      'jeep-linechart': LocalJSX.JeepLinechart & JSXBase.HTMLAttributes<HTMLJeepLinechartElement>;
      'jeep-navigation': LocalJSX.JeepNavigation & JSXBase.HTMLAttributes<HTMLJeepNavigationElement>;
      'jeep-pagination': LocalJSX.JeepPagination & JSXBase.HTMLAttributes<HTMLJeepPaginationElement>;
      'jeep-play-controls': LocalJSX.JeepPlayControls & JSXBase.HTMLAttributes<HTMLJeepPlayControlsElement>;
      'jeep-slide': LocalJSX.JeepSlide & JSXBase.HTMLAttributes<HTMLJeepSlideElement>;
      'jeep-slides': LocalJSX.JeepSlides & JSXBase.HTMLAttributes<HTMLJeepSlidesElement>;
      'jeep-stretchy-header': LocalJSX.JeepStretchyHeader & JSXBase.HTMLAttributes<HTMLJeepStretchyHeaderElement>;
      'jeep-svgmorph': LocalJSX.JeepSvgmorph & JSXBase.HTMLAttributes<HTMLJeepSvgmorphElement>;
    }
  }
}


