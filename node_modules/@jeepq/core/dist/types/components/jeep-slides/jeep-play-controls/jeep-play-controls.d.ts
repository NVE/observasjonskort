/// <reference types="node" />
import { EventEmitter } from '../../../stencil.core';
export declare class JeepPlayControls {
    el: HTMLJeepPlayControlsElement;
    /**
     * The play controls duration time
     * time to stay on same slide
     */
    duration: number;
    /**
     * The play controls slides number
     */
    nslides: number;
    /**
     * The play controls from slides number
     * The first slide index is 0
     */
    fromslide: number;
    /**
     * The play controls to slides number
     * The last slide index is slides.length - 1
     */
    toslide: number;
    parseDurationProp(newValue: number): void;
    parseNSlidesProp(newValue: number): void;
    parseFromSlideProp(newValue: number): void;
    parseToSlideProp(newValue: number): void;
    innerDuration: number;
    innerNSlides: number;
    innerFromSlide: number;
    innerToSlide: number;
    visibility: string;
    play: boolean;
    /**
     * Emitted when current index is fromslide
     */
    onPlayControlsIsBeginning: EventEmitter<void>;
    /**
     * Emitted when current index is toslide
     */
    onPlayControlsIsEnd: EventEmitter<void>;
    /**
     * Emitted when the current index change
     */
    onPlayControlsCurrentIndex: EventEmitter<{
        index: string;
    }>;
    /**
     * Emitted when autoplay start button clicked
     */
    onPlayControlsAutoplayStart: EventEmitter<void>;
    /**
     * Emitted when autoplay stop button clicked
     */
    onPlayControlsAutoplayStop: EventEmitter<void>;
    /**
     * Emitted when autoplay pause button clicked
     */
    onPlayControlsAutoplayPause: EventEmitter<void>;
    /**
     * Emitted when autoplay skip backward button clicked
     */
    onPlayControlsAutoplaySkipBackward: EventEmitter<void>;
    /**
     * Emitted when autoplay skip forward button clicked
     */
    onPlayControlsAutoplaySkipForward: EventEmitter<void>;
    /**
     * Init data from properties.
     */
    init(): Promise<void>;
    /**
     * Set the PlayControls component.
     */
    setPlayControls(): Promise<void>;
    /**
     * Set the PlayControls Visibility (visible/hidden)
     */
    setJeepPlayControlsVisibility(state: any): Promise<void>;
    /**
     * Set the PlayControls skipbackward icon to enable/disable
     */
    setJeepPlayControlsSkipBackwardDisabled(state: any): Promise<void>;
    /**
     * Set the PlayControls skipforward icon to enable/disable
     */
    setJeepPlayControlsSkipForwardDisabled(state: any): Promise<void>;
    /**
     * Get the PlayControls duration
     */
    getJeepPlayControlsDuration(): Promise<number>;
    /**
     * Start autoplay
     */
    autoplayStart(): Promise<void>;
    /**
     * Stop autoplay
     */
    autoplayStop(): Promise<void>;
    /**
     * Pause autoplay
     */
    autoplayPause(): Promise<void>;
    /**
     * Is Playing
     */
    isPlaying(): Promise<boolean>;
    /**
     * Get PlayControls Current Index
     */
    getCurrentIndex(): Promise<number>;
    /**
     * Set PlayControls Active Index
     */
    setActiveIndexAndPlay(index: number): Promise<void>;
    /**
     * Set PlayControls Current Index
     */
    setCurrentIndex(index: number, notemit?: boolean): Promise<void>;
    _skipBackwardButton: string;
    _skipForwardButton: string;
    _element: any;
    _playContainerEl: HTMLElement;
    _playEl: HTMLElement;
    _playSkipBackwardEl: HTMLElement;
    _playSkipForwardEl: HTMLElement;
    _skipForwardDisabled: boolean;
    _skipBackwardDisabled: boolean;
    _currentIndex: number;
    _initial: NodeJS.Timer;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): Promise<void>;
    private _init;
    private _setPlayControls;
    _setSkipBackwardDisabled(): void;
    _setSkipForwardDisabled(): void;
    private _handleClick;
    private _playContent;
    _setSkipButtons(): void;
    render(): any;
}
