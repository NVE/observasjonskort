import { EventEmitter } from '../../stencil.core';
import { Rect, Point } from '../../global/interfaces/geom';
import { Variables } from '../../global/interfaces/jeep-linechart';
import { Status, DataSet, AxisLength } from '../../global/interfaces/charts';
export declare class JeepLinechart {
    el: HTMLJeepLinechartElement;
    ctitle: string;
    subtitle: string;
    xtitle: string;
    ytitle: string;
    data: string;
    cstyle: string;
    animation: boolean;
    cborder: boolean;
    delay: string;
    parseTitleProp(newValue: string): void;
    parseSubTitleProp(newValue: string): void;
    parseXTitleProp(newValue: string): void;
    parseYTitleProp(newValue: string): void;
    parseDataProp(newValue: string): void;
    parseStyleProp(newValue: string): Promise<void>;
    parseAnimationProp(newValue: boolean): void;
    parseBorderProp(newValue: boolean): void;
    parseDelayProp(newValue: string): void;
    innerTitle: string;
    innerSubTitle: string;
    innerXTitle: string;
    innerYTitle: string;
    innerData: Array<DataSet>;
    innerStyle: string;
    innerAnimation: boolean;
    innerBorder: boolean;
    innerDelay: number;
    status: Status;
    w_width: number;
    w_height: number;
    toggle: boolean;
    readyLinechart: EventEmitter;
    init(): Promise<void>;
    getStatus(): Promise<Status>;
    renderChart(): Promise<void>;
    getWindowSize(): Promise<Rect>;
    getCssProperties(): Promise<Variables>;
    container: HTMLElement;
    svg: HTMLElement;
    chart: HTMLElement;
    borderEl: HTMLElement;
    borderBB: ClientRect;
    window: Window | any;
    document: Document | any;
    root: Element | any;
    _element: any;
    _prop: Variables;
    _wSize: Rect;
    _chartRect: Rect;
    _titleRect: Rect;
    _update: boolean;
    _Points: Array<Array<Point>>;
    _selMarker: Array<string>;
    _axisType: Array<string>;
    _legendRect: Rect;
    _legendNames: Array<string>;
    _legendColors: Array<string>;
    _legendThicknesses: Array<number>;
    _dataColor: boolean;
    _label: boolean;
    _labelRotate: boolean;
    _x_type: string;
    _x_axy: number;
    _y_axy: number;
    _lenY: AxisLength;
    _lenX: AxisLength;
    _nXlines: number;
    _nYlines: number;
    _nXlinesDataSet: number;
    _xInterval: number;
    _yaxis: Rect;
    _xaxis: Rect;
    _showTarget: any;
    _xmlns: string;
    _xlink: string;
    _mouseStart: boolean;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): void;
    _init(): Promise<void>;
    _setContainerSize(): void;
    _setPropertyValue(name: string, value?: string): string;
    _windowResize(): Promise<void>;
    _createMarkers(): void;
    _createTitle(): void;
    _createAxis(): void;
    _labelSize(lenA: AxisLength, rot: number): any;
    _initChartRect(): void;
    _createLegend(): void;
    _createTitleY(): Element;
    _createTitleX(): Element;
    _createLine(): void;
    _setAnimation(el: Element, length: string, duration: string): void;
    _placeMarker(id: string, g: Element, pt: Point, line: number, index: number, scale: number, color: string): void;
    _scaleMarker(use: Element, scale: number, pt: Point): void;
    _highlightMarker(marker: SVGElement, unhigh: boolean): void;
    _waitRemoveLabel(): void;
    _removeLabel(svg: Element): void;
    _handleTouchDown(evt: any): void;
    _handleMouseDown(evt: any): void;
    _handleTouchUp(evt: any): void;
    _handleMouseUp(evt: any): void;
    _handleEventTarget(evt: any, pt: Point): void;
    _renderChart(): Promise<void>;
    render(): any;
}
