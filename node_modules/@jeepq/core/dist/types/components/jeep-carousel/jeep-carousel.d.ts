/// <reference types="node" />
import { EventEmitter } from '../../stencil.core';
export declare class JeepCarousel {
    el: HTMLElement;
    /************************
     * Property Definitions *
     ************************/
    /**
     * Slide data
     */
    data: string;
    /**
     * Slide data style
     */
    cstyle: string;
    /**
     * Swiper options
     */
    options: string;
    /**
     * Swiper RTL Layout
     */
    rtl: boolean;
    /**
     * Swiper data-swiper-parallax
     */
    parallaxoptions: string;
    /**
     * PlayControls when autoplay
     */
    playcontrols: boolean;
    /**
     * Clean styles when swiper destroys
     */
    notcleanstyles: boolean;
    /*********************
     * State Definitions *
     *********************/
    innerData: Array<string>;
    innerStyle: string;
    innerOptions: any;
    innerRtl: boolean;
    innerParallaxOptions: any;
    innerPlayControls: boolean;
    innerNotCleanStyles: boolean;
    pause: boolean;
    backward: boolean;
    forward: boolean;
    parseDataProp(newValue: string): void;
    parseStyleProp(newValue: string): void;
    parseOptionsProp(newValue: string): Promise<void>;
    parseRtlProp(newValue: boolean): void;
    parseParallaxOptions(newValue: string): void;
    parsePlayControlsProp(newValue: boolean): void;
    parseNotCleanStylesProp(newValue: boolean): void;
    /*********************
     * Event Definitions *
     *********************/
    /**
     * Emitted after Swiper initialization
     */
    didLoad: EventEmitter<void>;
    /**
     * Emitted before Swiper destroy
     */
    beforeDestroy: EventEmitter<void>;
    /**
     * Emitted after Swiper destroy
     */
    afterDestroy: EventEmitter<void>;
    /**
     * Emitted when the user taps/clicks on the slide's container.
     */
    tap: EventEmitter<void>;
    /**
     * Emitted when the user double taps on the slide's container.
     */
    doubleTap: EventEmitter<void>;
    /**
     * Emitted when the active slide has changed.
     */
    slideChange: EventEmitter<void>;
    /**
     * Emitted before the active slide has changed.
     */
    willChange: EventEmitter<void>;
    /**
     * Emitted after the active slide has changed.
     */
    didChange: EventEmitter<void>;
    /**
     * Emitted when the next slide has started.
     */
    nextStart: EventEmitter<void>;
    /**
     * Emitted when the previous slide has started.
     */
    prevStart: EventEmitter<void>;
    /**
     * Emitted when the next slide has ended.
     */
    nextEnd: EventEmitter<void>;
    /**
     * Emitted when the previous slide has ended.
     */
    prevEnd: EventEmitter<void>;
    /**
     * Emitted when the slide transition has started.
     */
    transitionStart: EventEmitter<void>;
    /**
     * Emitted when the slide transition has ended.
     */
    transitionEnd: EventEmitter<void>;
    /**
     * Emitted when the slider is actively being moved.
     */
    drag: EventEmitter<void>;
    /**
     * Emitted when the slider is at its initial position.
     */
    reachStart: EventEmitter<void>;
    /**
     * Emitted when the slider is at the last slide.
     */
    reachEnd: EventEmitter<void>;
    /**
     * Emitted when the user first touches the slider.
     */
    touchStart: EventEmitter<void>;
    /**
     * Emitted when the user releases the touch.
     */
    touchEnd: EventEmitter<void>;
    /**********************
     * Method Definitions *
     **********************/
    /**
     * Init data from properties.
     */
    init(): Promise<void>;
    /**
     * Set the swiper.
     */
    setSwiper(): Promise<void>;
    /**
     * Update the underlying slider implementation. Call this if you've added or removed
     * child slides.
     */
    update(): Promise<void>;
    /**
     * Append new slides
     * slides could be HTMLElement or HTML string with new slide
     * or array with such slides
     */
    appendSlide(slides: any): Promise<void>;
    /**
     * Add new slides to required index
     * slides could be HTMLElement or HTML string with new slide
     * or array with such slides
     */
    addSlide(index: number, slides: any): Promise<void>;
    /**
     * Transition to the specified slide.
     */
    slideTo(index: number, speed?: number, runCallbacks?: boolean): Promise<void>;
    /**
     * Transition to the next slide.
     */
    slideNext(speed?: number, runCallbacks?: boolean): Promise<void>;
    /**
     * Transition to the previous slide.
     */
    slidePrev(speed?: number, runCallbacks?: boolean): Promise<void>;
    /**
     * Get the index of the active slide.
     */
    getActiveIndex(): Promise<number>;
    /**
     * Get the index of the previous slide.
     */
    getPreviousIndex(): Promise<number>;
    /**
     * Get the total number of slides.
     */
    length(): Promise<number>;
    /**
     * Get whether or not the current slide is the last slide.
     *
     */
    isEnd(): Promise<boolean>;
    /**
     * Get whether or not the current slide is the first slide.
     */
    isBeginning(): Promise<boolean>;
    /**
     * Start auto play.
     */
    startAutoplay(): Promise<void>;
    /**
     * Stop auto play.
     */
    stopAutoplay(): Promise<void>;
    /**
     * Swiper destroy.
     */
    swiperDestroy(cleanstyles: boolean): Promise<void>;
    /*********************************
     * Internal Variable Definitions *
     *********************************/
    _swiper: any;
    _swiperThumbs: any;
    _parallaxStyle: any;
    _didInit: boolean;
    _pagination: boolean;
    _navigation: boolean;
    _scrollbar: boolean;
    _zoom: boolean;
    _parallax: boolean;
    _thumbs: boolean;
    _autoplay: boolean;
    _lazy: boolean;
    _thumbsOptions: any;
    _thumbsClass: string;
    _initial: NodeJS.Timer;
    _scrollbarEl: HTMLElement;
    _paginationEl: HTMLElement;
    _navNextEl: HTMLElement;
    _navPrevEl: HTMLElement;
    _navButtons: HTMLElement;
    _playControlsEl: HTMLElement;
    _playBackwardEl: HTMLElement;
    _playForwardEl: HTMLElement;
    _swiperThumbsEl: HTMLElement;
    _cleanstyles: boolean;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): Promise<void>;
    componentDidUnload(): Promise<void>;
    private _init;
    private _setSwiper;
    private _doVisible;
    private _doHide;
    private _handleClick;
    render(): any;
}
