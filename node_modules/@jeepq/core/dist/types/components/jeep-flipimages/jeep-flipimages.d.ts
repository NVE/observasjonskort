import { EventEmitter } from '../../stencil.core';
import { Point, Rect } from '../../global/interfaces/geom';
import { flipImagesLocalCssVariables } from '../../global/interfaces/jeep-flipimages';
export declare class JeepFlipimages {
    el: HTMLJeepFlipimagesElement;
    /**
     * The type of image horizontal or vertical
     */
    type: string;
    /**
     * The container padding
     */
    fpadding: string;
    parseTypeProp(newValue: string): void;
    parseFpaddingProp(newValue: string): void;
    innerType: string;
    innerPadding: number;
    toggle: boolean;
    imageRatio: number;
    defBlocks: boolean;
    /**
     * Emitted when the first image is loaded
     */
    dimImgloaded: EventEmitter<HTMLImageElement>;
    handleDimImgloaded(event: CustomEvent): Promise<void>;
    /**
     * Method initialize
     */
    init(): Promise<void>;
    _window: Window | any;
    _document: Document | any;
    _root: Element | any;
    _wSize: Rect;
    _images: Array<any>;
    _imagesUrl: Array<string>;
    _alts: Array<string>;
    _flipElements: any;
    _mouseStart: boolean;
    _mouseMove: boolean;
    _stPoint: Point;
    _mvPoint: Point;
    _imageWidth: number;
    _imageHeight: number;
    _container: HTMLElement;
    _bbContainer: ClientRect;
    _flipToggle: HTMLElement;
    _frontImg1: HTMLElement;
    _frontImg2: HTMLElement;
    _backImg1: HTMLElement;
    _backImg2: HTMLElement;
    _indexFront: number;
    _indexBack: number;
    _flipUp: boolean;
    _flipLeft: boolean;
    _first: boolean;
    _top: boolean;
    _left: boolean;
    _doToggle: boolean;
    _element: any;
    _p_header: number;
    _typeArray: Array<string>;
    _containerWidth: number;
    _imgDim: HTMLDivElement;
    _localCSS: flipImagesLocalCssVariables;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): Promise<void>;
    private _init;
    private _getImageDim;
    private _setCssProperties;
    private _preload;
    private _toDataUrl;
    private _getElementList;
    private _removeChilds;
    private _checkImageWidthHeight;
    private _handleMoveEventTarget;
    private _handleEndEventTarget;
    private _handleToggle;
    private _handleMouseDown;
    private _handleMouseMove;
    private _handleMouseEnd;
    private _handleTouchStart;
    private _handleTouchMove;
    private _handleTouchEnd;
    renderFlipImages(): void;
    render(): any;
}
