import { MPoint } from './geom-maths';
import { CubicBezier, /*BoundingBox,*/ CubicBezierSplitCurves } from '../global/interfaces/svggeom';
export declare const isALetter: (charVal: any) => Boolean;
export declare const maxSegmentPath: (cBPaths: CubicBezier[]) => any;
export declare const isRegularShape: (shape: CubicBezier) => boolean;
export declare const splitCubicBezier: (cB: MPoint[], z: number) => CubicBezierSplitCurves;
export declare const getCubicBezierFromMPoints: (points: MPoint[]) => string;
export declare const initCurveMPoints: (P1: MPoint, P2: MPoint, P3: MPoint, P4: MPoint) => MPoint[];
export declare const getPointsFromCBPath: (cB: CubicBezier) => MPoint[];
export declare const permuteCubicBezier: (points: MPoint[], startIndex: number) => string;
export declare const permutePoints: (points: MPoint[], index: number) => any[];
export declare const cubicBezierAverageLength: (P1: MPoint, P2: MPoint, P3: MPoint, P4: MPoint) => number;
export declare const alignSegmentPath: (cB: CubicBezier, ratio: number) => {
    points: MPoint[];
    segLength: number[];
};
export declare const addSegmentToPath: (points: MPoint[], segLength: number[], nSegment: number) => {
    points: MPoint[];
    segLength: number[];
};
export declare const alignPathSegmentWithMax: (cB: CubicBezier, nSegment: number) => Promise<CubicBezier>;
export declare const alignPathSegments: (cBPaths: CubicBezier[], nSegment?: number) => Promise<CubicBezier[]>;
export declare const cubicBezierfromPath: (path: string, startIndex?: number) => Promise<CubicBezier>;
export declare const lineToCubicBezier: (cBezier: CubicBezier, oPath: string[], letter: boolean) => Promise<CubicBezier>;
export declare const quadraticToCubicBezier: (cBezier: CubicBezier, oPath: string[], letter: boolean) => Promise<CubicBezier>;
export declare const cubicToCubicBezier: (cBezier: CubicBezier, oPath: string[], letter: boolean) => Promise<CubicBezier>;
