import { Point, Rect } from '../global/interfaces/geom';
import { Legend, NearestPoint, AxisLength, DataPoint, DataSet, DataSets, SVGOptions, Anim } from '../global/interfaces/charts';
export declare const createSVGElement: (eltype: string, parent?: Element | HTMLElement | SVGElement) => Element;
export declare const createText: (g: Element, text: string, pos: Point, options?: any) => Element;
export declare const updateText: (svg: Element, id: string, anchor: string, pos: Point) => Element;
export declare const createLine: (g: Element, pos1: Point, pos2: Point, options?: any) => Element;
export declare const updateLine: (svg: Element, id: string, pos1: Point, pos2: Point) => Element;
export declare const createRect: (g: Element, rect: Rect, options?: any) => Element;
export declare const updateRect: (svg: Element, id: string, rect: Rect) => Element;
export declare const createCircle: (g: Element, pos: Point, radius: number, options?: any) => Element;
export declare const updateCircle: (svg: Element, id: string, pos: Point, radius: number) => Element;
export declare const createPolyline: (g: Element, points: string, options?: any) => Element;
export declare const updatePolyline: (svg: Element, id: string, points: string) => Element;
export declare const createMarker: (defs: Element, d: string, opt: SVGOptions) => void;
export declare const createAnimation: (el: Element, anim: Anim) => Element;
export declare function createColumnLabel(svg: Element, colbb: ClientRect, label: string, index: number, color: string, pt: Point, borderBB: ClientRect, options: SVGOptions): void;
export declare const createLineLabel: (svg: Element, label: string, pt: NearestPoint, color: string, options: SVGOptions) => Promise<void>;
export declare const createLabel: (svg: Element, id: string, label: string, lbPos: Rect, color: string, opt: SVGOptions) => void;
export declare const createLegendLines: (gEl: Element, names: string[], colors: string[], thicknesses: number[], data: Legend, winWidth: number, ypos: number, optLg: SVGOptions) => void;
export declare const measureLegend: (svg: Element, winWidth: number, names: string[], colors: string[], thicknesses: number[], optLg: SVGOptions) => Legend;
export declare const measureLegendItem: (svg: Element, label: string, opt: SVGOptions) => ClientRect;
export declare const createLegendItem: (g: Element, pos1: Point, pos2: Point, optLine: SVGOptions, label: string, pos3: Point, optText: SVGOptions) => void;
export declare const measureText: (svg: Element, label: string, opt: SVGOptions, mockFunc?: any) => Promise<ClientRect>;
export declare const getSVGOptions: (options?: SVGOptions) => SVGOptions;
export declare const elementSVGOptions: (opt: SVGOptions, el: Element, elType?: string) => void;
export declare const textScale: (text: number, window: number, padding: number) => number;
export declare const axisNiceNumber: (x: number, round: boolean, min: boolean) => number;
export declare const axisGetNumber: (x: number, interval: number, round: boolean, min: boolean) => number;
export declare const axisMaxArrayAttribute: (arr: DataSet[], attr: string) => DataPoint;
export declare const axisMinArrayAttribute: (arr: DataSet[], attr: string) => DataPoint;
export declare const axisMaxArrayLabel: (arr: DataSet[], attr: string) => DataPoint;
export declare const maxLegend: (arr: string[]) => string;
export declare const axisRange: (arr: DataSet[], axis: string, _interval?: number, _zero?: boolean) => AxisLength;
export declare const axisConvertY: (cRect: Rect, aLength: AxisLength, s: number) => number;
export declare const axisConvertX: (cRect: Rect, aLength: AxisLength, s: number) => number;
export declare const removeChilds: (el: Element) => void;
export declare const getNearest: (values: Point[][], pt: Point) => NearestPoint;
export declare const scalarDistance: (val: Point, pt: Point) => number;
export declare const getTotalLength: (arr: Point[]) => number;
export declare const checkDataSetsValidity: (arr: DataSet[], axisType: string[]) => DataSets;
