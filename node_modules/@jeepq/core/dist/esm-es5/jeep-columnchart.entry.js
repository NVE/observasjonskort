var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { r as registerInstance, h, g as getElement, H as Host } from './core-f19ae6a4.js';
import { w as windowSize, c as createSVGElement, a as createText, u as updateText, t as textScale, b as axisRange, d as createLine, e as updateLine, f as createRect, g as updateRect, r as removeChilds, h as createAnimation, i as createColumnLabel, j as axisConvertY } from './chart-svgelements-aa2d41d0.js';
import { d as debounce, a as getCssPropertyFromString, b as getDim, c as convertCSSNumber, e as convertCSSBoolean, g as getBoundingClientRect } from './common-61073bba.js';
import { r as randomHexColor } from './color-converter-95d511ea.js';
var JeepColumnchart = /** @class */ (function () {
    function class_1(hostRef) {
        registerInstance(this, hostRef);
    }
    //*****************************
    //* Watch on Property Changes *
    //*****************************
    class_1.prototype.parseTitleProp = function (newValue) {
        this.innerTitle = newValue ? newValue : null;
    };
    class_1.prototype.parseSubTitleProp = function (newValue) {
        this.innerSubTitle = newValue ? newValue : null;
    };
    class_1.prototype.parseColorProp = function (newValue) {
        this.innerColor = newValue ? newValue : null;
    };
    class_1.prototype.parseXTitleProp = function (newValue) {
        this.innerXTitle = newValue ? newValue : null;
    };
    class_1.prototype.parseYTitleProp = function (newValue) {
        this.innerYTitle = newValue ? newValue : null;
    };
    class_1.prototype.parseDatapointsProp = function (newValue) {
        var data = newValue ? newValue : null;
        this._dataColor = false;
        var dataPoints;
        var status;
        if (data != null) {
            var objData = JSON.parse(data);
            if (objData.data) {
                if (objData.data.length > 0) {
                    dataPoints = objData.data;
                    if (dataPoints[0].color)
                        this._dataColor = true;
                    if (this.innerColor === null && !this._dataColor) {
                        var hueInter = Math.floor(360 / dataPoints.length);
                        for (var i = 0; i < dataPoints.length; i++) {
                            var hueStart = i * hueInter;
                            var hueEnd = hueStart + hueInter;
                            dataPoints[i].color = randomHexColor(hueStart, hueEnd);
                        }
                        this._dataColor = true;
                    }
                    if (dataPoints[0].label)
                        this.axisType.push("label");
                    if (dataPoints[0].x)
                        this.axisType.push("x");
                    if (dataPoints[0].y)
                        this.axisType.push("y");
                    status = { status: 200 };
                }
                else {
                    dataPoints = null;
                    status = { status: 400, message: "Error: data object empty in datapoints property" };
                }
            }
            else {
                dataPoints = null;
                status = { status: 400, message: "Error: no data object in datapoints property" };
            }
        }
        else {
            dataPoints = null;
            status = { status: 400, message: "Error: no datapoints property" };
        }
        this.status = status;
        this.innerDatapoints = this.status.status === 200 ? __spreadArrays(dataPoints) : null;
    };
    class_1.prototype.parseStyleProp = function (newValue) {
        this.innerStyle = newValue ? newValue : null;
    };
    class_1.prototype.parseAnimationProp = function (newValue) {
        this.innerAnimation = newValue ? newValue : false;
    };
    class_1.prototype.parseBorderProp = function (newValue) {
        this.innerBorder = newValue ? newValue : false;
    };
    class_1.prototype.parseDelayProp = function (newValue) {
        this.innerDelay = newValue ? parseFloat(newValue) : 100;
    };
    //**********************
    //* Method Definitions *
    //**********************
    class_1.prototype.init = function () {
        this._init();
        return Promise.resolve();
    };
    class_1.prototype.getStatus = function () {
        return Promise.resolve(this.status);
    };
    class_1.prototype.renderChart = function () {
        return Promise.resolve(this._renderChart());
    };
    class_1.prototype.getWindowSize = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, windowSize(this.window)];
            });
        });
    };
    class_1.prototype.getCssProperties = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._prop];
            });
        });
    };
    //*******************************
    //* Component Lifecycle Methods *
    //*******************************
    class_1.prototype.componentWillLoad = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.window = window;
                        this._prop = {};
                        return [4 /*yield*/, this._init()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    class_1.prototype.componentDidLoad = function () {
        this._element = this.el.shadowRoot;
        if (this.status.status === 200) {
            this._renderChart();
        }
    };
    //******************************
    //* Private Method Definitions *
    //******************************
    /* ---- Deal with initialization and windows methods  */
    class_1.prototype._init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, filteredAxisX, propInstance, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.document = this.window.document;
                        this.root = this.document.documentElement;
                        this.axisType = [];
                        this.parseTitleProp(this.ctitle ? this.ctitle : null);
                        this.parseSubTitleProp(this.subtitle ? this.subtitle : null);
                        this.parseXTitleProp(this.xtitle ? this.xtitle : null);
                        this.parseYTitleProp(this.ytitle ? this.ytitle : null);
                        this.parseColorProp(this.color ? this.color : null);
                        this.parseAnimationProp(this.animation ? this.animation : false);
                        this.parseBorderProp(this.cborder ? this.cborder : false);
                        this.parseStyleProp(this.cstyle ? this.cstyle : null);
                        this.parseDelayProp(this.delay ? this.delay : "100");
                        _a = this;
                        return [4 /*yield*/, this.getWindowSize()];
                    case 1:
                        _a._wSize = _c.sent();
                        this._update = false;
                        this._dataColor = false;
                        this.parseDatapointsProp(this.datapoints ? this.datapoints : null);
                        this._yaxis = {};
                        filteredAxisX = [];
                        filteredAxisX = this.axisType.filter(function (element) { return element === "label"; });
                        this._label = false;
                        if (filteredAxisX[0] === "label") {
                            this._label = true;
                        }
                        this._showTarget = 0;
                        this.mouseStart = false;
                        this._xmlns = "http://www.w3.org/2000/svg";
                        this.window.addEventListener('resize', debounce(this, this._windowResize, 100, false), false);
                        // get the global css variables
                        this._prop.bgColor = this._prop.bgColor ? this._prop.bgColor : this._setPropertyValue('--chart-background-color', this.window.getComputedStyle(this.root).getPropertyValue('--chart-background-color'));
                        this._prop.topPlot = this._prop.topPlot ? this._prop.topPlot : this._setPropertyValue('--chart-top', this.window.getComputedStyle(this.root).getPropertyValue('--chart-top'));
                        this._prop.leftPlot = this._prop.leftPlot ? this._prop.leftPlot : this._setPropertyValue('--chart-left', this.window.getComputedStyle(this.root).getPropertyValue('--chart-left'));
                        this._prop.widthPlot = this._prop.widthPlot ? this._prop.widthPlot : this._setPropertyValue('--chart-width', this.window.getComputedStyle(this.root).getPropertyValue('--chart-width'));
                        this._prop.heightPlot = this._prop.heightPlot ? this._prop.heightPlot : this._setPropertyValue('--chart-height', this.window.getComputedStyle(this.root).getPropertyValue('--chart-height'));
                        this._prop.axColor = this._setPropertyValue('--chart-axis-color', this.window.getComputedStyle(this.root).getPropertyValue('--chart-axis-color'));
                        this._prop.lnColor = this._setPropertyValue('--chart-line-color', this.window.getComputedStyle(this.root).getPropertyValue('--chart-line-color'));
                        this._prop.tiColor = this._setPropertyValue('--chart-title-color', this.window.getComputedStyle(this.root).getPropertyValue('--chart-title-color'));
                        this._prop.stColor = this._setPropertyValue('--chart-subtitle-color', this.window.getComputedStyle(this.root).getPropertyValue('--chart-subtitle-color'));
                        this._prop.atColor = this._setPropertyValue('--chart-axis-title-color', this.window.getComputedStyle(this.root).getPropertyValue('--chart-axis-title-color'));
                        this._prop.lbColor = this._setPropertyValue('--chart-label-color', this.window.getComputedStyle(this.root).getPropertyValue('--chart-label-color'));
                        this._prop.ftFamily = this._setPropertyValue('--chart-font-family', this.window.getComputedStyle(this.root).getPropertyValue('--chart-font-family'));
                        this._prop.ftTiSize = this._setPropertyValue('--chart-title-font-size', this.window.getComputedStyle(this.root).getPropertyValue('--chart-title-font-size'));
                        this._prop.ftLbSize = this._setPropertyValue('--chart-label-font-size', this.window.getComputedStyle(this.root).getPropertyValue('--chart-label-font-size'));
                        this._prop.ftATSize = this._setPropertyValue('--chart-axis-title-font-size', this.window.getComputedStyle(this.root).getPropertyValue('--chart-axis-title-font-size'));
                        this._prop.ftSTSize = this._setPropertyValue('--chart-subtitle-font-size', this.window.getComputedStyle(this.root).getPropertyValue('--chart-subtitle-font-size'));
                        this._prop.tickX = this._setPropertyValue('--chart-tick-x-length', this.window.getComputedStyle(this.root).getPropertyValue('--chart-tick-x-length'));
                        this._prop.tickY = this._setPropertyValue('--chart-tick-y-length', this.window.getComputedStyle(this.root).getPropertyValue('--chart-tick-y-length'));
                        this._prop.gridX = this._setPropertyValue('--chart-grid-x', this.window.getComputedStyle(this.root).getPropertyValue('--chart-grid-x'));
                        this._prop.animDuration = this._setPropertyValue('--chart-animation-duration', this.window.getComputedStyle(this.root).getPropertyValue('--chart-animation-duration'));
                        this._prop.bdColor = this._setPropertyValue('--chart-border-color', this.window.getComputedStyle(this.root).getPropertyValue('--chart-border-color'));
                        this._prop.bdWidth = this._setPropertyValue('--chart-border-width', this.window.getComputedStyle(this.root).getPropertyValue('--chart-border-width'));
                        if (!(this.innerStyle != null)) return [3 /*break*/, 3];
                        return [4 /*yield*/, getCssPropertyFromString(this.innerStyle)];
                    case 2:
                        propInstance = _c.sent();
                        if (propInstance != null) {
                            this._prop.leftPlot = propInstance.left ? propInstance.left : this._prop.leftPlot;
                            this._prop.topPlot = propInstance.top ? propInstance.top : this._prop.topPlot;
                            this._prop.widthPlot = propInstance.width ? propInstance.width : this._prop.widthPlot;
                            this._prop.heightPlot = propInstance.height ? propInstance.height : this._prop.heightPlot;
                            this._prop.bgColor = propInstance.backgroundcolor ? propInstance.backgroundcolor : this._prop.bgColor;
                        }
                        _c.label = 3;
                    case 3:
                        // get the window size
                        _b = this;
                        return [4 /*yield*/, this.getWindowSize()];
                    case 4:
                        // get the window size
                        _b._wSize = _c.sent();
                        // set the div container size
                        this._setContainerSize();
                        return [2 /*return*/];
                }
            });
        });
    };
    class_1.prototype._setContainerSize = function () {
        this.w_width = getDim(this._prop.widthPlot, this._wSize.width, this._prop.leftPlot);
        this.w_height = getDim(this._prop.heightPlot, this._wSize.height, this._prop.topPlot);
        this.el.style.setProperty('--top', this._prop.topPlot);
        this.el.style.setProperty('--left', this._prop.leftPlot);
        this.el.style.setProperty('--width', this.w_width + "px");
        this.el.style.setProperty('--height', this.w_height + "px");
        this.el.style.setProperty('--backgroundcolor', "" + this._prop.bgColor);
        this._titleRect = null;
        this._chartRect = { top: 0, left: 0, width: this.w_width, height: this.w_height };
    };
    class_1.prototype._windowResize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.getWindowSize()];
                    case 1:
                        _a._wSize = _b.sent();
                        this._setContainerSize();
                        this._update = true;
                        if (this.status && this.status.status === 200) {
                            this._renderChart();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    class_1.prototype._getDataPoint = function (data) {
        for (var i = 0; i < this.innerDatapoints.length; i++) {
            if (this._label) {
                if (this.innerDatapoints[i].label === data) {
                    return { index: i, datapoint: this.innerDatapoints[i] };
                }
            }
            else {
                if (this.innerDatapoints[i].x === parseFloat(data)) {
                    return { index: i, datapoint: this.innerDatapoints[i] };
                }
            }
            if (i === this.innerDatapoints.length - 1)
                return { index: -1, datapoint: null };
        }
    };
    class_1.prototype._setPropertyValue = function (name, value) {
        if (name === '--chart-background-color') {
            return value ? value : "#ffffff";
        }
        else if (name.slice(-5) === 'color') {
            return value ? value : "#000000";
        }
        else if (name.slice(-12) === 'border-width') {
            return value ? value : "1";
        }
        else if (name.slice(-9) === 'font-size') {
            return value ? value : "10px";
        }
        else if (name.slice(-11) === 'font-family') {
            return value ? value : "Verdana";
        }
        else if (name.slice(-6).substring(0, 4) === 'grid') {
            return value ? value : "false";
        }
        else if (name.slice(-8) === 'duration') {
            return value ? value : "0.5s";
        }
        else {
            return value ? value : "0";
        }
    };
    /* ---- Deal with Chart SVG Elements  */
    class_1.prototype._createTitle = function () {
        if (this.innerTitle != null) {
            var g = void 0;
            var textEl = void 0;
            if (!this._update) {
                g = createSVGElement("g", this.svg);
                g.setAttributeNS(null, "id", "columnchart-title");
            }
            else {
                g = this.svg.querySelector("#columnchart-title");
                g.removeAttributeNS(null, 'transform');
            }
            var opt = {
                id: "columnchart-title-text",
                fontFamily: this._prop.ftFamily,
                fontSize: this._prop.ftTiSize,
                fill: this._prop.tiColor,
                anchor: "middle"
            };
            var y = parseFloat(this._prop.ftTiSize.split('px')[0]);
            var pos = { x: Math.round(this.w_width / 2), y: y + 10 };
            if (!this._update) {
                textEl = createText(g, this.innerTitle, pos, opt);
            }
            else {
                textEl = updateText(this.svg, opt.id, opt.anchor, pos);
            }
            var bb = void 0;
            // display the subtitle if any
            if (this.innerSubTitle != null) {
                bb = textEl.getBoundingClientRect();
                opt.id = "columnchart-subtitle-text";
                opt.fontSize = this._prop.ftSTSize;
                opt.fill = this._prop.stColor;
                y = Math.ceil(bb.bottom - this.borderBB.top) + 5;
                pos = { x: Math.round(this.w_width / 2), y: y + 10 };
                if (!this._update) {
                    createText(g, this.innerSubTitle, pos, opt);
                }
                else {
                    updateText(this.svg, opt.id, opt.anchor, pos);
                }
            }
            bb = g.getBoundingClientRect();
            var scale = textScale(bb.width, this.w_width, 10);
            var transf = 'translate(' + Math.round(10 - bb.left * scale) + ',0) ' + 'scale(' + scale + ',' + scale + ')';
            if (scale != 1)
                g.setAttributeNS(null, "transform", transf);
            bb = g.getBoundingClientRect();
            this._titleRect = { left: bb.left - this.borderBB.left, top: bb.top - this.borderBB.top, width: bb.width, height: bb.height };
        }
    };
    class_1.prototype._createTitleY = function () {
        var g;
        var opt = {
            id: "columnchart-ytitle-text",
            fontFamily: this._prop.ftFamily,
            fontSize: this._prop.ftATSize,
            fill: this._prop.atColor,
            anchor: "middle"
        };
        if (this.innerYTitle != null) {
            var textEl = void 0;
            if (!this._update) {
                g = createSVGElement("g", this.svg);
                g.setAttributeNS(null, "id", "columnchart-ytitle");
            }
            else {
                g = this.svg.querySelector("#columnchart-ytitle");
            }
            var y = this._chartRect.top + Math.round(this._chartRect.height / 2);
            var x = 5 + parseFloat(this._prop.ftATSize.split('px')[0]);
            var pos = { x: x, y: y };
            if (!this._update) {
                textEl = createText(g, this.innerYTitle, pos, opt);
            }
            else {
                textEl = updateText(this.svg, opt.id, opt.anchor, pos);
            }
            var transf = 'rotate(-90 ' + pos.x.toString() + ' ' + pos.y.toString() + ')';
            textEl.setAttributeNS(null, "transform", transf);
            var bb = g.getBoundingClientRect();
            this._chartRect.left = Math.ceil(bb.right - this.borderBB.left);
            this._chartRect.width -= Math.ceil(bb.right - this.borderBB.left);
            return g;
        }
        else {
            return null;
        }
    };
    class_1.prototype._createTitleX = function () {
        var opt = {
            id: "columnchart-xtitle-text",
            fontFamily: this._prop.ftFamily,
            fontSize: this._prop.ftATSize,
            fill: this._prop.atColor,
            anchor: "middle"
        };
        if (this.innerXTitle != null) {
            var g = void 0;
            if (!this._update) {
                g = createSVGElement("g", this.svg);
                g.setAttributeNS(null, "id", "columnchart-xtitle");
            }
            else {
                g = this.svg.querySelector("#columnchart-xtitle");
            }
            var y = this._chartRect.top + this._chartRect.height - 10;
            var x = Math.round(this._chartRect.left + this._chartRect.width / 2);
            var pos = { x: x, y: y };
            if (!this._update) {
                createText(g, this.innerXTitle, pos, opt);
            }
            else {
                updateText(this.svg, opt.id, opt.anchor, pos);
            }
            var bb = g.getBoundingClientRect();
            this._chartRect.height -= Math.floor(bb.height);
            return g;
        }
        else {
            return null;
        }
    };
    class_1.prototype._labelSize = function (lenA, rot) {
        var opt = {
            fontFamily: this._prop.ftFamily,
            fontSize: this._prop.ftLbSize,
            fill: this._prop.lbColor,
            anchor: "start"
        };
        var max;
        if (lenA.label) {
            max = lenA.label;
        }
        else {
            max = lenA.top.toString();
            var min = lenA.bottom.toString();
            if (min.length > max.length)
                max = min;
        }
        var y = 0;
        var x = 0;
        var pos = { x: x, y: y };
        var textEl = createText(this.svg, max, pos, opt);
        if (rot != 0) {
            var transf = 'rotate(' + rot + ',0,0)';
            textEl.setAttributeNS(null, "transform", transf);
        }
        var bb = textEl.getBoundingClientRect();
        this.svg.removeChild(textEl);
        return { width: Math.ceil(bb.width), height: Math.ceil(bb.height) };
    };
    class_1.prototype._createAxis = function () {
        var tickXL = convertCSSNumber(this._prop.tickX);
        var tickYL = convertCSSNumber(this._prop.tickY);
        var g;
        if (!this._update) {
            g = createSVGElement("g", this.svg);
            g.setAttributeNS(this._xmlns, "id", "columnchart-axes");
        }
        else {
            g = this.svg.querySelector("#columnchart-axes");
        }
        this._initChartRect();
        var gTY = this._createTitleY();
        var gTX = this._createTitleX();
        // find the axes range
        var dataSet = { dataPoints: this.innerDatapoints };
        this._lenY = axisRange([dataSet], "y", 0, true);
        if (this._label) {
            this._lenX = axisRange([dataSet], "label");
        }
        else {
            this._lenX = axisRange([dataSet], "x");
        }
        // calculate the label sizes
        var labelYSize = this._labelSize(this._lenY, 0);
        this._x_axy = 3 + labelYSize.width + 2 + tickYL;
        this._nXlines = this.innerDatapoints.length;
        var xLength = this._chartRect.width - this._x_axy;
        this._xInterval = Math.floor(xLength / this._nXlines);
        this._labelRotate = false;
        var labelXSize = this._labelSize(this._lenX, 0);
        if (labelXSize.width > this._xInterval - 10) {
            labelXSize = this._labelSize(this._lenX, -80);
            this._labelRotate = true;
        }
        this._y_axy = 10 + labelXSize.height + 3 + tickXL;
        // Y axis
        this._yaxis = {};
        this._yaxis.left = this._chartRect.left + this._x_axy;
        this._yaxis.width = 0;
        this._yaxis.top = this._chartRect.top;
        this._yaxis.height = this._chartRect.height - this._y_axy;
        var opt = {
            id: "columnchart-yaxis",
            stroke: this._prop.axColor,
            strokeWidth: "1"
        };
        var posy1 = { x: this._yaxis.left, y: this._yaxis.top };
        var posy2 = { x: this._yaxis.left + this._yaxis.width, y: this._yaxis.top + this._yaxis.height };
        if (!this._update) {
            createLine(g, posy1, posy2, opt);
        }
        else {
            updateLine(this.svg, opt.id, posy1, posy2);
        }
        // center the y Axis Title
        if (gTY != null) {
            var transf = 'translate(0,0)';
            gTY.setAttributeNS(null, "transform", transf);
            var titleBB = gTY.getBoundingClientRect();
            var trans = -Math.round(titleBB.top - this.borderBB.top + titleBB.height / 2 - (this._yaxis.top + this._yaxis.height / 2));
            transf = 'translate(0,' + trans + ')';
            gTY.setAttributeNS(null, "transform", transf);
        }
        var optLabel = {
            id: "columnchart-ylabel0",
            stroke: this._prop.lbColor,
            strokeWidth: "1",
            fontFamily: this._prop.ftFamily,
            fontSize: this._prop.ftLbSize,
            anchor: "end"
        };
        var yft = Math.floor(parseFloat(this._prop.ftLbSize.split('px')[0]) / 2) - 2; // correction 2px 
        // Y grid lines
        this._nYlines = Math.abs(Math.floor(this._lenY.length / this._lenY.interval)) + 1;
        for (var i = 0; i < this._nYlines; i++) {
            var s = this._lenY.top - i * Math.abs(this._lenY.interval);
            opt.id = "columnchart-yLine" + s.toString();
            if (i === this._nYlines - 1)
                opt.id = "columnchart-xaxis";
            opt.stroke = this._prop.lnColor;
            optLabel.id = "columnchart-ylabel" + s.toString();
            var y_1 = axisConvertY(this._yaxis, this._lenY, s);
            var posxl1 = { x: this._yaxis.left, y: y_1 };
            var posxl2 = { x: this._chartRect.left + this._chartRect.width, y: y_1 };
            if (!this._update) {
                createLine(g, posxl1, posxl2, opt);
            }
            else {
                updateLine(this.svg, opt.id, posxl1, posxl2);
            }
            // tick
            if (tickYL > 0) {
                var postk = { x: this._yaxis.left - tickYL, y: y_1 };
                opt.id = "columnchart-ytick" + s.toString();
                if (!this._update) {
                    createLine(g, posxl1, postk, opt);
                }
                else {
                    updateLine(this.svg, opt.id, posxl1, postk);
                }
            }
            // label
            var pos = { x: this._yaxis.left - tickYL - 2, y: y_1 + yft };
            if (!this._update) {
                createText(g, s.toString(), pos, optLabel);
            }
            else {
                updateText(this.svg, optLabel.id, optLabel.anchor, pos);
            }
        }
        // X Grid Lines
        var xAxisEl = this.svg.querySelector("#columnchart-xaxis");
        var y = parseFloat(xAxisEl.getAttribute("y1"));
        var x = Math.floor(this._xInterval / 2);
        optLabel = {
            id: "columnchart-xlabel",
            stroke: this._prop.lbColor,
            strokeWidth: "1",
            fontFamily: this._prop.ftFamily,
            fontSize: this._prop.ftLbSize,
            anchor: "middle"
        };
        yft = Math.floor(parseFloat(this._prop.ftLbSize.split('px')[0])); //  
        for (var i = 0; i < this._nXlines; i++) {
            var posx1 = { x: this._yaxis.left + x, y: y };
            // GridX Line
            if (convertCSSBoolean(this._prop.gridX)) {
                opt.id = "columnchart-xLine" + i.toString();
                var posx2 = { x: this._yaxis.left + x, y: this._yaxis.top };
                if (!this._update) {
                    createLine(g, posx1, posx2, opt);
                }
                else {
                    updateLine(this.svg, opt.id, posx1, posx2);
                }
            }
            // tick
            if (tickXL > 0) {
                var postk = { x: this._yaxis.left + x, y: y + tickXL };
                opt.id = "columnchart-xtick" + i.toString();
                if (!this._update) {
                    createLine(g, posx1, postk, opt);
                }
                else {
                    updateLine(this.svg, opt.id, posx1, postk);
                }
            }
            // label
            var labx = void 0;
            if (this._label) {
                labx = this.innerDatapoints[i].label;
            }
            else {
                labx = this.innerDatapoints[i].x.toString();
            }
            optLabel.id = "columnchart-xlabel" + labx;
            var labelEl = void 0;
            var pos = void 0;
            var transr = null;
            if (this._labelRotate) {
                optLabel.anchor = 'end';
                pos = { x: this._yaxis.left + x, y: y + tickXL + 3 };
                transr = 'rotate(-80,' + pos.x + ',' + pos.y + ')';
            }
            else {
                optLabel.anchor = 'middle';
                pos = { x: this._yaxis.left + x, y: y + tickXL + yft };
                transr = 'rotate(0,' + pos.x + ',' + pos.y + ')';
            }
            if (!this._update) {
                labelEl = createText(g, labx, pos, optLabel);
            }
            else {
                labelEl = updateText(this.svg, optLabel.id, optLabel.anchor, pos);
            }
            if (transr != null)
                labelEl.setAttributeNS(null, "transform", transr);
            x += this._xInterval;
        }
        if (gTX != null) {
            var transf = 'translate(0,0)';
            gTX.setAttributeNS(null, "transform", transf);
            var axisBB = xAxisEl.getBoundingClientRect();
            var titleBB = gTX.getBoundingClientRect();
            var trans = -Math.round(titleBB.left + titleBB.width / 2 - (axisBB.left + axisBB.width / 2));
            if (Math.abs(trans) > 0) {
                var transf_1 = 'translate(' + trans + ',0)';
                gTX.setAttributeNS(null, "transform", transf_1);
            }
        }
    };
    class_1.prototype._createColumn = function () {
        var g;
        if (!this._update) {
            g = createSVGElement("g", this.svg);
            g.setAttributeNS(null, "id", "columnchart-data");
        }
        else {
            g = this.svg.querySelector("#columnchart-data");
        }
        var opt = {
            id: "columnchart-data",
        };
        if (this.innerColor != null) {
            opt.fill = this.innerColor;
        }
        var xcol = Math.floor(this._xInterval / 2);
        var xw = Math.floor(xcol - 0.1 * xcol);
        var wcol = xw > 2 ? xw : 2;
        var colEl;
        var yzero = axisConvertY(this._yaxis, this._lenY, 0);
        for (var i = 0; i < this._nXlines; i++) {
            if (this._dataColor)
                opt.fill = this.innerDatapoints[i].color;
            var labx = void 0;
            if (this._label) {
                labx = this.innerDatapoints[i].label;
            }
            else {
                labx = this.innerDatapoints[i].x.toString();
            }
            opt.id = "columnchart-data-" + labx;
            var colReverse = false;
            var col = {};
            col.left = this._yaxis.left + xcol - wcol;
            col.width = 2 * wcol;
            var y = axisConvertY(this._yaxis, this._lenY, this.innerDatapoints[i].y);
            if (y > yzero) {
                col.top = yzero;
                col.height = y - yzero;
            }
            else {
                col.top = y;
                col.height = yzero - col.top;
                colReverse = true;
            }
            if (!this._update) {
                colEl = createRect(g, col, opt);
                colEl.addEventListener('touchstart', this._handleTouchDown.bind(this), false);
                colEl.addEventListener('touchend', this._handleTouchUp.bind(this), false);
                colEl.addEventListener('mousedown', this._handleMouseDown.bind(this), false);
                colEl.addEventListener('mouseup', this._handleMouseUp.bind(this), false);
                if (this.innerAnimation)
                    this._setAnimation(colEl, col, this._prop.animDuration, colReverse);
            }
            else {
                colEl = updateRect(this.svg, opt.id, col);
                if (this.innerAnimation) {
                    removeChilds(colEl);
                    this._setAnimation(colEl, col, this._prop.animDuration, colReverse);
                }
            }
            xcol += this._xInterval;
        }
    };
    class_1.prototype._setAnimation = function (colEl, col, duration, reverse) {
        var animOpt = {};
        animOpt.attributeName = "height";
        animOpt.from = "0";
        animOpt.to = col.height.toString();
        animOpt.dur = duration;
        animOpt.fill = "freeze";
        createAnimation(colEl, animOpt);
        if (reverse) {
            animOpt.attributeName = "y";
            animOpt.from = (col.top + col.height).toString();
            animOpt.to = col.top.toString();
            createAnimation(colEl, animOpt);
        }
    };
    class_1.prototype._initChartRect = function () {
        this._chartRect.top = 20; //20px below
        if (this._titleRect != null)
            this._chartRect.top += Math.round(this._titleRect.top + this._titleRect.height);
        this._chartRect.left = 0;
        this._chartRect.width = this.w_width - this._chartRect.left - 20; // 20px right
        this._chartRect.height = this.w_height - this._chartRect.top; // 20px bottom
    };
    class_1.prototype._waitRemoveLabel = function () {
        var _this = this;
        if (this.mouseStart) {
            setTimeout(function () {
                _this._removeLabel(_this.svg);
                _this.mouseStart = false;
                _this._showTarget = 0;
            }, 1200);
        }
    };
    class_1.prototype._removeLabel = function (svg) {
        var gElems = svg.querySelectorAll("#columnchart-label-value");
        for (var i = 0; i < gElems.length; i++) {
            removeChilds(gElems[i]);
            svg.removeChild(gElems[i]);
        }
    };
    /* ---- Deal with handling event  */
    class_1.prototype._handleTouchDown = function (evt) {
        evt.preventDefault();
        this.mouseStart = true;
        var pt = { x: evt.touches[0].pageX, y: evt.touches[0].pageY };
        this._handleEventTarget(evt, pt);
    };
    class_1.prototype._handleMouseDown = function (evt) {
        evt.preventDefault();
        this.mouseStart = true;
        var pt = { x: evt.pageX, y: evt.pageY };
        this._handleEventTarget(evt, pt);
    };
    class_1.prototype._handleEventTarget = function (evt, pt) {
        this._showTarget = evt.target;
        pt.x -= this.borderBB.left;
        pt.y -= this.borderBB.top;
        var colbb = this._showTarget.getBoundingClientRect();
        var color = this._showTarget.getAttributeNS(null, 'fill');
        var id = this._showTarget.getAttributeNS(null, 'id');
        var label = id.split('-')[2];
        var data = this._getDataPoint(label);
        label = label + " : " + data.datapoint.y;
        var index = data.index;
        var ft = 1.2 * parseFloat(this._prop.ftLbSize.split('px')[0]);
        var opt = {
            fontFamily: this._prop.ftFamily,
            fontSize: ft.toString() + 'px',
            fill: this._prop.lbColor,
            anchor: "middle"
        };
        createColumnLabel(this.svg, colbb, label, index, color, pt, this.borderBB, opt);
    };
    class_1.prototype._handleTouchUp = function (evt) {
        evt.preventDefault();
        this._waitRemoveLabel();
    };
    class_1.prototype._handleMouseUp = function (evt) {
        evt.preventDefault();
        this._waitRemoveLabel();
    };
    /* ---- Deal with rendering  */
    class_1.prototype._renderChart = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.container = this._element.querySelector("#div-columnchart-container");
                        this.chart = this._element.querySelector('#div-columnchart-chart');
                        this.svg = this._element.querySelector('#svg-columnchart');
                        this.borderEl = this.svg.querySelector('#svg-border-rect');
                        _a = this;
                        return [4 /*yield*/, getBoundingClientRect(this.borderEl, this.innerDelay)];
                    case 1:
                        _a.borderBB = _b.sent();
                        if (this.borderBB.top != 0 || this.borderBB.left != 0 || this.borderBB.width != 0 || this.borderBB.height != 0) {
                            if (this.innerBorder) {
                                this.borderEl.classList.remove('hidden');
                            }
                            // draw the column chart
                            if (this.innerTitle != null && this.innerTitle.length > 0)
                                this._createTitle();
                            this._createAxis();
                            this._createColumn();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    class_1.prototype.render = function () {
        var toRender = [];
        if (this.status.status === 200) {
            var viewBox = "0 0 " + this.w_width.toString() + " " + this.w_height.toString();
            toRender = __spreadArrays(toRender, [h("div", { id: "div-columnchart-container" }, h("div", { id: "div-columnchart-chart" }, h("svg", { id: "svg-columnchart", width: this.w_width.toString(), height: this.w_height.toString(), viewBox: viewBox }, h("rect", { id: "svg-border-rect", class: "border-rect hidden", x: "0", y: "0", width: this.w_width.toString(), height: this.w_height.toString(), stroke: this._prop.bdColor, "stroke-width": this._prop.bdWidth, fill: "none", "fill-opacity": "0" }))))]);
        }
        else {
            toRender = __spreadArrays(toRender, [h("div", { id: "div-error-message" }, h("p", { id: "p-error-message" }, this.status.message))]);
        }
        return (h(Host, null, toRender));
    };
    Object.defineProperty(class_1.prototype, "el", {
        get: function () { return getElement(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(class_1, "watchers", {
        get: function () {
            return {
                "ctitle": ["parseTitleProp"],
                "subtitle": ["parseSubTitleProp"],
                "color": ["parseColorProp"],
                "xtitle": ["parseXTitleProp"],
                "ytitle": ["parseYTitleProp"],
                "datapoints": ["parseDatapointsProp"],
                "cstyle": ["parseStyleProp"],
                "animation": ["parseAnimationProp"],
                "cborder": ["parseBorderProp"],
                "delay": ["parseDelayProp"]
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(class_1, "style", {
        get: function () { return ":host{--height:200px;--width:300px;--top:30px;--left:10px;--backgroundcolor:#fff}#div-columnchart-container{position:relative;left:0;top:0;width:100%;height:calc(var(--height) + var(--top));z-index:1}#div-columnchart-chart{position:relative;left:var(--left);top:var(--top);width:var(--width);height:var(--height);background-color:var(--backgroundcolor);z-index:1}.hidden{visibility:hidden}#div-error-message{background-color:#f89393;position:absolute;top:0;left:0;margin:0 auto;width:100%;height:60px;line-height:60px;text-align:left;padding-left:10px;font-size:15px;font-family:Verdana}#p-error-message{display:inline-block;vertical-align:middle;line-height:normal}"; },
        enumerable: true,
        configurable: true
    });
    return class_1;
}());
export { JeepColumnchart as jeep_columnchart };
