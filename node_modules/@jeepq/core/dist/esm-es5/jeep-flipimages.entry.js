var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './core-f19ae6a4.js';
import { c as convertCSSNumber } from './common-61073bba.js';
var JeepFlipimages = /** @class */ (function () {
    function class_1(hostRef) {
        registerInstance(this, hostRef);
        //************************
        //* Property Definitions *
        //************************
        /**
         * The type of image horizontal or vertical
         */
        this.type = "horizontal";
        /**
         * The container padding
         */
        this.fpadding = "0";
        this.defBlocks = false;
        this._typeArray = ['horizontal', 'vertical'];
        this._localCSS = {};
        this.dimImgloaded = createEvent(this, "jeepFlipImagesImgLoaded", 7);
    }
    //*****************************
    //* Watch on Property Changes *
    //*****************************
    class_1.prototype.parseTypeProp = function (newValue) {
        this.innerType = newValue && this._typeArray.indexOf(newValue) >= 0 ? newValue : "horizontal";
    };
    class_1.prototype.parseFpaddingProp = function (newValue) {
        this.innerPadding = newValue ? parseFloat(newValue) : 0;
    };
    //*******************************
    //* Listen to Event Definitions *
    //*******************************
    class_1.prototype.handleDimImgloaded = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var img;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        img = event.detail;
                        this._preload(this._imagesUrl, 2, this._imagesUrl.length - 1);
                        this.imageRatio = img.naturalHeight / img.naturalWidth;
                        this._bbContainer = this._container.getBoundingClientRect();
                        this._imageWidth = this._bbContainer.width - 2 * this.innerPadding -
                            2 * convertCSSNumber(this._localCSS.borderWidth) - 2 * convertCSSNumber(this._localCSS.shadowWidth);
                        this._imageHeight = Math.floor(this._imageWidth * this.imageRatio);
                        return [4 /*yield*/, this._checkImageWidthHeight()];
                    case 1:
                        _a.sent();
                        this._container.removeChild(this._imgDim);
                        this._flipToggle = this._container.querySelector('#flip-toggle');
                        if (this.innerType === "vertical") {
                            this._backImg1 = this._flipToggle.querySelector('#image-back-left');
                            this._backImg2 = this._flipToggle.querySelector('#image-back-right');
                            this._frontImg1 = this._flipToggle.querySelector('#image-front-left');
                            this._frontImg2 = this._flipToggle.querySelector('#image-front-right');
                        }
                        else {
                            this._backImg1 = this._flipToggle.querySelector('#image-back-top');
                            this._backImg2 = this._flipToggle.querySelector('#image-back-bottom');
                            this._frontImg1 = this._flipToggle.querySelector('#image-front-top');
                            this._frontImg2 = this._flipToggle.querySelector('#image-front-bottom');
                        }
                        this._setCssProperties();
                        this._flipToggle.classList.add("flipvisible");
                        this.defBlocks = true;
                        return [2 /*return*/];
                }
            });
        });
    };
    //**********************
    //* Method Definitions *
    //**********************
    /**
     * Method initialize
     */
    class_1.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._init()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    //*******************************
    //* Component Lifecycle Methods *
    //*******************************
    class_1.prototype.componentWillLoad = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._window = window;
                        return [4 /*yield*/, this._init()];
                    case 1:
                        _a.sent();
                        this._window.addEventListener('resize', function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        this._bbContainer = this._container.getBoundingClientRect();
                                        this._imageWidth = this._bbContainer.width - 2 * this.innerPadding -
                                            2 * convertCSSNumber(this._localCSS.borderWidth) - 2 * convertCSSNumber(this._localCSS.shadowWidth);
                                        this._imageHeight = Math.floor(this._imageWidth * this.imageRatio);
                                        return [4 /*yield*/, this._checkImageWidthHeight()];
                                    case 1:
                                        _a.sent();
                                        this._setCssProperties();
                                        this.defBlocks = true;
                                        return [2 /*return*/];
                                }
                            });
                        }); }, false);
                        return [2 /*return*/];
                }
            });
        });
    };
    class_1.prototype.componentDidLoad = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this._element = this.el.shadowRoot;
                if (this._flipElements != null) {
                    this._getImageDim();
                }
                return [2 /*return*/];
            });
        });
    };
    //******************************
    //* Private Method Definitions *
    //******************************
    class_1.prototype._init = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this._document = this._window.document;
                this._root = this._document.documentElement;
                // reading properties
                this.parseTypeProp(this.type ? this.type : "horizontal");
                this.parseFpaddingProp(this.fpadding ? this.fpadding : "0");
                this._getElementList();
                this._indexFront = 0;
                this._indexBack = this._imagesUrl.length > 1 ? 1 : 0;
                this.toggle = false;
                this._flipUp = false;
                this._flipLeft = false;
                this._mouseStart = false;
                this._mouseMove = false;
                this._flipElements = null;
                this._first = true;
                //  reading local css variables
                this._localCSS.shadowWidth = window.getComputedStyle(this.el).getPropertyValue('--flipimages-shadow-width');
                this._localCSS.shadowColor = window.getComputedStyle(this.el).getPropertyValue('--flipimages-shadow-color');
                this._localCSS.borderWidth = window.getComputedStyle(this.el).getPropertyValue('--flipimages-border-width');
                this._localCSS.borderColor = window.getComputedStyle(this.el).getPropertyValue('--flipimages-border-color');
                this.el.style.setProperty('--container-padding', this.innerPadding.toString() + 'px');
                return [2 /*return*/];
            });
        });
    };
    // ---- Deal with Utilities ----
    class_1.prototype._getImageDim = function () {
        var _this = this;
        this._container = this._element.querySelector('.container');
        this._imgDim = this._container.querySelector('.image-dim');
        var img = this._imgDim.querySelector('img');
        img.onload = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._images = [];
                        return [4 /*yield*/, this._preload(this._imagesUrl, 0, 1)];
                    case 1:
                        _a.sent();
                        this.dimImgloaded.emit(img);
                        return [2 /*return*/];
                }
            });
        }); };
    };
    class_1.prototype._setCssProperties = function () {
        this.el.style.setProperty('--image-height', this._imageHeight.toString() + 'px');
        this.el.style.setProperty('--image-width', this._imageWidth.toString() + 'px');
        this.el.style.setProperty('--container-padding', this.innerPadding.toString() + 'px');
    };
    class_1.prototype._preload = function (imageArray, start, end) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                        var i, retVal;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    i = start;
                                    _a.label = 1;
                                case 1:
                                    if (!(i < end + 1)) return [3 /*break*/, 6];
                                    if (!(imageArray[i].substring(0, 4) === 'http')) return [3 /*break*/, 3];
                                    return [4 /*yield*/, this._toDataUrl(imageArray[i])];
                                case 2:
                                    retVal = _a.sent();
                                    this._images = __spreadArrays(this._images, [retVal]);
                                    return [3 /*break*/, 4];
                                case 3:
                                    this._images = __spreadArrays(this._images, [imageArray[i]]);
                                    _a.label = 4;
                                case 4:
                                    if (i === end)
                                        resolve();
                                    _a.label = 5;
                                case 5:
                                    i++;
                                    return [3 /*break*/, 1];
                                case 6: return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    class_1.prototype._toDataUrl = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        fetch(url, {
                            method: 'GET'
                        }).then(function (res) {
                            return res.blob();
                        }).then(function (blob) {
                            var reader = new FileReader();
                            reader.addEventListener("load", function () {
                                resolve(reader.result);
                            }, false);
                            reader.readAsDataURL(blob);
                        }).catch(function (err) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                console.log('Error: ', err.message);
                                resolve();
                                return [2 /*return*/];
                            });
                        }); });
                    })];
            });
        });
    };
    class_1.prototype._getElementList = function () {
        this._imagesUrl = [];
        this._alts = [];
        for (var i = 0; i < this.el.childElementCount; i++) {
            this._imagesUrl.push(this.el.children[i].getAttribute('src'));
            this._alts.push(this.el.children[i].getAttribute('alt'));
        }
        this._removeChilds(this.el);
    };
    class_1.prototype._removeChilds = function (el) {
        while (el.firstChild) {
            el.removeChild(el.firstChild);
        }
    };
    class_1.prototype._checkImageWidthHeight = function () {
        return __awaiter(this, void 0, void 0, function () {
            var maxHeight;
            return __generator(this, function (_a) {
                maxHeight = Math.floor(this._bbContainer.height - 2 * this.innerPadding -
                    2 * convertCSSNumber(this._localCSS.borderWidth) -
                    2 * convertCSSNumber(this._localCSS.shadowWidth));
                if (this._imageHeight > maxHeight) {
                    this._imageHeight = maxHeight;
                    this._imageWidth = Math.floor(this._imageHeight / this.imageRatio);
                }
                return [2 /*return*/];
            });
        });
    };
    /* ---- Deal with handling event  */
    class_1.prototype._handleMoveEventTarget = function () {
        if (this.innerType === "horizontal") {
            // type horizontal
            if (this._stPoint.y < this._bbContainer.height / 2) {
                // top part
                this._top = true;
                if (this._mvPoint.y < this._stPoint.y) {
                    // flip up
                    this._flipUp = true;
                }
                else {
                    // flip down
                    this._flipUp = false;
                }
            }
            else {
                // bottom part
                this._top = false;
                if (this._mvPoint.y < this._stPoint.y) {
                    // flip up
                    this._flipUp = true;
                }
                else {
                    // flip down
                    this._flipUp = false;
                }
            }
        }
        else if (this.innerType === 'vertical') {
            // type vertical
            if (this._stPoint.x < this._bbContainer.width / 2) {
                // left part
                this._left = true;
                if (this._mvPoint.x < this._stPoint.x) {
                    // flip left
                    this._flipLeft = true;
                }
                else {
                    // flip right
                    this._flipLeft = false;
                }
            }
            else {
                // right part
                this._left = false;
                if (this._mvPoint.x < this._stPoint.x) {
                    // flip left
                    this._flipLeft = true;
                }
                else {
                    // flip right
                    this._flipLeft = false;
                }
            }
        }
    };
    class_1.prototype._handleEndEventTarget = function () {
        if (this._flipToggle.classList) {
            if (this.innerType === "horizontal") {
                // type horizontal
                this._handleToggle(this._top, this._flipUp);
            }
            else if (this.innerType === "vertical") {
                // type vertical
                this._handleToggle(this._left, this._flipLeft);
            }
        }
    };
    class_1.prototype._handleToggle = function (block, flip) {
        if (!this.toggle) {
            if (block) {
                this._doToggle = true;
                if (!flip) {
                    this._indexFront = this._indexBack + 1;
                    if (this._indexFront === this._images.length)
                        this._indexFront = 0;
                }
                else {
                    this._indexBack = this._indexFront - 1;
                    if (this._indexBack === -1)
                        this._indexBack = this._images.length - 1;
                }
                this._flipToggle.classList.toggle("toggle");
                this.toggle = !this.toggle;
            }
            else {
                this._doToggle = false;
            }
        }
        else {
            if (!block) {
                this._doToggle = true;
                if (!flip) {
                    this._indexFront = this._indexBack - 1;
                    if (this._indexFront < 0)
                        this._indexFront = this._images.length - 1;
                }
                else {
                    this._indexBack = this._indexFront + 1;
                    if (this._indexBack === this._images.length)
                        this._indexBack = 0;
                }
                this._flipToggle.classList.toggle("toggle");
                this.toggle = !this.toggle;
            }
            else {
                this._doToggle = false;
            }
        }
    };
    class_1.prototype._handleMouseDown = function (ev) {
        ev.preventDefault();
        this._stPoint = { x: ev.pageX, y: ev.pageY };
        this._mouseMove = false;
        this._mouseStart = true;
    };
    class_1.prototype._handleMouseMove = function (ev) {
        ev.preventDefault();
        if (this._mouseStart) {
            this._mouseMove = true;
            this._mvPoint = { x: ev.pageX, y: ev.pageY };
            this._handleMoveEventTarget();
        }
    };
    class_1.prototype._handleMouseEnd = function () {
        if (this._mouseMove) {
            this._handleEndEventTarget();
            this._mouseStart = false;
            this._mouseMove = false;
        }
    };
    class_1.prototype._handleTouchStart = function (ev) {
        ev.preventDefault();
        this._stPoint = { x: ev.touches[0].pageX, y: ev.touches[0].pageY };
        this._mouseStart = true;
    };
    class_1.prototype._handleTouchMove = function (ev) {
        ev.preventDefault();
        this._mvPoint = { x: ev.touches[0].pageX, y: ev.touches[0].pageY };
        this._mouseMove = true;
        this._handleMoveEventTarget();
    };
    class_1.prototype._handleTouchEnd = function () {
        if (this._mouseMove) {
            this._handleEndEventTarget();
            this._mouseStart = false;
            this._mouseMove = false;
        }
    };
    //*************************
    //* Rendering JSX Element *
    //*************************
    class_1.prototype.renderFlipImages = function () {
        if (this._first) {
            this._first = false;
            this._frontImg1.setAttribute('src', this._images[this._indexFront]);
            this._frontImg2.setAttribute('src', this._images[this._indexFront]);
            this._backImg1.setAttribute('src', this._images[this._indexBack]);
            this._backImg2.setAttribute('src', this._images[this._indexBack]);
            if (this._alts[this._indexFront] !== null) {
                this._frontImg1.setAttribute('alt', this._alts[this._indexFront]);
                this._frontImg2.setAttribute('alt', this._alts[this._indexFront]);
            }
            if (this._alts[this._indexBack] !== null) {
                this._backImg1.setAttribute('alt', this._alts[this._indexBack]);
                this._backImg2.setAttribute('alt', this._alts[this._indexBack]);
            }
        }
        else {
            if (this._doToggle) {
                if (!this.toggle) {
                    this._frontImg1.setAttribute('src', this._images[this._indexFront]);
                    this._frontImg2.setAttribute('src', this._images[this._indexFront]);
                    if (this._alts[this._indexFront] !== null) {
                        this._frontImg1.setAttribute('alt', this._alts[this._indexFront]);
                        this._frontImg2.setAttribute('alt', this._alts[this._indexFront]);
                    }
                }
                else {
                    this._backImg1.setAttribute('src', this._images[this._indexBack]);
                    this._backImg2.setAttribute('src', this._images[this._indexBack]);
                    if (this._alts[this._indexBack] !== null) {
                        this._backImg1.setAttribute('alt', this._alts[this._indexBack]);
                        this._backImg2.setAttribute('alt', this._alts[this._indexBack]);
                    }
                }
            }
        }
    };
    class_1.prototype.render = function () {
        if (this._flipElements === null) {
            // initial definition
            if (this.innerType == 'horizontal') {
                this._flipElements = [
                    h("div", { class: "container" }, h("div", { class: "image-dim" }, h("img", { src: this._imagesUrl[0], alt: this._alts[0] })), h("div", { class: 'flip-container horizontal', id: 'flip-toggle', onMouseDown: this._handleMouseDown.bind(this), onMouseMove: this._handleMouseMove.bind(this), onMouseUp: this._handleMouseEnd.bind(this), onTouchStart: this._handleTouchStart.bind(this), onTouchMove: this._handleTouchMove.bind(this), onTouchEnd: this._handleTouchEnd.bind(this) }, h("div", { class: 'back-top', id: 'back-top' }, h("div", { class: 'image-back-top' }, h("img", { id: 'image-back-top' }))), h("div", { class: 'flipper', id: 'flipper' }, h("div", { class: 'front-top', id: 'front-top' }, h("div", { class: 'image-front-top' }, h("img", { id: 'image-front-top' }))), h("div", { class: 'back-bottom', id: 'back-bottom' }, h("div", { class: 'image-back-bottom' }, h("img", { id: 'image-back-bottom' })))), h("div", { class: 'front-bottom', id: 'front-bottom' }, h("div", { class: 'image-front-bottom' }, h("img", { id: 'image-front-bottom' })))))
                ];
            }
            else if (this.innerType == 'vertical') {
                this._flipElements = [
                    h("div", { class: "container" }, h("div", { class: "image-dim" }, h("img", { src: this._imagesUrl[0], alt: this._alts[0] })), h("div", { class: 'flip-container vertical', id: 'flip-toggle', onMouseDown: this._handleMouseDown.bind(this), onMouseMove: this._handleMouseMove.bind(this), onMouseUp: this._handleMouseEnd.bind(this), onTouchStart: this._handleTouchStart.bind(this), onTouchMove: this._handleTouchMove.bind(this), onTouchEnd: this._handleTouchEnd.bind(this) }, h("div", { class: 'back-left', id: 'back-left' }, h("div", { class: 'image-back-left' }, h("img", { id: 'image-back-left' }))), h("div", { class: 'flipper', id: 'flipper' }, h("div", { class: 'front-left', id: 'front-left' }, h("div", { class: 'image-front-left' }, h("img", { id: 'image-front-left' }))), h("div", { class: 'back-right', id: 'back-right' }, h("div", { class: 'image-back-right' }, h("img", { id: 'image-back-right' })))), h("div", { class: 'front-right', id: 'front-right' }, h("div", { class: 'image-front-right' }, h("img", { id: 'image-front-right' })))))
                ];
            }
            else {
                this._flipElements = null;
            }
        }
        else {
            // update
            if (this.defBlocks)
                this.renderFlipImages();
        }
        return (h(Host, null, h("slot", null, this._flipElements)));
    };
    Object.defineProperty(class_1.prototype, "el", {
        get: function () { return getElement(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(class_1, "watchers", {
        get: function () {
            return {
                "type": ["parseTypeProp"],
                "fpadding": ["parseFpaddingProp"]
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(class_1, "style", {
        get: function () { return ":host{--flipimages-border-width:10px;--flipimages-border-color:#fff;--flipimages-shadow-width:20px;--flipimages-shadow-color:grey;--image-height:720px;--image-width:1280px;--container-padding:0px}.imghidden{display:none;visibility:hidden}.container{position:absolute;bottom:0;right:0;overflow:hidden;-ms-flex-pack:center;justify-content:center;padding:var(--container-padding)}.container,.image-dim{top:0;left:0;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.image-dim{position:relative;visibility:hidden;width:100%;height:100%;z-index:10}.image-dim img{max-width:100%;max-height:100%;visibility:hidden;overflow:hidden}.flip-container{width:var(--image-width);height:var(--image-height);margin:0;-webkit-perspective:calc(2 * var(--image-width));perspective:calc(2 * var(--image-width));-webkit-box-shadow:0 0 var(--flipimages-shadow-width) 2px var(--flipimages-shadow-color);box-shadow:0 0 var(--flipimages-shadow-width) 2px var(--flipimages-shadow-color);border-color:var(--flipimages-border-color);border-style:solid;border-width:var(--flipimages-border-width);border-radius:var(--flipimages-border-width);visibility:hidden}.flipvisible{visibility:visible}.toggle.horizontal.flip-container .flipper{transform:rotateX(-180deg);-moz-transform:rotateX(-180deg);-webkit-transform:rotateX(-180deg)}.toggle.horizontal.flip-container .back-top{opacity:1}.toggle.horizontal.flip-container .front-bottom{opacity:0}.toggle.vertical.flip-container .flipper{transform:rotateY(-180deg);-moz-transform:rotateY(-180deg);-webkit-transform:rotateY(-180deg)}.toggle.vertical.flip-container .back-left{opacity:1}.toggle.vertical.flip-container .front-right{opacity:0}.flipper{position:absolute;width:100%;height:100%;top:0;left:0;transition:.5s;-webkit-transition:.5s;-moz-transition:.5s;transition-timing-function:linear;-webkit-transition-timing-function:linear;-moz-transition-timing-function:linear;-webkit-transform-style:preserve-3d;transform-style:preserve-3d}.back-bottom,.back-top,.front-bottom,.front-top{max-height:calc(1 * var(--image-height) / 2 + 2px);max-width:var(--image-width);overflow:hidden;margin:0}.back-bottom img,.back-top img,.front-bottom img,.front-top img{display:block;width:var(--image-width)}.front-top{top:0;z-index:10}.front-bottom,.front-top{position:absolute;left:0;backface-visibility:hidden;-webkit-backface-visibility:hidden}.front-bottom{bottom:0;z-index:1;opacity:1;transition:opacity .5s;-webkit-transition:opacity .5s;-moz-transition:opacity .5s;transition-timing-function:ease-in;-webkit-transition-timing-function:ease-in;-moz-transition-timing-function:ease-in}.front-top img{margin-bottom:calc(-1 * var(--image-height) / 2 + 2px)}.front-bottom img{margin-top:calc(-1 * var(--image-height) / 2)}.back-top{opacity:0;transition:opacity .5s;-webkit-transition:opacity .5s;-moz-transition:opacity .5s;transition-timing-function:ease-in;-webkit-transition-timing-function:ease-in;-moz-transition-timing-function:ease-in;z-index:-2}.back-bottom,.back-top{position:absolute;top:0;left:0;backface-visibility:hidden;-webkit-backface-visibility:hidden}.back-bottom{z-index:5}.back-top img{margin-bottom:calc(-1 * var(--image-height) / 2 + 2px)}.back-bottom img{margin-top:calc(-1 * var(--image-height) / 2)}.front-top{transform:rotateX(0deg);-moz-transform:rotateX(0deg);-webkit-transform:rotateX(0deg)}.back-bottom{transform:rotateX(180deg);-moz-transform:rotateX(180deg);-webkit-transform:rotateX(180deg)}.back-left,.back-right,.front-left,.front-right{max-height:var(--image-height);max-width:calc(1 * var(--image-width) / 2 + 2px);overflow:hidden;margin:0}.back-left img,.back-right img,.front-left img,.front-right img{display:block;width:var(--image-width)}.front-left{left:0;z-index:10}.front-left,.front-right{position:absolute;top:0;backface-visibility:hidden;-webkit-backface-visibility:hidden}.front-right{left:50%;z-index:1;opacity:1;transition:opacity .5s;-webkit-transition:opacity .5s;-moz-transition:opacity .5s;transition-timing-function:ease-in;-webkit-transition-timing-function:ease-in;-moz-transition-timing-function:ease-in}.front-left img{margin-right:calc(-1 * var(--image-width) / 2 + 2px)}.front-right img{margin-left:calc(-1 * var(--image-width) / 2)}.back-left{opacity:0;transition:opacity .5s;-webkit-transition:opacity .5s;-moz-transition:opacity .5s;transition-timing-function:ease-in;-webkit-transition-timing-function:ease-in;-moz-transition-timing-function:ease-in;z-index:-2}.back-left,.back-right{position:absolute;top:0;left:0;backface-visibility:hidden;-webkit-backface-visibility:hidden}.back-right{z-index:5}.back-left img{margin-right:calc(-1 * var(--image-width) / 2 + 2px)}.back-right img{margin-left:calc(-1 * var(--image-width) / 2)}.front-left{transform:rotateY(0deg);-moz-transform:rotateY(0deg);-webkit-transform:rotateY(0deg)}.back-right{transform:rotateY(180deg);-moz-transform:rotateY(180deg);-webkit-transform:rotateY(180deg)}"; },
        enumerable: true,
        configurable: true
    });
    return class_1;
}());
export { JeepFlipimages as jeep_flipimages };
