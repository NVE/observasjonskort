var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function debounce(context, func, wait, immediate) {
    var timeout;
    return function () {
        var args = arguments;
        var later = function () {
            timeout = null;
            if (!immediate)
                func.apply(context, args);
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow)
            func.apply(context, args);
    };
}
var getValueFromCss = function (data, type) {
    return new Promise(function (resolve) {
        if (data.indexOf('calc') === 0) {
            var formula = data.substring(data.indexOf('(') + 1, data.length - 1).replace(/  +/g, ' ');
            var arr_1 = formula.split(' ');
            var retArr_1 = [];
            var retValue = void 0;
            var _loop_1 = function (i) {
                if (arr_1[i] !== '+' && arr_1[i] !== '-' && arr_1[i] !== '*' && arr_1[i] !== '/') {
                    getValueFromCss(arr_1[i], type).then(function (value) {
                        retArr_1[i] = value.toString();
                        if (i === arr_1.length - 1) {
                            resolve(evaluateString(retArr_1.join().replace(/,/g, ' ')));
                        }
                    });
                }
                else if (arr_1[i] !== "") {
                    retValue = arr_1[i];
                    retArr_1[i] = retValue;
                }
            };
            for (var i = 0; i < arr_1.length; i++) {
                _loop_1(i);
            }
        }
        else if (data.slice(-2) === "px") {
            resolve(Number(data.slice(0, -2)));
        }
        else if (data.slice(-1) === "%") {
            if (type === 'x') {
                resolve(Number(data.slice(0, -1)) * window.innerWidth / 100);
            }
            else if (type === 'y') {
                resolve(Number(data.slice(0, -1)) * window.innerHeight / 100);
            }
            else {
                resolve(null);
            }
        }
        else if (data.slice(-2) === 'vw') {
            resolve(Number(data.slice(0, -2)) * window.innerWidth / 100);
        }
        else if (data.slice(-2) === 'vh') {
            resolve(Number(data.slice(0, -2)) * window.innerHeight / 100);
        }
        else if (data.slice(-4) === 'vmin') {
            var v = Math.min(window.innerWidth, window.innerHeight);
            resolve(Number(data.slice(0, -4)) * v / 100);
        }
        else if (data.slice(-4) === 'vmax') {
            var v = Math.max(window.innerWidth, window.innerHeight);
            resolve(Number(data.slice(0, -4)) * v / 100);
        }
        else {
            resolve(null);
        }
    });
};
var cssVar = function (elem, name, value) {
    if (name[0] != '-')
        name = '--' + name; //allow passing with or without --
    if (value)
        elem.style.setProperty(name, value);
    // below required to work with Unit Tests
    var propVal = elem.style.getPropertyValue(name);
    propVal = propVal ? propVal : window.getComputedStyle(elem).getPropertyValue(name);
    return propVal.trim();
};
var getDim = function (css, wind, pad) {
    var w;
    var vpad = 0;
    if (pad !== "0") {
        if (pad.length > 2 && pad.slice(-2) === "px") {
            vpad = parseFloat(pad.split('px', 2)[0]);
        }
    }
    if (css && css !== "0") {
        if (css.length > 1 && css.slice(-1) === "%") {
            w = parseFloat(css.split('%', 2)[0]);
            if (w > 100)
                w = 100;
            var ret = Math.round(((w * wind / 100) - vpad));
            return ret;
        }
        else if (css.length > 2 && css.slice(-2) === "px") {
            w = parseFloat(css.split('px', 2)[0]);
            if (w > (wind - vpad)) {
                return wind - vpad;
            }
            else {
                return w - vpad;
            }
        }
        else {
            return wind - vpad;
        }
    }
    else {
        return wind - vpad;
    }
};
var convertCSSNumber = function (css) {
    if (css.length > 2 && css.slice(-2) === "px") {
        return parseFloat(css.split('px', 2)[0]);
    }
    else {
        return 0;
    }
};
var convertCSSBoolean = function (css) {
    if (css.length > 2 && css.slice(-2) === "ue") {
        return true;
    }
    else {
        return false;
    }
};
var getCssPropertyFromString = function (cstyle, type) { return __awaiter(void 0, void 0, void 0, function () {
    var prop, stype, styles, i;
    return __generator(this, function (_a) {
        prop = null;
        stype = type ? "--" + type + "-" : "--";
        styles = cstyle.replace(/:host{/g, '').replace(/}/g, '').replace(/[\n\r]+/g, '').replace(/:/g, ';').split(';').slice(0, -1);
        if (styles.length % 2 === 0) {
            prop = {};
            for (i = 0; i < styles.length; i += 2) {
                prop[styles[i].replace(stype, '').replace(/(\-\w)/g, function (m) { return m[1].toUpperCase(); }).trim()] = styles[i + 1].trim();
            }
        }
        return [2 /*return*/, prop];
    });
}); };
var evaluateString = function (s) {
    var arr = s.split(' ');
    for (var i = 0; i < arr.length; i += 2) {
        if (i >= arr.length - 1) {
            return arr[i] !== null ? Number(arr[i]) : null;
        }
        var val = arr[i] !== null ? calculate(Number(arr[i]), Number(arr[i + 2]), arr[i + 1]) : null;
        arr[i + 2] = val !== null ? val.toString() : null;
    }
};
var calculate = function (a, b, op) {
    if (op === "+") {
        return a + b;
    }
    else if (op === "-") {
        return a - b;
    }
    else if (op === "*") {
        return a * b;
    }
    else if (op === "/") {
        return a / b;
    }
    else {
        return null;
    }
};
var getBoundingClientRect = function (el, delay) {
    return new Promise(function (resolve) {
        var i_delay = delay ? delay : 300;
        var i_el = el ? el : null;
        if (i_el !== null) {
            setTimeout(function () {
                var rectBB = i_el.getBoundingClientRect();
                resolve(rectBB);
            }, i_delay);
        }
        else {
            resolve(null);
        }
    });
};
export { getCssPropertyFromString as a, getDim as b, convertCSSNumber as c, debounce as d, convertCSSBoolean as e, getValueFromCss as f, getBoundingClientRect as g, cssVar as h };
