// Color utility functions
var initSelectedColor = function (currentColor, currentOpacity) {
    var color = {};
    color.hex = hextoHEX(currentColor, currentOpacity);
    color.rgb = hextoRGB(currentColor, currentOpacity);
    color.hsb = hextoHSB(currentColor, currentOpacity);
    color.hsl = hextoHSL(currentColor, currentOpacity);
    color.opacity = Number(parseFloat(currentOpacity).toFixed(3));
    return color;
};
var hextoHEX = function (hex, opacity) {
    var opa = parseFloat(opacity) <= 1 ? parseFloat(opacity) : 1;
    var ret = {};
    ret.hex = hex;
    var n = Math.round(opa * 255);
    var b = n.toString(16);
    b = b.length === 1 ? "0" + b : b;
    ret.hexa = hex + b;
    return ret;
};
var hextoRGB = function (hex, opacity) {
    var opa = parseFloat(opacity) <= 1 ? parseFloat(opacity) : 1;
    var hex1 = hex.replace(/#/, "");
    var ret = {};
    var bigint = parseInt(hex1, 16);
    ret.r = (bigint >> 16) & 255;
    ret.g = (bigint >> 8) & 255;
    ret.b = bigint & 255;
    ret.rgb = "RGB(" + ret.r + "," + ret.g + "," + ret.b + ")";
    ret.rgba = "RGBA(" + ret.r + "," + ret.g + "," + ret.b + "," + opa.toFixed(3) + ")";
    return ret;
};
var hextoHSB = function (hex, opacity) {
    var opa = parseFloat(opacity) <= 1 ? parseFloat(opacity) : 1;
    var ret = {};
    var rgb = hextoRGB(hex, opa.toString());
    var min = Math.min(rgb.r, rgb.g, rgb.b);
    var max = Math.max(rgb.r, rgb.g, rgb.b);
    var d = max - min;
    var s = max == 0 ? 0 : d / max;
    var b = max / 255;
    var h;
    switch (max) {
        case min:
            h = 0;
            break;
        case rgb.r:
            h = (rgb.g - rgb.b) + d * (rgb.g < rgb.b ? 6 : 0);
            h /= 6 * d;
            break;
        case rgb.g:
            h = (rgb.b - rgb.r) + d * 2;
            h /= 6 * d;
            break;
        case rgb.b:
            h = (rgb.r - rgb.g) + d * 4;
            h /= 6 * d;
            break;
    }
    ret.h = parseFloat((h * 360).toFixed(3));
    ret.s = parseFloat((s * 100).toFixed(3));
    ret.b = parseFloat((b * 100).toFixed(3));
    ret.hsb = "HSB(" + ret.h.toFixed(0) + "," + ret.s.toFixed(0) + "%," + ret.b.toFixed(0) + "%)";
    ret.hsba = "HSBA(" + ret.h.toFixed(0) + "," + ret.s.toFixed(0) + "%," + ret.b.toFixed(0) + "%," + opa.toFixed(3) + ")";
    return ret;
};
var hextoHSL = function (hex, opacity) {
    var opa = parseFloat(opacity) <= 1 ? parseFloat(opacity) : 1;
    var rgb = hextoRGB(hex, opa.toString());
    var ret = RGBtoHSL(rgb);
    return ret;
};
var RGBtoHSL = function (rgb) {
    var opa = opacityfromRGB(rgb);
    var ret = {};
    var r = rgb.r / 255;
    var g = rgb.g / 255;
    var b = rgb.b / 255;
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var h = (max + min) / 2;
    var s = h;
    var l = h;
    if (max == min) {
        h = s = 0; //achromatic
    }
    else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    ret.h = parseFloat((h * 360).toFixed(3));
    ret.s = parseFloat((s * 100).toFixed(3));
    ret.l = parseFloat((l * 100).toFixed(3));
    ret.hsl = "HSL(" + ret.h.toFixed(0) + "," + ret.s.toFixed(0) + "%," + ret.l.toFixed(0) + "%)";
    ret.hsla = "HSLA(" + ret.h.toFixed(0) + "," + ret.s.toFixed(0) + "%," + ret.l.toFixed(0) + "%," + opa.toFixed(3) + ")";
    return ret;
};
var HSBtoRGB = function (hsb) {
    var ret = {};
    var opa = opacityfromHSB(hsb);
    var h = hsb.h / 360;
    var i = Math.floor(h * 6);
    var values = (function () {
        var _a = [hsb.s, hsb.b].map(function (val) { return Number(val) / 100; }), s = _a[0], b = _a[1];
        var f = h * 6 - i;
        var p = b * (1 - s);
        var q = b * (1 - f * s);
        var t = b * (1 - (1 - f) * s);
        return {
            0: [b, t, p],
            1: [q, b, p],
            2: [p, b, t],
            3: [p, q, b],
            4: [t, p, b],
            5: [b, p, q]
        };
    })();
    var _a = values[i % 6].map(function (val) { return Math.round(val * 255); }), r = _a[0], g = _a[1], b = _a[2];
    ret.r = r;
    ret.g = g;
    ret.b = b;
    ret.rgb = "RGB(" + ret.r + "," + ret.g + "," + ret.b + ")";
    ret.rgba = "RGBA(" + ret.r + "," + ret.g + "," + ret.b + "," + opa.toFixed(3) + ")";
    return ret;
};
var RGBtoHEX = function (rgb) {
    var val = rgb.rgba.split('(')[1].slice(0, -1).split(',');
    var hex = "#";
    val.forEach(function (item, index) {
        if (index === 3) {
            var a = (Math.round(parseFloat(item) * 255)).toString(16);
            if (a.length < 2)
                a = "0" + a;
            hex += a;
        }
        else {
            var a = (parseFloat(item)).toString(16);
            if (a.length < 2)
                a = "0" + a;
            hex += a;
        }
    });
    var ret = {};
    ret.hex = hex.slice(0, -2);
    ret.hexa = hex;
    return ret;
};
var HSBtoHEX = function (hsb) {
    var rgb = HSBtoRGB(hsb);
    return RGBtoHEX(rgb);
};
var HSLtoHEX = function (hsl) {
    var rgb = HSLtoRGB(hsl);
    return RGBtoHEX(rgb);
};
var HSLtoRGB = function (hsl) {
    var ret = {};
    var opa = opacityfromHSL(hsl);
    var h = hsl.h / 360;
    var s = hsl.s / 100;
    var l = hsl.l / 100;
    if (s === 0) {
        ret.r = ret.g = ret.b = l; // achromatic
    }
    else {
        var hue2rgb = function (p, q, t) {
            if (t < 0)
                t += 1;
            if (t > 1)
                t -= 1;
            if (t < 1 / 6)
                return p + (q - p) * 6 * t;
            if (t < 1 / 2)
                return q;
            if (t < 2 / 3)
                return p + (q - p) * (2 / 3 - t) * 6;
            return p;
        };
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        ret.r = Math.round(hue2rgb(p, q, h + 1 / 3) * 255);
        ret.g = Math.round(hue2rgb(p, q, h) * 255);
        ret.b = Math.round(hue2rgb(p, q, h - 1 / 3) * 255);
    }
    ret.rgb = "RGB(" + ret.r + "," + ret.g + "," + ret.b + ")";
    ret.rgba = "RGBA(" + ret.r + "," + ret.g + "," + ret.b + "," + opa.toFixed(3) + ")";
    return ret;
};
var HcolortoHEX = function (hsb) {
    // clone hsb
    var ret = Object.assign({}, hsb);
    var opa = opacityfromHSB(ret);
    ret.s = 100;
    ret.b = 100;
    ret.hsb = "HSB(" + ret.h.toFixed(0) + "," + ret.s.toFixed(0) + "%," + ret.b.toFixed(0) + "%)";
    ret.hsba = "HSBA(" + ret.h.toFixed(0) + "," + ret.s.toFixed(0) + "%," + ret.b.toFixed(0) + "%," + opa.toFixed(3) + ")";
    return HSBtoHEX(ret);
};
var opacityfromRGB = function (rgb) {
    return parseFloat(rgb.rgba.split(',')[3].slice(0, -1));
};
var opacityfromHEX = function (hex) {
    return parseInt(hex.hexa.slice(hex.hexa.length - 2, hex.hexa.length), 16) / 255;
};
var opacityfromHSB = function (hsb) {
    return parseFloat(hsb.hsba.split(',')[3].slice(0, -1));
};
var opacityfromHSL = function (hsl) {
    return parseFloat(hsl.hsla.split(',')[3].slice(0, -1));
};
var fillColor = function (value) {
    var color = {};
    color.hex = {};
    color.rgb = {};
    color.hsb = {};
    color.hsl = {};
    if (value['hex']) {
        color.hex.hex = value['hex'];
        color.hex.hexa = value['hexa'];
        color.opacity = opacityfromHEX(color.hex);
        color.rgb = hextoRGB(color.hex.hex, color.opacity.toString());
        color.hsb = hextoHSB(color.hex.hex, color.opacity.toString());
        color.hsl = hextoHSL(color.hex.hex, color.opacity.toString());
    }
    if (value['rgb']) {
        color.rgb.r = value['r'];
        color.rgb.g = value['g'];
        color.rgb.b = value['b'];
        color.rgb.rgb = value['rgb'];
        color.rgb.rgba = value['rgba'];
        color.opacity = opacityfromRGB(color.rgb);
        color.hex = RGBtoHEX(color.rgb);
        color.hsb = hextoHSB(color.hex.hex, color.opacity.toString());
        color.hsl = RGBtoHSL(color.rgb);
    }
    if (value['hsb']) {
        color.hsb.h = value['h'];
        color.hsb.s = value['s'];
        color.hsb.b = value['b'];
        color.hsb.hsb = value['hsb'];
        color.hsb.hsba = value['hsba'];
        color.opacity = opacityfromHSB(color.hsb);
        color.hex = HSBtoHEX(color.hsb);
        color.rgb = HSBtoRGB(color.hsb);
        color.hsl = RGBtoHSL(color.rgb);
    }
    if (value['hsl']) {
        color.hsl.h = value['h'];
        color.hsl.s = value['s'];
        color.hsl.l = value['l'];
        color.hsl.hsl = value['hsl'];
        color.hsl.hsla = value['hsla'];
        color.opacity = opacityfromHSL(color.hsl);
        color.hex = HSLtoHEX(color.hsl);
        color.rgb = HSLtoRGB(color.hsl);
        color.hsb = hextoHSB(color.hex.hex, color.opacity.toString());
    }
    return color;
};
var randomHexColor = function (start, end) {
    var hsb = {};
    var opa = 1.0;
    hsb.h = randomHue(start, end);
    hsb.s = randomSB();
    hsb.b = randomSB();
    hsb.hsb = "HSB(" + hsb.h.toFixed(0) + "," + hsb.s.toFixed(0) + "%," + hsb.b.toFixed(0) + "%)";
    hsb.hsba = "HSBA(" + hsb.h.toFixed(0) + "," + hsb.s.toFixed(0) + "%," + hsb.b.toFixed(0) + "%," + opa.toFixed(3) + ")";
    var rgb = HSBtoRGB(hsb);
    var hex = RGBtoHEX(rgb);
    return hex.hex;
};
var randomHue = function (start, end) {
    return Math.floor(Math.random() * (end - start + 1)) + start;
};
var randomSB = function () {
    var start = 50;
    var end = 100;
    return Math.floor(Math.random() * (end - start + 1)) + start;
};
export { HcolortoHEX as H, fillColor as f, hextoHSB as h, initSelectedColor as i, opacityfromHSB as o, randomHexColor as r };
