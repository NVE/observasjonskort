import { h, Host } from "@stencil/core";
import { getIcons } from '../../../utils/navigation';
export class JeepNavigation {
    constructor() {
        this.visibility = 'visible';
        this._prevDisabled = true;
        this._nextDisabled = false;
    }
    //*****************************
    //* Watch on Property Changes *
    //*****************************
    parseNameProp(newValue) {
        if (newValue)
            this.innerName = newValue;
    }
    //*******************************
    //* Listen to Event Definitions *
    //*******************************
    //**********************
    //* Method Definitions *
    //**********************
    /**
     * Init data from properties.
     */
    init() {
        return Promise.resolve(this._init());
    }
    /**
     * Set the navigation component.
     */
    setNavigation() {
        return Promise.resolve(this._setNavigation());
    }
    /**
     * Set the Navigation Visibility (visible/hidden)
     */
    setJeepNavigationVisibility(state) {
        if (state && state.visibility) {
            this.visibility = state.visibility;
            if (this.visibility === "visible") {
                this._navContainerEl.classList.remove('hidden');
            }
            else {
                this._navContainerEl.classList.add('hidden');
            }
        }
        return;
    }
    /**
     * Set the Navigation previous button to enable/disable
     */
    setJeepNavigationPrevDisabled(state) {
        this._prevDisabled = state.disabled;
        this._setPrevDisabled();
        return;
    }
    /**
     * Set the Navigation next button to enable/disable
     */
    setJeepNavigationNextDisabled(state) {
        this._nextDisabled = state.disabled;
        this._setNextDisabled();
        return;
    }
    /**
     * Get icon name
     */
    async getJeepNavigationIconFamily() {
        return this._icons !== null ? this.innerName : null;
    }
    async componentWillLoad() {
        await this.init();
    }
    async componentDidLoad() {
        await this.setNavigation();
    }
    async componentDidUpdate() {
        if (this.visibility === "visible") {
            await this.setNavigation();
            this._setPrevDisabled();
            this._setNextDisabled();
        }
        else {
            this._navPrevEl = null;
            this._navNextEl = null;
        }
    }
    async _init() {
        this._element = this.el.shadowRoot;
        this.parseNameProp(this.name ? this.name : "arrow-circle");
        return;
    }
    async _setNavigation() {
        this._navContainerEl = this._element.querySelector(".navigation-container");
        this._navPrevEl = this._navContainerEl.querySelector('.navigation-prev');
        this._navNextEl = this._navContainerEl.querySelector('.navigation-next');
        this._navPrevEl.innerHTML = this._prevButton;
        this._navNextEl.innerHTML = this._nextButton;
        const svgEls = Array.from(this._navContainerEl.querySelectorAll('svg'));
        for (let i = 0; i < svgEls.length; i++) {
            svgEls[i].classList.add('icon');
        }
        this._navPrevEl.addEventListener('click', () => {
            if (!this._navPrevEl.classList.contains('disabled'))
                this.onNavigationPrev.emit();
        }, false);
        this._navNextEl.addEventListener('click', () => {
            if (!this._navNextEl.classList.contains('disabled'))
                this.onNavigationNext.emit();
        }, false);
        return;
    }
    _setPrevDisabled() {
        if (this._navPrevEl) {
            if (this._prevDisabled) {
                if (!this._navPrevEl.classList.contains('disabled'))
                    this._navPrevEl.classList.add('disabled');
            }
            else {
                if (this._navPrevEl.classList.contains('disabled'))
                    this._navPrevEl.classList.remove('disabled');
            }
        }
    }
    _setNextDisabled() {
        if (this._navNextEl) {
            if (this._nextDisabled) {
                if (!this._navNextEl.classList.contains('disabled'))
                    this._navNextEl.classList.add('disabled');
            }
            else {
                if (this._navNextEl.classList.contains('disabled'))
                    this._navNextEl.classList.remove('disabled');
            }
        }
    }
    render() {
        this._icons = getIcons(this.innerName);
        this._prevButton = this._icons !== null ? this._icons.back : null;
        this._nextButton = this._icons !== null ? this._icons.forward : null;
        return (h(Host, null,
            h("div", { class: "navigation-container" }, this.visibility === "visible"
                ?
                    h("div", { class: "navigation-wrapper" },
                        h("button", { class: 'navigation-prev icon disabled' }),
                        h("button", { class: 'navigation-next icon disabled' }))
                : null)));
    }
    static get is() { return "jeep-navigation"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["jeep-navigation.css"]
    }; }
    static get styleUrls() { return {
        "$": ["jeep-navigation.css"]
    }; }
    static get properties() { return {
        "name": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The navigation icon name\nmust be \"arrow-circle\" or \"arrow-round\""
            },
            "attribute": "name",
            "reflect": false
        }
    }; }
    static get states() { return {
        "innerName": {},
        "visibility": {}
    }; }
    static get events() { return [{
            "method": "onNavigationPrev",
            "name": "jeepNavigationPrev",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the previous button was clicked"
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "onNavigationNext",
            "name": "jeepNavigationNext",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the next button was clicked"
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "init": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Init data from properties.",
                "tags": []
            }
        },
        "setNavigation": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Set the navigation component.",
                "tags": []
            }
        },
        "setJeepNavigationVisibility": {
            "complexType": {
                "signature": "(state: any) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Set the Navigation Visibility (visible/hidden)",
                "tags": []
            }
        },
        "setJeepNavigationPrevDisabled": {
            "complexType": {
                "signature": "(state: any) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Set the Navigation previous button to enable/disable",
                "tags": []
            }
        },
        "setJeepNavigationNextDisabled": {
            "complexType": {
                "signature": "(state: any) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Set the Navigation next button to enable/disable",
                "tags": []
            }
        },
        "getJeepNavigationIconFamily": {
            "complexType": {
                "signature": "() => Promise<string>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<string>"
            },
            "docs": {
                "text": "Get icon name",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "name",
            "methodName": "parseNameProp"
        }]; }
}
