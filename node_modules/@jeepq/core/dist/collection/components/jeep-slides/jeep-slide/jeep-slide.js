import { h, Host } from "@stencil/core";
import { getCssPropertyFromString } from '../../../utils/common';
export class JeepSlide {
    //*****************************
    //* Watch on Property Changes *
    //*****************************/
    parseTitleProp(newValue) {
        if (newValue)
            this.innerTitle = newValue;
    }
    parseSubTitleProp(newValue) {
        if (newValue)
            this.innerSubTitle = newValue;
    }
    async parseStyleProp(newValue) {
        if (newValue) {
            this._lcssvar = await getCssPropertyFromString(newValue, 'slide');
            this._setLocalCssVariables();
            this.innerStyle = newValue;
        }
    }
    //*******************************
    //* Listen to Event Definitions *
    //*******************************
    //**********************
    //* Method Definitions *
    //**********************
    /**
     * Init data from properties.
     */
    init() {
        return Promise.resolve(this._init());
    }
    /**
     * Set the slide component.
     */
    setSlide() {
        return Promise.resolve(this._setSlide());
    }
    async componentWillLoad() {
        await this.init();
    }
    async componentDidLoad() {
        await this.setSlide();
    }
    async _init() {
        this._element = this.el.shadowRoot;
        this.parseTitleProp(this.stitle ? this.stitle : null);
        this.parseSubTitleProp(this.subtitle ? this.subtitle : null);
        await this.parseStyleProp(this.cstyle ? this.cstyle : null);
        return;
    }
    _setLocalCssVariables() {
        if (this._lcssvar.alignItems)
            this.el.style.setProperty('--slide-align-items', this._lcssvar.alignItems);
        if (this._lcssvar.background)
            this.el.style.setProperty('--slide-background', this._lcssvar.background);
        if (this._lcssvar.color)
            this.el.style.setProperty('--slide-color', this._lcssvar.color);
        if (this._lcssvar.contentFontSize)
            this.el.style.setProperty('--slide-content-font-size', this._lcssvar.contentFontSize);
        if (this._lcssvar.contentPadding)
            this.el.style.setProperty('--slide-content-padding', this._lcssvar.contentPadding);
        if (this._lcssvar.contentTextAlign)
            this.el.style.setProperty('--slide-content-text-align', this._lcssvar.contentTextAlign);
        if (this._lcssvar.contentTop)
            this.el.style.setProperty('--slide-content-top', this._lcssvar.contentTop);
        if (this._lcssvar.display)
            this.el.style.setProperty('--slide-display', this._lcssvar.display);
        if (this._lcssvar.flexDirection)
            this.el.style.setProperty('--slide-flex-direction', this._lcssvar.flexDirection);
        if (this._lcssvar.fontSize)
            this.el.style.setProperty('--slide-font-size', this._lcssvar.fontSize);
        if (this._lcssvar.headerTop)
            this.el.style.setProperty('--slide-header-top', this._lcssvar.headerTop);
        if (this._lcssvar.height)
            this.el.style.setProperty('--slide-height', this._lcssvar.height);
        if (this._lcssvar.justifyContent)
            this.el.style.setProperty('--slide-justify-content', this._lcssvar.justifyContent);
        if (this._lcssvar.minWidth)
            this.el.style.setProperty('--slide-min-width', this._lcssvar.minWidth);
        if (this._lcssvar.scrollSnapAlign)
            this.el.style.setProperty('--slide-scroll-snap-align', this._lcssvar.scrollSnapAlign);
        if (this._lcssvar.subtitleFontSize)
            this.el.style.setProperty('--slide-subtitle-font-size', this._lcssvar.subtitleFontSize);
        if (this._lcssvar.textAlign)
            this.el.style.setProperty('--slide-text-align', this._lcssvar.textAlign);
        if (this._lcssvar.titleFontSize)
            this.el.style.setProperty('--slide-title-font-size', this._lcssvar.titleFontSize);
    }
    async _setSlide() {
        this.onSlideDidLoad.emit();
        return;
    }
    render() {
        return (h(Host, null,
            h("div", { class: "slide-container" },
                h("div", { class: "slide-wrapper" },
                    h("div", { class: "slide-header" },
                        this.innerTitle != null
                            ? h("div", { class: "slide-title" }, this.innerTitle)
                            : null,
                        this.innerSubTitle != null
                            ? h("div", { class: "slide-subtitle" }, this.innerSubTitle)
                            : null),
                    h("div", { class: "slide-content" },
                        h("slot", null))))));
    }
    static get is() { return "jeep-slide"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["jeep-slide.css"]
    }; }
    static get styleUrls() { return {
        "$": ["jeep-slide.css"]
    }; }
    static get properties() { return {
        "stitle": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The slide title"
            },
            "attribute": "stitle",
            "reflect": false
        },
        "subtitle": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The slide subtitle"
            },
            "attribute": "subtitle",
            "reflect": false
        },
        "cstyle": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The slide subtitle"
            },
            "attribute": "cstyle",
            "reflect": false
        }
    }; }
    static get states() { return {
        "innerTitle": {},
        "innerSubTitle": {},
        "innerStyle": {}
    }; }
    static get events() { return [{
            "method": "onSlideDidLoad",
            "name": "jeepSlideDidLoad",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when a pagination bullet was clicked"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "init": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Init data from properties.",
                "tags": []
            }
        },
        "setSlide": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Set the slide component.",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "stitle",
            "methodName": "parseTitleProp"
        }, {
            "propName": "subtitle",
            "methodName": "parseSubTitleProp"
        }, {
            "propName": "cstyle",
            "methodName": "parseStyleProp"
        }]; }
}
/*
            <style id="slide-cstyle">{ this.innerStyle != null ? this.innerStyle : null}</style>,

*/ 
