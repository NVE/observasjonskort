import { h, Host } from "@stencil/core";
export class JeepFullscreen {
    constructor() {
        //************************
        //* Property Definitions *
        //************************
        //*****************************
        //* Watch on Property Changes *
        //*****************************
        //************************
        //* State Definitions *
        //************************
        this.visibility = 'visible';
        this.fullscreen = false;
        this._fullscreenIcons = {
            request: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M396.795 396.8H320V448h128V320h-51.205zM396.8 115.205V192H448V64H320v51.205zM115.205 115.2H192V64H64v128h51.205zM115.2 396.795V320H64v128h128v-51.205z"/></svg>',
            exit: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M64 371.2h76.795V448H192V320H64v51.2zm76.795-230.4H64V192h128V64h-51.205v76.8zM320 448h51.2v-76.8H448V320H320v128zm51.2-307.2V64H320v128h128v-51.2h-76.8z"/></svg>'
        };
        this._fullscreenChange = false;
    }
    //*******************************
    //* Listen to Event Definitions *
    //*******************************
    handleFullScreenChange() {
        if (this.fullscreen && this._fullscreenChange) {
            this.fullscreen = false;
            this.onFullscreenChange.emit();
        }
        this._fullscreenChange = !this._fullscreenChange;
    }
    //**********************
    //* Method Definitions *
    //**********************
    /**
     * Init data from properties.
     */
    init() {
        return Promise.resolve(this._init());
    }
    /**
     * Set the Fullscreen component.
     */
    setFullscreen() {
        return Promise.resolve(this._setFullscreen());
    }
    /**
     * Set the Fullscreen Visibility (visible/hidden)
     */
    async setJeepFullscreenVisibility(state) {
        if (state && state.visibility) {
            if (state.visibility === 'hidden') {
                if (!this._screenContainerEl.classList.contains('hidden'))
                    this._screenContainerEl.classList.add('hidden');
            }
            else {
                if (this._screenContainerEl.classList.contains('hidden'))
                    this._screenContainerEl.classList.remove('hidden');
            }
            this.visibility = state.visibility;
        }
        return;
    }
    /**
     * Request Fullscreen
     */
    async fullscreenRequest(elem) {
        if (elem.requestFullscreen) {
            elem.requestFullscreen();
        }
        else if (elem.webkitRequestFullscreen) {
            elem.webkitRequestFullscreen();
        }
        else if (elem.mozRequestFullScreen) {
            elem.mozRequestFullScreen();
        }
        else if (elem.msRequestFullscreen) {
            elem.msRequestFullscreen();
        }
        else {
            this.fullscreen = false;
            console.log('Fullscreen API is not supported.');
        }
        return;
    }
    /**
     * Exit Fullscreen
     */
    async fullscreenExit() {
        let doc = document;
        if (doc && doc.exitFullscreen) {
            doc.exitFullscreen();
        }
        else if (doc && doc.webkitExitFullscreen) {
            doc.webkitExitFullscreen();
        }
        else if (doc && doc.mozExitFullscreen) {
            doc.mozExitFullscreen();
        }
        else if (doc && doc.msExitFullscreen) {
            doc.msExitFullscreen();
        }
        else {
            console.log('Fullscreen API is not supported.');
        }
        return;
    }
    /**
     * Is Fullscreen
     */
    async isFullscreen() {
        return this.fullscreen;
    }
    async componentWillLoad() {
        await this.init();
    }
    async componentDidLoad() {
        await this.setFullscreen();
    }
    async _init() {
        this._element = this.el.shadowRoot;
        return;
    }
    async _setFullscreen() {
        this._screenContainerEl = this._element.querySelector(".fullscreen-container");
        this._fullscreenEl = this._screenContainerEl.querySelector('.fullscreen-button');
        if (this._fullscreenEl) {
            this._fullscreenEl.innerHTML = this._fullscreenIcons.request;
            this._fullscreenEl.addEventListener('click', async () => {
                if (this._fullscreenEl.classList.contains('fullscreen-button') && this._fullscreenEl.classList.contains('request')) {
                    this.fullscreen = true;
                    this.onFullscreenRequest.emit();
                }
                else {
                    if (this.fullscreen) {
                        this.fullscreen = false;
                        this.onFullscreenExit.emit();
                    }
                }
            }, false);
        }
        return;
    }
    render() {
        if (this._fullscreenEl) {
            this._fullscreenEl.innerHTML = this.fullscreen ? this._fullscreenIcons.exit : this._fullscreenIcons.request;
        }
        return (h(Host, null,
            h("div", { class: "fullscreen-container" }, !this.fullscreen
                ? h("div", { class: "fullscreen-button request" })
                : h("div", { class: "fullscreen-button exit" }))));
    }
    static get is() { return "jeep-fullscreen"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["jeep-fullscreen.css"]
    }; }
    static get styleUrls() { return {
        "$": ["jeep-fullscreen.css"]
    }; }
    static get states() { return {
        "visibility": {},
        "fullscreen": {}
    }; }
    static get events() { return [{
            "method": "onFullscreenRequest",
            "name": "jeepFullscreenRequest",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when Fullscreen Requested"
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "onFullscreenExit",
            "name": "jeepFullscreenExit",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when Fullscreen Exit"
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "onFullscreenChange",
            "name": "jeepFullscreenChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when Fullscreen Change"
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "init": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Init data from properties.",
                "tags": []
            }
        },
        "setFullscreen": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Set the Fullscreen component.",
                "tags": []
            }
        },
        "setJeepFullscreenVisibility": {
            "complexType": {
                "signature": "(state: any) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Set the Fullscreen Visibility (visible/hidden)",
                "tags": []
            }
        },
        "fullscreenRequest": {
            "complexType": {
                "signature": "(elem: any) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Request Fullscreen",
                "tags": []
            }
        },
        "fullscreenExit": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Exit Fullscreen",
                "tags": []
            }
        },
        "isFullscreen": {
            "complexType": {
                "signature": "() => Promise<boolean>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<boolean>"
            },
            "docs": {
                "text": "Is Fullscreen",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "el"; }
    static get listeners() { return [{
            "name": "fullscreenchange",
            "method": "handleFullScreenChange",
            "target": "document",
            "capture": false,
            "passive": false
        }, {
            "name": "webkitfullscreenchange",
            "method": "handleFullScreenChange",
            "target": "document",
            "capture": false,
            "passive": false
        }, {
            "name": "mozfullscreenchange",
            "method": "handleFullScreenChange",
            "target": "document",
            "capture": false,
            "passive": false
        }, {
            "name": "msfullscreenchange",
            "method": "handleFullScreenChange",
            "target": "document",
            "capture": false,
            "passive": false
        }]; }
}
