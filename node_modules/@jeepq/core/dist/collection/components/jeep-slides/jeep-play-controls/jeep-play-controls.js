import { h, Host } from "@stencil/core";
export class JeepPlayControls {
    constructor() {
        this.visibility = 'visible';
        this.play = false;
        this._skipForwardDisabled = true;
        this._skipBackwardDisabled = false;
    }
    //*****************************
    //* Watch on Property Changes *
    //*****************************
    parseDurationProp(newValue) {
        if (newValue)
            this.innerDuration = newValue;
    }
    parseNSlidesProp(newValue) {
        if (newValue !== 0) {
            this.innerNSlides = newValue;
            this.innerToSlide = this.innerNSlides - 1;
        }
        else {
            this.innerNSlides = 0;
            this.innerToSlide = 0;
        }
    }
    parseFromSlideProp(newValue) {
        if (newValue !== 0) {
            this.innerFromSlide = newValue;
        }
        else {
            this.innerFromSlide = 0;
        }
    }
    parseToSlideProp(newValue) {
        if (newValue !== 0) {
            this.innerToSlide = newValue;
        }
        else {
            this.innerToSlide = 0;
        }
    }
    //*******************************
    //* Listen to Event Definitions *
    //*******************************
    //**********************
    //* Method Definitions *
    //**********************
    /**
     * Init data from properties.
     */
    init() {
        return Promise.resolve(this._init());
    }
    /**
     * Set the PlayControls component.
     */
    setPlayControls() {
        return Promise.resolve(this._setPlayControls());
    }
    /**
     * Set the PlayControls Visibility (visible/hidden)
     */
    async setJeepPlayControlsVisibility(state) {
        if (state && state.visibility) {
            if (state.visibility === 'hidden') {
                if (!this._playContainerEl.classList.contains('hidden'))
                    this._playContainerEl.classList.add('hidden');
            }
            else {
                if (this._playContainerEl.classList.contains('hidden'))
                    this._playContainerEl.classList.remove('hidden');
            }
            this.visibility = state.visibility;
        }
        return;
    }
    /**
     * Set the PlayControls skipbackward icon to enable/disable
     */
    async setJeepPlayControlsSkipBackwardDisabled(state) {
        this._skipBackwardDisabled = state.disabled;
        this._setSkipBackwardDisabled();
        return;
    }
    /**
     * Set the PlayControls skipforward icon to enable/disable
     */
    async setJeepPlayControlsSkipForwardDisabled(state) {
        this._skipForwardDisabled = state.disabled;
        this._setSkipForwardDisabled();
        return;
    }
    /**
     * Get the PlayControls duration
     */
    async getJeepPlayControlsDuration() {
        return this.innerDuration;
    }
    /**
     * Start autoplay
     */
    async autoplayStart() {
        this.play = true;
        this.onPlayControlsAutoplayStart.emit();
        this._playContent();
        return;
    }
    /**
     * Stop autoplay
     */
    async autoplayStop() {
        this.play = false;
        this.onPlayControlsAutoplayStop.emit();
        clearInterval(this._initial);
        await this.setCurrentIndex(this.innerFromSlide);
        return;
    }
    /**
     * Pause autoplay
     */
    async autoplayPause() {
        this.play = false;
        this.onPlayControlsAutoplayPause.emit();
        clearInterval(this._initial);
        return;
    }
    /**
     * Is Playing
     */
    async isPlaying() {
        return this.play;
    }
    /**
     * Get PlayControls Current Index
     */
    async getCurrentIndex() {
        return this._currentIndex;
    }
    /**
     * Set PlayControls Active Index
     */
    async setActiveIndexAndPlay(index) {
        clearInterval(this._initial);
        this.setCurrentIndex(index);
        this.autoplayStart();
        return;
    }
    /**
     * Set PlayControls Current Index
     */
    async setCurrentIndex(index, notemit) {
        const willEmit = notemit ? !notemit : true;
        this._currentIndex = index;
        this.onPlayControlsCurrentIndex.emit({ index: this._currentIndex.toString() });
        this._setSkipButtons();
        if (willEmit && this._currentIndex === this.innerFromSlide)
            this.onPlayControlsIsBeginning.emit();
        if (willEmit && this._currentIndex === this.innerToSlide)
            this.onPlayControlsIsEnd.emit();
        return;
    }
    async componentWillLoad() {
        await this.init();
    }
    async componentDidLoad() {
        await this.setPlayControls();
    }
    async _init() {
        this._element = this.el.shadowRoot;
        this.parseDurationProp(this.duration ? this.duration : 1000);
        this.parseNSlidesProp(this.nslides ? this.nslides : 0);
        this.parseFromSlideProp(this.fromslide ? this.fromslide : 0);
        this.parseToSlideProp(this.toslide ? this.toslide : this.innerNSlides > 0 ? this.innerNSlides - 1 : 0);
        await this.setCurrentIndex(this.innerFromSlide, true);
        return;
    }
    async _setPlayControls() {
        this._playContainerEl = this._element.querySelector(".playcontrols-container");
        this._playSkipBackwardEl = this._playContainerEl.querySelector('.playcontrols-button-skip-backward');
        this._playSkipForwardEl = this._playContainerEl.querySelector('.playcontrols-button-skip-forward');
        this.setJeepPlayControlsSkipBackwardDisabled({ disabled: true });
        this.onPlayControlsIsBeginning.emit();
        if (this.innerToSlide > 0) {
            this.setJeepPlayControlsSkipForwardDisabled({ disabled: false });
        }
        else {
            this.setJeepPlayControlsSkipForwardDisabled({ disabled: true });
            this.onPlayControlsIsEnd.emit();
        }
        return;
    }
    _setSkipBackwardDisabled() {
        if (this._skipBackwardDisabled) {
            if (!this._playSkipBackwardEl.classList.contains('disabled'))
                this._playSkipBackwardEl.classList.add('disabled');
        }
        else {
            if (this._playSkipBackwardEl.classList.contains('disabled'))
                this._playSkipBackwardEl.classList.remove('disabled');
        }
    }
    _setSkipForwardDisabled() {
        if (this._skipForwardDisabled) {
            if (!this._playSkipForwardEl.classList.contains('disabled'))
                this._playSkipForwardEl.classList.add('disabled');
        }
        else {
            if (this._playSkipForwardEl.classList.contains('disabled'))
                this._playSkipForwardEl.classList.remove('disabled');
        }
    }
    async _handleClick(event) {
        if (event.target.classList.contains('playcontrols-button-play') && event.target.classList.contains('play')) {
            if (this.innerToSlide > 0 && this._currentIndex < this.innerToSlide) {
                await this.autoplayStart();
            }
        }
        else if (event.target.classList.contains('playcontrols-button-skip-backward')) {
            if (!this._playSkipBackwardEl.classList.contains('disabled') || this._currentIndex > this.innerFromSlide) {
                this.onPlayControlsAutoplaySkipBackward.emit();
                await this.setActiveIndexAndPlay(this._currentIndex - 1);
            }
        }
        else if (event.target.classList.contains('playcontrols-button-skip-forward')) {
            if (!this._playSkipForwardEl.classList.contains('disabled') || this._currentIndex < this.innerToSlide) {
                this.onPlayControlsAutoplaySkipForward.emit();
                await this.setActiveIndexAndPlay(this._currentIndex + 1);
            }
        }
        else {
            if (this.play) {
                await this.autoplayPause();
            }
        }
    }
    _playContent() {
        let index = 0;
        if (this.play) {
            this._initial = setInterval(() => {
                if (index === 0) {
                    index = this._currentIndex + 1;
                }
                if (index > this.innerToSlide) {
                    this.play = false;
                    this.setCurrentIndex(this.innerFromSlide);
                    clearInterval(this._initial);
                }
                else {
                    this.setCurrentIndex(index);
                    index++;
                }
            }, this.innerDuration);
        }
        else {
            clearInterval(this._initial);
            return;
        }
    }
    _setSkipButtons() {
        if (this._playSkipBackwardEl && this._playSkipForwardEl) {
            if (this._currentIndex === this.innerFromSlide) {
                this.setJeepPlayControlsSkipBackwardDisabled({ disabled: true });
            }
            else {
                this.setJeepPlayControlsSkipBackwardDisabled({ disabled: false });
            }
            if (this._currentIndex === this.innerToSlide) {
                this.setJeepPlayControlsSkipForwardDisabled({ disabled: true });
            }
            else {
                this.setJeepPlayControlsSkipForwardDisabled({ disabled: false });
            }
        }
    }
    render() {
        this._setSkipButtons();
        return (h(Host, null,
            h("div", { class: "playcontrols-container" },
                h("div", { class: "playcontrols-button playcontrols-button-skip-backward disabled", onClick: (event) => this._handleClick(event) }),
                this.play
                    ? h("div", { class: "playcontrols-button playcontrols-button-play pause", onClick: (event) => this._handleClick(event) })
                    : h("div", { class: "playcontrols-button playcontrols-button-play play", onClick: (event) => this._handleClick(event) }),
                h("div", { class: "playcontrols-button playcontrols-button-skip-forward disabled", onClick: (event) => this._handleClick(event) }))));
    }
    static get is() { return "jeep-play-controls"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["jeep-play-controls.css"]
    }; }
    static get styleUrls() { return {
        "$": ["jeep-play-controls.css"]
    }; }
    static get properties() { return {
        "duration": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The play controls duration time\ntime to stay on same slide"
            },
            "attribute": "duration",
            "reflect": false
        },
        "nslides": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The play controls slides number"
            },
            "attribute": "nslides",
            "reflect": false
        },
        "fromslide": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The play controls from slides number\nThe first slide index is 0"
            },
            "attribute": "fromslide",
            "reflect": false
        },
        "toslide": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The play controls to slides number\nThe last slide index is slides.length - 1"
            },
            "attribute": "toslide",
            "reflect": false
        }
    }; }
    static get states() { return {
        "innerDuration": {},
        "innerNSlides": {},
        "innerFromSlide": {},
        "innerToSlide": {},
        "visibility": {},
        "play": {}
    }; }
    static get events() { return [{
            "method": "onPlayControlsIsBeginning",
            "name": "jeepPlayControlsIsBeginning",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when current index is fromslide"
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "onPlayControlsIsEnd",
            "name": "jeepPlayControlsIsEnd",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when current index is toslide"
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "onPlayControlsCurrentIndex",
            "name": "jeepPlayControlsCurrentIndex",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the current index change"
            },
            "complexType": {
                "original": "{index:string}",
                "resolved": "{ index: string; }",
                "references": {}
            }
        }, {
            "method": "onPlayControlsAutoplayStart",
            "name": "jeepPlayControlsAutoplayStart",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when autoplay start button clicked"
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "onPlayControlsAutoplayStop",
            "name": "jeepPlayControlsAutoplayStop",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when autoplay stop button clicked"
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "onPlayControlsAutoplayPause",
            "name": "jeepPlayControlsAutoplayPause",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when autoplay pause button clicked"
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "onPlayControlsAutoplaySkipBackward",
            "name": "jeepPlayControlsAutoplaySkipBackward",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when autoplay skip backward button clicked"
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "onPlayControlsAutoplaySkipForward",
            "name": "jeepPlayControlsAutoplaySkipForward",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when autoplay skip forward button clicked"
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "init": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Init data from properties.",
                "tags": []
            }
        },
        "setPlayControls": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Set the PlayControls component.",
                "tags": []
            }
        },
        "setJeepPlayControlsVisibility": {
            "complexType": {
                "signature": "(state: any) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Set the PlayControls Visibility (visible/hidden)",
                "tags": []
            }
        },
        "setJeepPlayControlsSkipBackwardDisabled": {
            "complexType": {
                "signature": "(state: any) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Set the PlayControls skipbackward icon to enable/disable",
                "tags": []
            }
        },
        "setJeepPlayControlsSkipForwardDisabled": {
            "complexType": {
                "signature": "(state: any) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Set the PlayControls skipforward icon to enable/disable",
                "tags": []
            }
        },
        "getJeepPlayControlsDuration": {
            "complexType": {
                "signature": "() => Promise<number>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<number>"
            },
            "docs": {
                "text": "Get the PlayControls duration",
                "tags": []
            }
        },
        "autoplayStart": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Start autoplay",
                "tags": []
            }
        },
        "autoplayStop": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Stop autoplay",
                "tags": []
            }
        },
        "autoplayPause": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Pause autoplay",
                "tags": []
            }
        },
        "isPlaying": {
            "complexType": {
                "signature": "() => Promise<boolean>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<boolean>"
            },
            "docs": {
                "text": "Is Playing",
                "tags": []
            }
        },
        "getCurrentIndex": {
            "complexType": {
                "signature": "() => Promise<number>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<number>"
            },
            "docs": {
                "text": "Get PlayControls Current Index",
                "tags": []
            }
        },
        "setActiveIndexAndPlay": {
            "complexType": {
                "signature": "(index: number) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Set PlayControls Active Index",
                "tags": []
            }
        },
        "setCurrentIndex": {
            "complexType": {
                "signature": "(index: number, notemit?: boolean) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }, {
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Set PlayControls Current Index",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "duration",
            "methodName": "parseDurationProp"
        }, {
            "propName": "nslides",
            "methodName": "parseNSlidesProp"
        }, {
            "propName": "fromslide",
            "methodName": "parseFromSlideProp"
        }, {
            "propName": "toslide",
            "methodName": "parseToSlideProp"
        }]; }
}
