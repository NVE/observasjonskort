import { h, Host } from "@stencil/core";
export class JeepCarousel {
    constructor() {
        /*********************
         * State Definitions *
         *********************/
        this.innerData = [];
        this.pause = false;
        this.backward = false;
        this.forward = true;
        /*********************************
         * Internal Variable Definitions *
         *********************************/
        this._swiper = null; // cannot be Swiper as method init not in @types/swiper
        this._didInit = false;
        this._pagination = false;
        this._navigation = false;
        this._scrollbar = false;
        this._zoom = false;
        this._parallax = false;
        this._thumbs = false;
        this._autoplay = false;
        this._lazy = false;
        this._thumbsOptions = {};
        this._cleanstyles = true;
    }
    parseDataProp(newValue) {
        let slides = [];
        if (newValue) {
            const inpData = JSON.parse(newValue);
            for (let i = 0; i < inpData.slides.length; i++) {
                let slide;
                if (inpData.slides[i].slide[0].indexOf("swiper-slide") !== -1) {
                    slide = inpData.slides[i].slide[0];
                }
                else {
                    slide = '<div class="swiper-slide">';
                    if (this._zoom && inpData.slides[i].slide[0].indexOf("<img") === 0)
                        slide += '<div class="swiper-zoom-container">';
                    for (let j = 0; j < inpData.slides[i].slide.length; j++) {
                        slide += inpData.slides[i].slide[j];
                    }
                    if (this._zoom && inpData.slides[i].slide[0].indexOf("<img") === 0)
                        slide += '</div>';
                    if (this._lazy && inpData.slides[i].slide[0].indexOf("swiper-lazy") !== -1) {
                        slide += '<div class="swiper-lazy-preloader"></div>';
                    }
                    slide += '</div>';
                }
                slides = [...slides, slide];
            }
        }
        this.innerData = slides;
    }
    parseStyleProp(newValue) {
        this.innerStyle = newValue ? newValue : null;
    }
    async parseOptionsProp(newValue) {
        const options = newValue ? JSON.parse(newValue) : null;
        if (options !== null) {
            this._parallax = options.parallax ? true : false;
            this._thumbs = options.thumbs ? true : false;
            if (this._thumbs) {
                if (options.thumbs.swiper) {
                    if (options.thumbs.swiper.el) {
                        this._thumbsClass =
                            options.thumbs.swiper.el.indexOf('.') === 0
                                ? options.thumbs.swiper.el.substr(1)
                                : options.thumbs.swiper.el;
                        delete options.thumbs.swiper.el;
                        this._thumbsOptions = options.thumbs.swiper;
                    }
                    else {
                        this._thumbsClass = "swiper-container-thumbs";
                        this._thumbsOptions = options.thumbs.swiper;
                    }
                }
                else {
                    this._thumbsClass = "swiper-container-thumbs";
                    this._thumbsOptions = { slidesPerView: 4,
                        spaceBetween: 10,
                    };
                }
                if (!this._thumbsOptions.watchSlidesProgress)
                    this._thumbsOptions.watchSlidesProgress = true;
            }
            this._lazy = options.lazy ? true : false;
            this._zoom = options.zoom ? true : false;
            this._pagination = options.pagination ? true : false;
            this._navigation = options.navigation ? true : false;
            this._scrollbar = options.scrollbar ? true : false;
            this._autoplay = options.autoplay ? true : false;
        }
        if (this._didInit && options !== null) {
            Object.assign(this._swiper.params, options);
            await this.update();
        }
        this.innerOptions = options;
    }
    parseRtlProp(newValue) {
        this.innerRtl = newValue ? newValue : false;
    }
    parseParallaxOptions(newValue) {
        let parallaxOptions = newValue ? JSON.parse(newValue) : null;
        if (this._parallax) {
            this._parallaxStyle = { "background-image": parallaxOptions.imageUrl };
        }
        else {
            parallaxOptions = null;
        }
        this.innerParallaxOptions = parallaxOptions;
    }
    parsePlayControlsProp(newValue) {
        this.innerPlayControls = this._autoplay && newValue ? newValue : false;
    }
    parseNotCleanStylesProp(newValue) {
        const notCleanStyles = newValue ? newValue : false;
        this._cleanstyles = !notCleanStyles;
        this.innerNotCleanStyles = notCleanStyles;
    }
    /**********************
     * Method Definitions *
     **********************/
    /**
     * Init data from properties.
     */
    init() {
        return Promise.resolve(this._init());
    }
    /**
     * Set the swiper.
     */
    setSwiper() {
        return Promise.resolve(this._setSwiper());
    }
    /**
     * Update the underlying slider implementation. Call this if you've added or removed
     * child slides.
     */
    async update() {
        this._swiper.update();
    }
    /**
     * Append new slides
     * slides could be HTMLElement or HTML string with new slide
     * or array with such slides
     */
    async appendSlide(slides) {
        this._swiper.appendSlide(slides);
    }
    /**
     * Add new slides to required index
     * slides could be HTMLElement or HTML string with new slide
     * or array with such slides
     */
    async addSlide(index, slides) {
        this._swiper.addSlide(index, slides);
    }
    /**
     * Transition to the specified slide.
     */
    async slideTo(index, speed, runCallbacks) {
        this._swiper.slideTo(index, speed, runCallbacks);
    }
    /**
     * Transition to the next slide.
     */
    async slideNext(speed, runCallbacks) {
        this._swiper.slideNext(speed, runCallbacks);
    }
    /**
     * Transition to the previous slide.
     */
    async slidePrev(speed, runCallbacks) {
        this._swiper.slidePrev(speed, runCallbacks);
    }
    /**
     * Get the index of the active slide.
     */
    async getActiveIndex() {
        return this._swiper.activeIndex;
    }
    /**
     * Get the index of the previous slide.
     */
    async getPreviousIndex() {
        return this._swiper.previousIndex;
    }
    /**
     * Get the total number of slides.
     */
    async length() {
        return this._swiper.slides.length;
    }
    /**
     * Get whether or not the current slide is the last slide.
     *
     */
    async isEnd() {
        return this._swiper.isEnd;
    }
    /**
     * Get whether or not the current slide is the first slide.
     */
    async isBeginning() {
        return this._swiper.isBeginning;
    }
    /**
     * Start auto play.
     */
    async startAutoplay() {
        if (this._swiper.autoplay) {
            this._swiper.autoplay.start();
        }
    }
    /**
     * Stop auto play.
     */
    async stopAutoplay() {
        if (this._swiper.autoplay) {
            this._swiper.autoplay.stop();
        }
    }
    /**
     * Swiper destroy.
     */
    async swiperDestroy(cleanstyles) {
        if (this._swiper) {
            this._swiper.removeAllSlides();
            this._swiper.detachEvents();
            this._swiper.destroy(true, cleanstyles);
            this.afterDestroy.emit();
            if (this._thumbs) {
                this._swiperThumbs.removeAllSlides();
                this._swiperThumbs.detachEvents();
                this._swiperThumbs.destroy(true, true);
            }
            this._didInit = false;
            this._swiper = null;
        }
    }
    async componentWillLoad() {
        await this.init();
    }
    async componentDidLoad() {
        await this.setSwiper();
    }
    async componentDidUnload() {
        await this.swiperDestroy(this._cleanstyles);
    }
    async _init() {
        const defParallaxOptions = {
            imageUrl: "url(http://lorempixel.com/900/600/nightlife/2/)",
            dataSwiperParallax: "-23%"
        };
        this.parseOptionsProp(this.options ? this.options : null);
        this.parseNotCleanStylesProp(this.notcleanstyles ? this.notcleanstyles : false);
        this.parseParallaxOptions(this.parallaxoptions ? this.parallaxoptions : JSON.stringify(defParallaxOptions));
        this.parsePlayControlsProp(this.playcontrols ? true : false);
        this.parseDataProp(this.data ? this.data : null);
        this.parseStyleProp(this.cstyle ? this.cstyle : null);
        this.parseRtlProp(this.rtl ? true : false);
        return;
    }
    async _setSwiper() {
        const { Swiper } = await import('./swiper/swiper.js');
        /**
         * Thumbs Swiper Container if any
         */
        if (this._thumbs) {
            this._swiperThumbsEl = this.el.querySelector('.' + this._thumbsClass);
            if (this.innerData && this.innerData.length > 0 && this._swiperThumbsEl !== null) {
                this._swiperThumbs = new Swiper(this._swiperThumbsEl, this._thumbsOptions);
                this._swiperThumbs.appendSlide(this.innerData);
                this._swiperThumbs.update();
                this.innerOptions.thumbs = { swiper: this._swiperThumbs };
            }
        }
        /**
         * Main Swiper Container
         */
        const swiperEl = this.el.querySelector('.swiper-container');
        this.innerOptions = this.innerOptions !== null ? this.innerOptions : {};
        this.innerOptions.init = false;
        if (swiperEl !== null) {
            this._swiper = new Swiper(swiperEl, this.innerOptions);
            /**
             * add some events
             */
            this._swiper.on('init', () => {
                setTimeout(() => {
                    this._didInit = true;
                    this.didLoad.emit();
                }, 20);
            });
            this._swiper.on('slideChange', async () => {
                if (this._didInit) {
                    await this.update();
                }
                this.slideChange.emit();
                if (this.innerPlayControls) {
                    if (this._swiper.isBeginning) {
                        this.backward = false;
                    }
                    else if (this._swiper.isEnd) {
                        this.pause = false;
                        this.forward = false;
                    }
                    else {
                        this.backward = true;
                        this.forward = true;
                    }
                }
            });
            this._swiper.on('beforeDestroy', () => {
                this.beforeDestroy.emit();
            });
            this._swiper.on('tap', () => {
                this.tap.emit();
            });
            this._swiper.on('doubleTap', () => {
                this.doubleTap.emit();
            });
            this._swiper.on('slideChangeTransitionStart', () => {
                this.willChange.emit();
            });
            this._swiper.on('slideChangeTransitionEnd', () => {
                this.didChange.emit();
            });
            this._swiper.on('slideNextTransitionStart', () => {
                this.nextStart.emit();
            });
            this._swiper.on('slidePrevTransitionStart', () => {
                this.prevStart.emit();
            });
            this._swiper.on('slideNextTransitionEnd', () => {
                this.nextEnd.emit();
            });
            this._swiper.on('slidePrevTransitionEnd', () => {
                this.prevEnd.emit();
            });
            this._swiper.on('transitionStart', () => {
                this.transitionStart.emit();
            });
            this._swiper.on('transitionEnd', () => {
                this.transitionEnd.emit();
            });
            this._swiper.on('sliderMove', () => {
                this.drag.emit();
            });
            this._swiper.on('reachBeginning', () => {
                this.reachStart.emit();
            });
            this._swiper.on('reachEnd', () => {
                this.reachEnd.emit();
            });
            this._swiper.on('touchStart', async () => {
                this.touchStart.emit();
                this._initial = await this._doHide(2500);
                if (this._autoplay && !this._swiper.autoplay.running && !this.innerPlayControls)
                    this._swiper.autoplay.start();
            });
            this._swiper.on('touchEnd', () => {
                this.touchEnd.emit();
            });
            /**
             * swiper init
             */
            this._swiper.init();
            /**
             * add slides
             */
            if (this.innerData && this.innerData.length > 0) {
                await this.appendSlide(this.innerData);
                if (this._lazy) {
                    this._swiper.lazy.loadInSlide(0);
                    this._swiper.lazy.loadInSlide(1);
                }
                await this.update();
            }
            if (!this.innerPlayControls && this._scrollbar)
                this._scrollbarEl = swiperEl.querySelector('.swiper-scrollbar');
            if (!this.innerPlayControls && this._pagination)
                this._paginationEl = swiperEl.querySelector('.swiper-pagination');
            if (!this.innerPlayControls && this._navigation) {
                this._navButtons = swiperEl.querySelector('.swiper-navigation-buttons');
                this._navPrevEl = this._navButtons.querySelector('.swiper-button-prev');
                this._navNextEl = this._navButtons.querySelector('.swiper-button-next');
                let nextStyle = "background-image:var(--navigation-next-background,";
                nextStyle += "url(data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%2027%2044%22%3E%3Cpath%20fill=%22%23007aff%22%20d=%22M27%2022L27%2022L5%2044l-2.1-2.1L22.8%2022L2.9%202.1L5%200z%22/%3E%3C/svg%3E));";
                nextStyle += "right: var(--navigation-position,10px);";
                let constStyle = "width: var(--navigation-width,27px);height: var(--navigation-height,44px);";
                constStyle += "background-size: var(--navigation-width,27px) var(--navigation-height,44px);-moz-background-size: var(--navigation-width,27px) var(--navigation-height,44px);";
                constStyle += "-webkit-background-size: var(--navigation-width,27px) var(--navigation-height,44px);";
                let prevStyle = "background-image:var(--navigation-prev-background,";
                prevStyle += "url(data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%2027%2044%22%3E%3Cpath%20fill=%22%23007aff%22%20d=%22M0%2022L22%200l2.1%202.1L4.2%2022l19.9%2019.9L22%2044z%22/%3E%3C/svg%3E));";
                prevStyle += "left: var(--navigation-position,10px);";
                if (this.innerRtl) {
                    this._navNextEl.setAttribute("style", prevStyle + constStyle);
                    this._navPrevEl.setAttribute("style", nextStyle + constStyle);
                }
                else {
                    this._navNextEl.setAttribute("style", nextStyle + constStyle);
                    this._navPrevEl.setAttribute("style", prevStyle + constStyle);
                }
            }
            if (this.playcontrols) {
                this._playControlsEl = swiperEl.querySelector('.swiper-playcontrols-buttons');
                this._playBackwardEl = swiperEl.querySelector('.autoplay-button-skip-backward');
                this._playForwardEl = swiperEl.querySelector('.autoplay-button-skip-forward');
            }
            this._initial = await this._doHide(20);
            if (this._autoplay && !this.innerPlayControls) {
                this._swiper.autoplay.start();
            }
            else {
                this._swiper.autoplay.stop();
            }
        }
        return;
    }
    async _doVisible() {
        if (this._scrollbarEl && this._scrollbarEl.classList.contains('hidden'))
            this._scrollbarEl.classList.remove('hidden');
        if (this._paginationEl && this._paginationEl.classList.contains('hidden'))
            this._paginationEl.classList.remove('hidden');
        if (this._navButtons && this._navButtons.classList.contains('hidden'))
            this._navButtons.classList.remove('hidden');
        if (this._playControlsEl && this._playControlsEl.classList.contains('hidden'))
            this._playControlsEl.classList.remove('hidden');
        if (this._thumbs && this._swiperThumbsEl && this._swiperThumbsEl.classList.contains('hidden')) {
            this._swiperThumbsEl.classList.remove('hidden');
        }
        return;
    }
    async _doHide(duration) {
        clearTimeout(this._initial);
        await this._doVisible();
        let initial = setTimeout(() => {
            if (this._scrollbarEl)
                this._scrollbarEl.classList.add('hidden');
            if (this._paginationEl)
                this._paginationEl.classList.add('hidden');
            if (this._navButtons)
                this._navButtons.classList.add('hidden');
            if (this._playControlsEl)
                this._playControlsEl.classList.add('hidden');
            if (this._thumbs && this._swiperThumbsEl) {
                this._swiperThumbsEl.classList.add('hidden');
            }
        }, duration);
        return initial;
    }
    _handleClick(event) {
        if (event.target.classList.contains('autoplay-button-play')) {
            if (this._swiper.isEnd) {
                this._swiper.slideTo(0, 0, false);
                this.forward = true;
            }
            this._swiper.autoplay.start();
            this.pause = true;
        }
        else if (event.target.classList.contains('autoplay-button-skip-backward')) {
            this._swiper.slidePrev(0, false);
        }
        else if (event.target.classList.contains('autoplay-button-skip-forward')) {
            this._swiper.slideNext(0, false);
        }
        else {
            this._swiper.autoplay.stop();
            this.pause = false;
        }
    }
    render() {
        let toRender = [];
        if (this.innerData && this.innerData.length > 0) {
            // swiper-container elements
            let swiperContent = [];
            // add parallax-bg if any
            if (this._parallax) {
                if (this.innerParallaxOptions.dataSwiperParallax) {
                    swiperContent = [...swiperContent,
                        h("div", { class: "parallax-bg", style: this._parallaxStyle, "data-swiper-parallax": this.innerParallaxOptions.dataSwiperParallax })];
                }
                if (this.innerParallaxOptions.dataSwiperParallaxX && this.innerParallaxOptions.dataSwiperParallaxY) {
                    swiperContent = [...swiperContent,
                        h("div", { class: "parallax-bg", style: this._parallaxStyle, "data-swiper-parallax-x": this.innerParallaxOptions.dataSwiperParallaxX, "data-swiper-parallax-y": this.innerParallaxOptions.dataSwiperParallaxY })];
                }
                else if (this.innerParallaxOptions.dataSwiperParallaxX) {
                    swiperContent = [...swiperContent,
                        h("div", { class: "parallax-bg", style: this._parallaxStyle, "data-swiper-parallax-x": this.innerParallaxOptions.dataSwiperParallaxX })];
                }
                else if (this.innerParallaxOptions.dataSwiperParallaxY) {
                    swiperContent = [...swiperContent,
                        h("div", { class: "parallax-bg", style: this._parallaxStyle, "data-swiper-parallax-y": this.innerParallaxOptions.dataSwiperParallaxY })];
                }
            }
            // add swiper-wrapper
            swiperContent = [...swiperContent,
                h("div", { class: "swiper-wrapper" })
            ];
            // add swiper-scrollbar if any
            if (!this.innerPlayControls && this._scrollbar) {
                swiperContent = [...swiperContent,
                    h("div", { class: "swiper-scrollbar" })];
            }
            // add swiper-pagination if any
            if (!this.innerPlayControls && this._pagination) {
                swiperContent = [...swiperContent,
                    h("div", { class: "swiper-pagination" })];
            }
            // add swiper-navigation-buttons id any
            if (!this.innerPlayControls && this._navigation) {
                swiperContent = [...swiperContent,
                    h("div", { class: "swiper-navigation-buttons" },
                        h("div", { class: "swiper-button-prev" }),
                        h("div", { class: "swiper-button-next" }))];
            }
            // add swiper-playcontrols-buttons if any
            if (this.innerPlayControls) {
                swiperContent = [...swiperContent,
                    h("div", { class: "swiper-playcontrols-buttons" },
                        this.backward
                            ? h("div", { class: "swiper-playcontrols-button autoplay-button-skip-backward", onClick: (event) => this._handleClick(event) })
                            : null,
                        this.pause
                            ? h("div", { class: "swiper-playcontrols-button autoplay-button-pause", onClick: (event) => this._handleClick(event) })
                            : h("div", { class: "swiper-playcontrols-button autoplay-button-play", onClick: (event) => this._handleClick(event) }),
                        this.forward
                            ? h("div", { class: "swiper-playcontrols-button autoplay-button-skip-forward", onClick: (event) => this._handleClick(event) })
                            : null)];
            }
            // swiper-container-thumbs elements if any
            let swiperThumbsContent = [];
            if (this._thumbs) {
                // add swiper-wrapper
                swiperThumbsContent = [...swiperThumbsContent,
                    h("div", { class: "swiper-wrapper" })
                ];
            }
            toRender = [...toRender,
                h("style", null, this.innerStyle),
                h("div", { class: "container" },
                    this.innerRtl
                        ? h("div", { class: "swiper-container", dir: 'rtl' }, swiperContent)
                        : h("div", { class: "swiper-container" }, swiperContent),
                    this._thumbs
                        ?
                            h("div", { class: "swiper-container " + this._thumbsClass + " gallery-thumbs" }, swiperThumbsContent)
                        :
                            null)
            ];
        }
        else {
            toRender = [...toRender,
                h("div", { id: 'fake-card' })
            ];
        }
        return (h(Host, null, toRender));
    }
    static get is() { return "jeep-carousel"; }
    static get originalStyleUrls() { return {
        "$": ["jeep-carousel.css"]
    }; }
    static get styleUrls() { return {
        "$": ["jeep-carousel.css"]
    }; }
    static get assetsDirs() { return ["swiper"]; }
    static get properties() { return {
        "data": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Slide data"
            },
            "attribute": "data",
            "reflect": false
        },
        "cstyle": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Slide data style"
            },
            "attribute": "cstyle",
            "reflect": false
        },
        "options": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Swiper options"
            },
            "attribute": "options",
            "reflect": false
        },
        "rtl": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Swiper RTL Layout"
            },
            "attribute": "rtl",
            "reflect": false
        },
        "parallaxoptions": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Swiper data-swiper-parallax"
            },
            "attribute": "parallaxoptions",
            "reflect": false
        },
        "playcontrols": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "PlayControls when autoplay"
            },
            "attribute": "playcontrols",
            "reflect": false
        },
        "notcleanstyles": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Clean styles when swiper destroys"
            },
            "attribute": "notcleanstyles",
            "reflect": false
        }
    }; }
    static get states() { return {
        "innerData": {},
        "innerStyle": {},
        "innerOptions": {},
        "innerRtl": {},
        "innerParallaxOptions": {},
        "innerPlayControls": {},
        "innerNotCleanStyles": {},
        "pause": {},
        "backward": {},
        "forward": {}
    }; }
    static get events() { return [{
            "method": "didLoad",
            "name": "jeepCarouselDidLoad",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted after Swiper initialization"
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "beforeDestroy",
            "name": "jeepCarouselBeforeDestroy",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted before Swiper destroy"
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "afterDestroy",
            "name": "jeepCarouselAfterDestroy",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted after Swiper destroy"
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "tap",
            "name": "jeepCarouselTap",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the user taps/clicks on the slide's container."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "doubleTap",
            "name": "jeepCarouselDoubleTap",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the user double taps on the slide's container."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "slideChange",
            "name": "jeepCarouselSlideChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the active slide has changed."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "willChange",
            "name": "jeepCarouselWillChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted before the active slide has changed."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "didChange",
            "name": "jeepCarouselDidChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted after the active slide has changed."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "nextStart",
            "name": "jeepCarouselNextStart",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the next slide has started."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "prevStart",
            "name": "jeepCarouselPrevStart",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the previous slide has started."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "nextEnd",
            "name": "jeepCarouselNextEnd",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the next slide has ended."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "prevEnd",
            "name": "jeepCarouselPrevEnd",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the previous slide has ended."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "transitionStart",
            "name": "jeepCarouselTransitionStart",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the slide transition has started."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "transitionEnd",
            "name": "jeepCarouselTransitionEnd",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the slide transition has ended."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "drag",
            "name": "jeepCarouselDrag",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the slider is actively being moved."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "reachStart",
            "name": "jeepCarouselReachStart",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the slider is at its initial position."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "reachEnd",
            "name": "jeepCarouselReachEnd",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the slider is at the last slide."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "touchStart",
            "name": "jeepCarouselTouchStart",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the user first touches the slider."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "touchEnd",
            "name": "jeepCarouselTouchEnd",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the user releases the touch."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "init": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Init data from properties.",
                "tags": []
            }
        },
        "setSwiper": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Set the swiper.",
                "tags": []
            }
        },
        "update": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Update the underlying slider implementation. Call this if you've added or removed\nchild slides.",
                "tags": []
            }
        },
        "appendSlide": {
            "complexType": {
                "signature": "(slides: any) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Append new slides \nslides could be HTMLElement or HTML string with new slide\nor array with such slides",
                "tags": []
            }
        },
        "addSlide": {
            "complexType": {
                "signature": "(index: number, slides: any) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }, {
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Add new slides to required index\nslides could be HTMLElement or HTML string with new slide\nor array with such slides",
                "tags": []
            }
        },
        "slideTo": {
            "complexType": {
                "signature": "(index: number, speed?: number, runCallbacks?: boolean) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }, {
                        "tags": [],
                        "text": ""
                    }, {
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Transition to the specified slide.",
                "tags": []
            }
        },
        "slideNext": {
            "complexType": {
                "signature": "(speed?: number, runCallbacks?: boolean) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }, {
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Transition to the next slide.",
                "tags": []
            }
        },
        "slidePrev": {
            "complexType": {
                "signature": "(speed?: number, runCallbacks?: boolean) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }, {
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Transition to the previous slide.",
                "tags": []
            }
        },
        "getActiveIndex": {
            "complexType": {
                "signature": "() => Promise<number>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<number>"
            },
            "docs": {
                "text": "Get the index of the active slide.",
                "tags": []
            }
        },
        "getPreviousIndex": {
            "complexType": {
                "signature": "() => Promise<number>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<number>"
            },
            "docs": {
                "text": "Get the index of the previous slide.",
                "tags": []
            }
        },
        "length": {
            "complexType": {
                "signature": "() => Promise<number>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<number>"
            },
            "docs": {
                "text": "Get the total number of slides.",
                "tags": []
            }
        },
        "isEnd": {
            "complexType": {
                "signature": "() => Promise<boolean>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<boolean>"
            },
            "docs": {
                "text": "Get whether or not the current slide is the last slide.",
                "tags": []
            }
        },
        "isBeginning": {
            "complexType": {
                "signature": "() => Promise<boolean>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<boolean>"
            },
            "docs": {
                "text": "Get whether or not the current slide is the first slide.",
                "tags": []
            }
        },
        "startAutoplay": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Start auto play.",
                "tags": []
            }
        },
        "stopAutoplay": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Stop auto play.",
                "tags": []
            }
        },
        "swiperDestroy": {
            "complexType": {
                "signature": "(cleanstyles: boolean) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Swiper destroy.",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "data",
            "methodName": "parseDataProp"
        }, {
            "propName": "cstyle",
            "methodName": "parseStyleProp"
        }, {
            "propName": "options",
            "methodName": "parseOptionsProp"
        }, {
            "propName": "rtl",
            "methodName": "parseRtlProp"
        }, {
            "propName": "parallaxoptions",
            "methodName": "parseParallaxOptions"
        }, {
            "propName": "playcontrols",
            "methodName": "parsePlayControlsProp"
        }, {
            "propName": "notcleanstyles",
            "methodName": "parseNotCleanStylesProp"
        }]; }
}
