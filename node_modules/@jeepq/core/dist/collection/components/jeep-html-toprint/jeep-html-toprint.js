import { Host, h } from "@stencil/core";
export class JeepHtmlToprint {
    constructor() {
        this.innerSlotStyle = null;
        this._error = null;
    }
    //*****************************
    //* Watch on Property Changes *
    //*****************************
    parseSlotStyleProp(newValue) {
        if (newValue)
            this.innerSlotStyle = newValue ? newValue : null;
    }
    //*******************************
    //* Listen to Event Definitions *
    //*******************************
    printDocHandler() {
        this.window.print();
        this.printPageCompleted.emit();
    }
    //**********************
    //* Method Definitions *
    //**********************
    /**
     * Method initialize
     */
    async init() {
        return await this._init();
    }
    async load() {
        return await this._load();
    }
    async emitPrint() {
        this.printPage.emit();
        return;
    }
    async getSlotStyle() {
        return this.innerSlotStyle;
    }
    //*******************************
    //* Component Lifecycle Methods *
    //*******************************
    async componentWillLoad() {
        await this.init();
    }
    async componentDidLoad() {
        await this.load();
    }
    //******************************
    //* Private Method Definitions *
    //******************************
    async _init() {
        this.window = window;
        //    this._element = this.el.shadowRoot;
        this.parseSlotStyleProp(this.slotstyle ? this.slotstyle : null);
        // check if there is a ion-menu and dismiss it
        this._menu = document.querySelector('ion-menu');
        if (this._menu !== null) {
            this._menu.setAttribute('disabled', 'true');
        }
        return;
    }
    async _load() {
        const divs = Array.from(this.el.querySelectorAll('div'));
        if (divs && divs.length > 0) {
            const slotDivEl = divs.filter((item) => {
                return (item.slot && item.slot === 'toprint') || item.outerHTML.indexOf('slot="toprint"') !== -1 ? item : null;
            });
            this._error = slotDivEl && slotDivEl.length > 0 ? null : "Error: slot name toprint doesn't exist";
            if (this._error === null) {
                const erEl = this.el.shadowRoot.querySelector('#error-div');
                erEl.style.setProperty('display', 'none');
                slotDivEl[0].innerHTML = this.innerSlotStyle !== null ? this.innerSlotStyle + slotDivEl[0].innerHTML : slotDivEl[0].innerHTML;
                this.printPageReady.emit();
            }
        }
        else {
            this._error = "Error: slot name toprint doesn't exist";
        }
        return;
    }
    //*************************
    //* Rendering JSX Element *
    //*************************
    render() {
        /*
        let toRender: any[] = [];
        if (this._error !== null) {
          toRender = [...toRender,
            <div id="error-div">{this._error}</div>
          ];
        } else {
          toRender = [...toRender,
            <slot name='toprint'></slot>
          ];
        }
        */
        return (h(Host, null,
            h("div", { id: "error-div" }, "Error: slot name toprint doesn't exist"),
            h("slot", { name: 'toprint' })));
    }
    static get is() { return "jeep-html-toprint"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["jeep-html-toprint.css"]
    }; }
    static get styleUrls() { return {
        "$": ["jeep-html-toprint.css"]
    }; }
    static get properties() { return {
        "slotstyle": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The style for elements in slot"
            },
            "attribute": "slotstyle",
            "reflect": false
        }
    }; }
    static get states() { return {
        "innerSlotStyle": {}
    }; }
    static get events() { return [{
            "method": "printPage",
            "name": "jeepHtmlToPrint",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "printPageReady",
            "name": "jeepHtmlToPrintReady",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "printPageCompleted",
            "name": "jeepHtmlToPrintCompleted",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "init": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Method initialize",
                "tags": []
            }
        },
        "load": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        },
        "emitPrint": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        },
        "getSlotStyle": {
            "complexType": {
                "signature": "() => Promise<string>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<string>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "slotstyle",
            "methodName": "parseSlotStyleProp"
        }]; }
    static get listeners() { return [{
            "name": "jeepHtmlToPrint",
            "method": "printDocHandler",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
}
