import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './core-f19ae6a4.js';

const JeepFullscreen = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        //************************
        //* Property Definitions *
        //************************
        //*****************************
        //* Watch on Property Changes *
        //*****************************
        //************************
        //* State Definitions *
        //************************
        this.visibility = 'visible';
        this.fullscreen = false;
        this._fullscreenIcons = {
            request: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M396.795 396.8H320V448h128V320h-51.205zM396.8 115.205V192H448V64H320v51.205zM115.205 115.2H192V64H64v128h51.205zM115.2 396.795V320H64v128h128v-51.205z"/></svg>',
            exit: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M64 371.2h76.795V448H192V320H64v51.2zm76.795-230.4H64V192h128V64h-51.205v76.8zM320 448h51.2v-76.8H448V320H320v128zm51.2-307.2V64H320v128h128v-51.2h-76.8z"/></svg>'
        };
        this._fullscreenChange = false;
        this.onFullscreenRequest = createEvent(this, "jeepFullscreenRequest", 7);
        this.onFullscreenExit = createEvent(this, "jeepFullscreenExit", 7);
        this.onFullscreenChange = createEvent(this, "jeepFullscreenChange", 7);
    }
    //*******************************
    //* Listen to Event Definitions *
    //*******************************
    handleFullScreenChange() {
        if (this.fullscreen && this._fullscreenChange) {
            this.fullscreen = false;
            this.onFullscreenChange.emit();
        }
        this._fullscreenChange = !this._fullscreenChange;
    }
    //**********************
    //* Method Definitions *
    //**********************
    /**
     * Init data from properties.
     */
    init() {
        return Promise.resolve(this._init());
    }
    /**
     * Set the Fullscreen component.
     */
    setFullscreen() {
        return Promise.resolve(this._setFullscreen());
    }
    /**
     * Set the Fullscreen Visibility (visible/hidden)
     */
    async setJeepFullscreenVisibility(state) {
        if (state && state.visibility) {
            if (state.visibility === 'hidden') {
                if (!this._screenContainerEl.classList.contains('hidden'))
                    this._screenContainerEl.classList.add('hidden');
            }
            else {
                if (this._screenContainerEl.classList.contains('hidden'))
                    this._screenContainerEl.classList.remove('hidden');
            }
            this.visibility = state.visibility;
        }
        return;
    }
    /**
     * Request Fullscreen
     */
    async fullscreenRequest(elem) {
        if (elem.requestFullscreen) {
            elem.requestFullscreen();
        }
        else if (elem.webkitRequestFullscreen) {
            elem.webkitRequestFullscreen();
        }
        else if (elem.mozRequestFullScreen) {
            elem.mozRequestFullScreen();
        }
        else if (elem.msRequestFullscreen) {
            elem.msRequestFullscreen();
        }
        else {
            this.fullscreen = false;
            console.log('Fullscreen API is not supported.');
        }
        return;
    }
    /**
     * Exit Fullscreen
     */
    async fullscreenExit() {
        let doc = document;
        if (doc && doc.exitFullscreen) {
            doc.exitFullscreen();
        }
        else if (doc && doc.webkitExitFullscreen) {
            doc.webkitExitFullscreen();
        }
        else if (doc && doc.mozExitFullscreen) {
            doc.mozExitFullscreen();
        }
        else if (doc && doc.msExitFullscreen) {
            doc.msExitFullscreen();
        }
        else {
            console.log('Fullscreen API is not supported.');
        }
        return;
    }
    /**
     * Is Fullscreen
     */
    async isFullscreen() {
        return this.fullscreen;
    }
    async componentWillLoad() {
        await this.init();
    }
    async componentDidLoad() {
        await this.setFullscreen();
    }
    async _init() {
        this._element = this.el.shadowRoot;
        return;
    }
    async _setFullscreen() {
        this._screenContainerEl = this._element.querySelector(".fullscreen-container");
        this._fullscreenEl = this._screenContainerEl.querySelector('.fullscreen-button');
        if (this._fullscreenEl) {
            this._fullscreenEl.innerHTML = this._fullscreenIcons.request;
            this._fullscreenEl.addEventListener('click', async () => {
                if (this._fullscreenEl.classList.contains('fullscreen-button') && this._fullscreenEl.classList.contains('request')) {
                    this.fullscreen = true;
                    this.onFullscreenRequest.emit();
                }
                else {
                    if (this.fullscreen) {
                        this.fullscreen = false;
                        this.onFullscreenExit.emit();
                    }
                }
            }, false);
        }
        return;
    }
    render() {
        if (this._fullscreenEl) {
            this._fullscreenEl.innerHTML = this.fullscreen ? this._fullscreenIcons.exit : this._fullscreenIcons.request;
        }
        return (h(Host, null, h("div", { class: "fullscreen-container" }, !this.fullscreen
            ? h("div", { class: "fullscreen-button request" })
            : h("div", { class: "fullscreen-button exit" }))));
    }
    get el() { return getElement(this); }
    static get style() { return ":host{--fullscreen-top:10px;--fullscreen-left:10px;--fullscreen-width:100%;--fullscreen-button-width:50px;--fullscreen-button-height:50px;--fullscreen-button-icon-color:#222428}.fullscreen-container{position:absolute;top:var(--fullscreen-top);left:var(--fullscreen-left);width:var(--fullscreen-width);height:auto;z-index:12;visibility:visible}.fullscreen-button{display:inline-block;width:var(--fullscreen-button-width,20px);height:var(--fullscreen-button-height,20px);fill:var(--fullscreen-button-icon-color)}.hidden{visibility:hidden}"; }
};

const icons = {
    "arrow-circle": {
        back: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M256 48C141.1 48 48 141.1 48 256s93.1 208 208 208 208-93.1 208-208S370.9 48 256 48zm43.4 289.1c7.5 7.5 7.5 19.8 0 27.3-3.8 3.8-8.7 5.6-13.6 5.6s-9.9-1.9-13.7-5.7l-94-94.3c-6.9-7.6-6.7-19.3.6-26.6l95.4-95.7c7.5-7.5 19.7-7.6 27.3 0 7.5 7.5 7.6 19.7 0 27.3l-81.9 81 79.9 81.1z"/></svg>',
        forward: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M48 256c0 114.9 93.1 208 208 208s208-93.1 208-208S370.9 48 256 48 48 141.1 48 256zm244.5 0l-81.9-81.1c-7.5-7.5-7.5-19.8 0-27.3s19.8-7.5 27.3 0l95.4 95.7c7.3 7.3 7.5 19.1.6 26.6l-94 94.3c-3.8 3.8-8.7 5.7-13.7 5.7-4.9 0-9.9-1.9-13.6-5.6-7.5-7.5-7.6-19.7 0-27.3l79.9-81z"/></svg>'
    },
    "arrow-round": {
        back: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M401.4 224h-214l83-79.4c11.9-12.5 11.9-32.7 0-45.2s-31.2-12.5-43.2 0L89 233.4c-6 5.8-9 13.7-9 22.4v.4c0 8.7 3 16.6 9 22.4l138.1 134c12 12.5 31.3 12.5 43.2 0 11.9-12.5 11.9-32.7 0-45.2l-83-79.4h214c16.9 0 30.6-14.3 30.6-32 .1-18-13.6-32-30.5-32z"/></svg>',
        forward: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M284.9 412.6l138.1-134c6-5.8 9-13.7 9-22.4v-.4c0-8.7-3-16.6-9-22.4l-138.1-134c-12-12.5-31.3-12.5-43.2 0-11.9 12.5-11.9 32.7 0 45.2l83 79.4h-214c-17 0-30.7 14.3-30.7 32 0 18 13.7 32 30.6 32h214l-83 79.4c-11.9 12.5-11.9 32.7 0 45.2 12 12.5 31.3 12.5 43.3 0z"/></svg>'
    }
};
function getIcons(name) {
    if (name === 'arrow-circle' || name === 'arrow-round')
        return icons[name];
    return null;
}

const JeepNavigation = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.visibility = 'visible';
        this._prevDisabled = true;
        this._nextDisabled = false;
        this.onNavigationPrev = createEvent(this, "jeepNavigationPrev", 7);
        this.onNavigationNext = createEvent(this, "jeepNavigationNext", 7);
    }
    //*****************************
    //* Watch on Property Changes *
    //*****************************
    parseNameProp(newValue) {
        if (newValue)
            this.innerName = newValue;
    }
    //*******************************
    //* Listen to Event Definitions *
    //*******************************
    //**********************
    //* Method Definitions *
    //**********************
    /**
     * Init data from properties.
     */
    init() {
        return Promise.resolve(this._init());
    }
    /**
     * Set the navigation component.
     */
    setNavigation() {
        return Promise.resolve(this._setNavigation());
    }
    /**
     * Set the Navigation Visibility (visible/hidden)
     */
    setJeepNavigationVisibility(state) {
        if (state && state.visibility) {
            this.visibility = state.visibility;
            if (this.visibility === "visible") {
                this._navContainerEl.classList.remove('hidden');
            }
            else {
                this._navContainerEl.classList.add('hidden');
            }
        }
        return;
    }
    /**
     * Set the Navigation previous button to enable/disable
     */
    setJeepNavigationPrevDisabled(state) {
        this._prevDisabled = state.disabled;
        this._setPrevDisabled();
        return;
    }
    /**
     * Set the Navigation next button to enable/disable
     */
    setJeepNavigationNextDisabled(state) {
        this._nextDisabled = state.disabled;
        this._setNextDisabled();
        return;
    }
    /**
     * Get icon name
     */
    async getJeepNavigationIconFamily() {
        return this._icons !== null ? this.innerName : null;
    }
    async componentWillLoad() {
        await this.init();
    }
    async componentDidLoad() {
        await this.setNavigation();
    }
    async componentDidUpdate() {
        if (this.visibility === "visible") {
            await this.setNavigation();
            this._setPrevDisabled();
            this._setNextDisabled();
        }
        else {
            this._navPrevEl = null;
            this._navNextEl = null;
        }
    }
    async _init() {
        this._element = this.el.shadowRoot;
        this.parseNameProp(this.name ? this.name : "arrow-circle");
        return;
    }
    async _setNavigation() {
        this._navContainerEl = this._element.querySelector(".navigation-container");
        this._navPrevEl = this._navContainerEl.querySelector('.navigation-prev');
        this._navNextEl = this._navContainerEl.querySelector('.navigation-next');
        this._navPrevEl.innerHTML = this._prevButton;
        this._navNextEl.innerHTML = this._nextButton;
        const svgEls = Array.from(this._navContainerEl.querySelectorAll('svg'));
        for (let i = 0; i < svgEls.length; i++) {
            svgEls[i].classList.add('icon');
        }
        this._navPrevEl.addEventListener('click', () => {
            if (!this._navPrevEl.classList.contains('disabled'))
                this.onNavigationPrev.emit();
        }, false);
        this._navNextEl.addEventListener('click', () => {
            if (!this._navNextEl.classList.contains('disabled'))
                this.onNavigationNext.emit();
        }, false);
        return;
    }
    _setPrevDisabled() {
        if (this._navPrevEl) {
            if (this._prevDisabled) {
                if (!this._navPrevEl.classList.contains('disabled'))
                    this._navPrevEl.classList.add('disabled');
            }
            else {
                if (this._navPrevEl.classList.contains('disabled'))
                    this._navPrevEl.classList.remove('disabled');
            }
        }
    }
    _setNextDisabled() {
        if (this._navNextEl) {
            if (this._nextDisabled) {
                if (!this._navNextEl.classList.contains('disabled'))
                    this._navNextEl.classList.add('disabled');
            }
            else {
                if (this._navNextEl.classList.contains('disabled'))
                    this._navNextEl.classList.remove('disabled');
            }
        }
    }
    render() {
        this._icons = getIcons(this.innerName);
        this._prevButton = this._icons !== null ? this._icons.back : null;
        this._nextButton = this._icons !== null ? this._icons.forward : null;
        return (h(Host, null, h("div", { class: "navigation-container" }, this.visibility === "visible"
            ?
                h("div", { class: "navigation-wrapper" }, h("button", { class: 'navigation-prev icon disabled' }), h("button", { class: 'navigation-next icon disabled' }))
            : null)));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "name": ["parseNameProp"]
    }; }
    static get style() { return ":host{--navigation-top:50%;--navigation-left:0;--navigation-width:100vw;--navigation-button-width:50px;--navigation-button-height:50px;--navigation-padding-horizontal:10px;--navigation-button-icon-color:#222428}.navigation-container{position:absolute;top:var(--navigation-top);left:var(--navigation-left);margin-top:calc(-1 * var(--navigation-button-height) / 2);z-index:10;width:var(--navigation-width);height:auto;display:-ms-flexbox;display:flex;padding:0 var(--navigation-padding-horizontal);visibility:visible}.navigation-wrapper{width:calc(100% - 2 * var(--navigation-padding-horizontal));height:auto}.icon{position:relative;width:var(--navigation-button-width);height:var(--navigation-button-height);fill:var(--navigation-button-icon-color);visibility:visible}.navigation-prev{left:0}.navigation-next,.navigation-prev{padding:0;border-width:0;background:transparent;border-color:transparent;border-radius:100%;opacity:1}.navigation-next{left:calc(100% - 2 * var(--navigation-button-width))}.disabled{opacity:.2}.hidden{visibility:hidden}"; }
};

const JeepPagination = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.visibility = 'visible';
        this.nbItems = 0;
        this.activeIndex = 0;
        this.onPaginationIndex = createEvent(this, "jeepPaginationIndex", 7);
    }
    //*****************************
    //* Watch on Property Changes *
    //*****************************
    parseNDisplayProp(newValue) {
        if (newValue) {
            let val = newValue;
            this.innerNDisplay = val % 2 ? val : val + 1;
            this._delta = Math.floor(this.innerNDisplay / 2);
        }
    }
    parseDirectionProp(newValue) {
        const dirs = ["horizontal", "vertical"];
        this.innerDirection = dirs.includes(newValue) ? newValue : "horizontal";
    }
    parseClickableProp(newValue) {
        this.innerClickable = newValue ? newValue : false;
    }
    //*******************************
    //* Listen to Event Definitions *
    //*******************************
    //**********************
    //* Method Definitions *
    //**********************
    /**
     * Init data from properties.
     */
    init() {
        return Promise.resolve(this._init());
    }
    /**
     * Set the Pagination Visibility (visible/hidden)
     */
    setJeepPaginationVisibility(state) {
        if (state && state.visibility) {
            this.visibility = state.visibility;
        }
        return;
    }
    /**
     * Set the Pagination Slides Number
     */
    setJeepPaginationSlidesNumber(state) {
        if (state && state.slides) {
            this.nbItems = state.slides;
        }
        return;
    }
    /**
     * Set the Pagination Active Index
     */
    setJeepPaginationActiveIndex(state) {
        if (state && state.activeIndex) {
            this.activeIndex = Number(state.activeIndex);
        }
        return;
    }
    /**
     * Get the Pagination Number of bullets displayed
     */
    async getJeepPaginationBulletNumber() {
        return this.innerNDisplay;
    }
    async componentWillLoad() {
        await this.init();
    }
    async _init() {
        this._element = this.el.shadowRoot;
        this.parseNDisplayProp(this.ndisplay ? this.ndisplay : 5);
        this.parseDirectionProp(this.direction ? this.direction : "horizontal");
        this.parseClickableProp(this.clickable ? this.clickable : false);
        return;
    }
    _handleClick(i) {
        if (this.innerClickable) {
            this.onPaginationIndex.emit({ index: i.toString() });
        }
    }
    _setPaginationBullets(nbItems) {
        let bullets = [];
        let initIndex = this.activeIndex - this._delta;
        const classname = `pagination-bullet pagination-bullet-${this.innerDirection}`;
        for (let i = 0; i < this.innerNDisplay; i++) {
            let appliedClass = classname;
            if (initIndex + i < 0) {
                appliedClass = `${classname} hidden-bullet`;
            }
            else if (initIndex + i === this.activeIndex) {
                appliedClass = `${classname} active-bullet`;
            }
            else if (initIndex + i > nbItems - 1) {
                appliedClass = `${classname} hidden-bullet`;
            }
            bullets = [...bullets,
                h("span", { class: appliedClass, onClick: () => this._handleClick(initIndex + i) })];
        }
        //        this.initialIndex = initIndex;
        return bullets;
    }
    render() {
        const paginationBullets = this.nbItems > 0 ? this._setPaginationBullets(this.nbItems) : [];
        const containerClass = `pagination-container pagination-container-${this.innerDirection}`;
        return (h(Host, null, h("div", { class: containerClass }, this.visibility === "visible"
            ?
                h("div", { class: "pagination-wrapper" }, paginationBullets)
            : null)));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "ndisplay": ["parseNDisplayProp"],
        "direction": ["parseDirectionProp"],
        "clickable": ["parseClickableProp"]
    }; }
    static get style() { return ":host{--pagination-top:5%;--pagination-left:0;--pagination-width:100vw;--pagination-height:100vh;--bullet-background:#000;--bullet-opacity:0.5;--bullet-active-background:#ff8000;--bullet-active-opacity:1;--bullet-active-diameter:22px;--bullet-diameter:15px}.pagination-container{position:absolute;z-index:8;text-align:center;padding:0}.pagination-container-horizontal{top:var(--pagination-top);left:var(--pagination-left);margin-top:calc(-1 * var(--bullet-active-diameter) / 2);width:var(--pagination-width);height:auto}.pagination-container-vertical{top:var(--pagination-top);left:var(--pagination-left);width:calc(var(--bullet-active-diameter));height:var(--pagination-height);display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-align:center;align-items:center}.pagination-wrapper{margin:0 auto;width:100%;height:auto}.pagination-bullet{display:inline-block;width:var(--bullet-diameter);height:var(--bullet-diameter);border-radius:100%;opacity:var(--bullet-opacity);background:var(--bullet-background);visibility:visible}.pagination-bullet-horizontal{margin:0 4px}.pagination-bullet-vertical{margin:4px 0}.active-bullet{width:var(--bullet-active-diameter);height:var(--bullet-active-diameter);opacity:var(--bullet-active-opacity);background:var(--bullet-active-background)}.hidden,.hidden-bullet{visibility:hidden}"; }
};

const JeepPlayControls = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.visibility = 'visible';
        this.play = false;
        this._skipForwardDisabled = true;
        this._skipBackwardDisabled = false;
        this.onPlayControlsIsBeginning = createEvent(this, "jeepPlayControlsIsBeginning", 7);
        this.onPlayControlsIsEnd = createEvent(this, "jeepPlayControlsIsEnd", 7);
        this.onPlayControlsCurrentIndex = createEvent(this, "jeepPlayControlsCurrentIndex", 7);
        this.onPlayControlsAutoplayStart = createEvent(this, "jeepPlayControlsAutoplayStart", 7);
        this.onPlayControlsAutoplayStop = createEvent(this, "jeepPlayControlsAutoplayStop", 7);
        this.onPlayControlsAutoplayPause = createEvent(this, "jeepPlayControlsAutoplayPause", 7);
        this.onPlayControlsAutoplaySkipBackward = createEvent(this, "jeepPlayControlsAutoplaySkipBackward", 7);
        this.onPlayControlsAutoplaySkipForward = createEvent(this, "jeepPlayControlsAutoplaySkipForward", 7);
    }
    //*****************************
    //* Watch on Property Changes *
    //*****************************
    parseDurationProp(newValue) {
        if (newValue)
            this.innerDuration = newValue;
    }
    parseNSlidesProp(newValue) {
        if (newValue !== 0) {
            this.innerNSlides = newValue;
            this.innerToSlide = this.innerNSlides - 1;
        }
        else {
            this.innerNSlides = 0;
            this.innerToSlide = 0;
        }
    }
    parseFromSlideProp(newValue) {
        if (newValue !== 0) {
            this.innerFromSlide = newValue;
        }
        else {
            this.innerFromSlide = 0;
        }
    }
    parseToSlideProp(newValue) {
        if (newValue !== 0) {
            this.innerToSlide = newValue;
        }
        else {
            this.innerToSlide = 0;
        }
    }
    //*******************************
    //* Listen to Event Definitions *
    //*******************************
    //**********************
    //* Method Definitions *
    //**********************
    /**
     * Init data from properties.
     */
    init() {
        return Promise.resolve(this._init());
    }
    /**
     * Set the PlayControls component.
     */
    setPlayControls() {
        return Promise.resolve(this._setPlayControls());
    }
    /**
     * Set the PlayControls Visibility (visible/hidden)
     */
    async setJeepPlayControlsVisibility(state) {
        if (state && state.visibility) {
            if (state.visibility === 'hidden') {
                if (!this._playContainerEl.classList.contains('hidden'))
                    this._playContainerEl.classList.add('hidden');
            }
            else {
                if (this._playContainerEl.classList.contains('hidden'))
                    this._playContainerEl.classList.remove('hidden');
            }
            this.visibility = state.visibility;
        }
        return;
    }
    /**
     * Set the PlayControls skipbackward icon to enable/disable
     */
    async setJeepPlayControlsSkipBackwardDisabled(state) {
        this._skipBackwardDisabled = state.disabled;
        this._setSkipBackwardDisabled();
        return;
    }
    /**
     * Set the PlayControls skipforward icon to enable/disable
     */
    async setJeepPlayControlsSkipForwardDisabled(state) {
        this._skipForwardDisabled = state.disabled;
        this._setSkipForwardDisabled();
        return;
    }
    /**
     * Get the PlayControls duration
     */
    async getJeepPlayControlsDuration() {
        return this.innerDuration;
    }
    /**
     * Start autoplay
     */
    async autoplayStart() {
        this.play = true;
        this.onPlayControlsAutoplayStart.emit();
        this._playContent();
        return;
    }
    /**
     * Stop autoplay
     */
    async autoplayStop() {
        this.play = false;
        this.onPlayControlsAutoplayStop.emit();
        clearInterval(this._initial);
        await this.setCurrentIndex(this.innerFromSlide);
        return;
    }
    /**
     * Pause autoplay
     */
    async autoplayPause() {
        this.play = false;
        this.onPlayControlsAutoplayPause.emit();
        clearInterval(this._initial);
        return;
    }
    /**
     * Is Playing
     */
    async isPlaying() {
        return this.play;
    }
    /**
     * Get PlayControls Current Index
     */
    async getCurrentIndex() {
        return this._currentIndex;
    }
    /**
     * Set PlayControls Active Index
     */
    async setActiveIndexAndPlay(index) {
        clearInterval(this._initial);
        this.setCurrentIndex(index);
        this.autoplayStart();
        return;
    }
    /**
     * Set PlayControls Current Index
     */
    async setCurrentIndex(index, notemit) {
        const willEmit = notemit ? !notemit : true;
        this._currentIndex = index;
        this.onPlayControlsCurrentIndex.emit({ index: this._currentIndex.toString() });
        this._setSkipButtons();
        if (willEmit && this._currentIndex === this.innerFromSlide)
            this.onPlayControlsIsBeginning.emit();
        if (willEmit && this._currentIndex === this.innerToSlide)
            this.onPlayControlsIsEnd.emit();
        return;
    }
    async componentWillLoad() {
        await this.init();
    }
    async componentDidLoad() {
        await this.setPlayControls();
    }
    async _init() {
        this._element = this.el.shadowRoot;
        this.parseDurationProp(this.duration ? this.duration : 1000);
        this.parseNSlidesProp(this.nslides ? this.nslides : 0);
        this.parseFromSlideProp(this.fromslide ? this.fromslide : 0);
        this.parseToSlideProp(this.toslide ? this.toslide : this.innerNSlides > 0 ? this.innerNSlides - 1 : 0);
        await this.setCurrentIndex(this.innerFromSlide, true);
        return;
    }
    async _setPlayControls() {
        this._playContainerEl = this._element.querySelector(".playcontrols-container");
        this._playSkipBackwardEl = this._playContainerEl.querySelector('.playcontrols-button-skip-backward');
        this._playSkipForwardEl = this._playContainerEl.querySelector('.playcontrols-button-skip-forward');
        this.setJeepPlayControlsSkipBackwardDisabled({ disabled: true });
        this.onPlayControlsIsBeginning.emit();
        if (this.innerToSlide > 0) {
            this.setJeepPlayControlsSkipForwardDisabled({ disabled: false });
        }
        else {
            this.setJeepPlayControlsSkipForwardDisabled({ disabled: true });
            this.onPlayControlsIsEnd.emit();
        }
        return;
    }
    _setSkipBackwardDisabled() {
        if (this._skipBackwardDisabled) {
            if (!this._playSkipBackwardEl.classList.contains('disabled'))
                this._playSkipBackwardEl.classList.add('disabled');
        }
        else {
            if (this._playSkipBackwardEl.classList.contains('disabled'))
                this._playSkipBackwardEl.classList.remove('disabled');
        }
    }
    _setSkipForwardDisabled() {
        if (this._skipForwardDisabled) {
            if (!this._playSkipForwardEl.classList.contains('disabled'))
                this._playSkipForwardEl.classList.add('disabled');
        }
        else {
            if (this._playSkipForwardEl.classList.contains('disabled'))
                this._playSkipForwardEl.classList.remove('disabled');
        }
    }
    async _handleClick(event) {
        if (event.target.classList.contains('playcontrols-button-play') && event.target.classList.contains('play')) {
            if (this.innerToSlide > 0 && this._currentIndex < this.innerToSlide) {
                await this.autoplayStart();
            }
        }
        else if (event.target.classList.contains('playcontrols-button-skip-backward')) {
            if (!this._playSkipBackwardEl.classList.contains('disabled') || this._currentIndex > this.innerFromSlide) {
                this.onPlayControlsAutoplaySkipBackward.emit();
                await this.setActiveIndexAndPlay(this._currentIndex - 1);
            }
        }
        else if (event.target.classList.contains('playcontrols-button-skip-forward')) {
            if (!this._playSkipForwardEl.classList.contains('disabled') || this._currentIndex < this.innerToSlide) {
                this.onPlayControlsAutoplaySkipForward.emit();
                await this.setActiveIndexAndPlay(this._currentIndex + 1);
            }
        }
        else {
            if (this.play) {
                await this.autoplayPause();
            }
        }
    }
    _playContent() {
        let index = 0;
        if (this.play) {
            this._initial = setInterval(() => {
                if (index === 0) {
                    index = this._currentIndex + 1;
                }
                if (index > this.innerToSlide) {
                    this.play = false;
                    this.setCurrentIndex(this.innerFromSlide);
                    clearInterval(this._initial);
                }
                else {
                    this.setCurrentIndex(index);
                    index++;
                }
            }, this.innerDuration);
        }
        else {
            clearInterval(this._initial);
            return;
        }
    }
    _setSkipButtons() {
        if (this._playSkipBackwardEl && this._playSkipForwardEl) {
            if (this._currentIndex === this.innerFromSlide) {
                this.setJeepPlayControlsSkipBackwardDisabled({ disabled: true });
            }
            else {
                this.setJeepPlayControlsSkipBackwardDisabled({ disabled: false });
            }
            if (this._currentIndex === this.innerToSlide) {
                this.setJeepPlayControlsSkipForwardDisabled({ disabled: true });
            }
            else {
                this.setJeepPlayControlsSkipForwardDisabled({ disabled: false });
            }
        }
    }
    render() {
        this._setSkipButtons();
        return (h(Host, null, h("div", { class: "playcontrols-container" }, h("div", { class: "playcontrols-button playcontrols-button-skip-backward disabled", onClick: (event) => this._handleClick(event) }), this.play
            ? h("div", { class: "playcontrols-button playcontrols-button-play pause", onClick: (event) => this._handleClick(event) })
            : h("div", { class: "playcontrols-button playcontrols-button-play play", onClick: (event) => this._handleClick(event) }), h("div", { class: "playcontrols-button playcontrols-button-skip-forward disabled", onClick: (event) => this._handleClick(event) }))));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "duration": ["parseDurationProp"],
        "nslides": ["parseNSlidesProp"],
        "fromslide": ["parseFromSlideProp"],
        "toslide": ["parseToSlideProp"]
    }; }
    static get style() { return ":host{--playcontrols-top:calc(100vh -20px);--playcontrols-left:0px;--playcontrols-width:100%;--playcontrols-button-width:50px;--playcontrols-button-height:50px}.playcontrols-button-play.pause{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20512%20512%22%3E%3Cpath%20d=%22M199.9%20416h-63.8c-4.5%200-8.1-3.6-8.1-8V104c0-4.4%203.6-8%208.1-8h63.8c4.5%200%208.1%203.6%208.1%208v304c0%204.4-3.6%208-8.1%208zM375.9%20416h-63.8c-4.5%200-8.1-3.6-8.1-8V104c0-4.4%203.6-8%208.1-8h63.8c4.5%200%208.1%203.6%208.1%208v304c0%204.4-3.6%208-8.1%208z%22/%3E%3C/svg%3E\")}.playcontrols-button-play.pause,.playcontrols-button-play.play{width:calc(var(--playcontrols-button-width,20px) * 1.4)!important;height:calc(var(--playcontrols-button-height,20px) * 1.4)!important;padding-bottom:0!important}.playcontrols-button-play.play{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20512%20512%22%3E%3Cpath%20d=%22M128%20104.3v303.4c0%206.4%206.5%2010.4%2011.7%207.2l240.5-151.7c5.1-3.2%205.1-11.1%200-14.3L139.7%2097.2c-5.2-3.3-11.7.7-11.7%207.1z%22/%3E%3C/svg%3E\")}.playcontrols-button-skip-forward{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20512%20512%22%3E%3Cpath%20d=%22M337%20100v137.8L108.1%2098.1C102.7%2095%2096%2098.8%2096%20105v302c0%206.2%206.7%2010%2012.1%206.9L337%20274.2V412c0%202.2%201.8%204%204%204h71c2.2%200%204-1.8%204-4V100c0-2.2-1.8-4-4-4h-71c-2.2%200-4%201.8-4%204z%22/%3E%3C/svg%3E\")}.playcontrols-button-skip-backward{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20512%20512%22%3E%3Cpath%20d=%22M175%20100v137.8L403.9%2098.1c5.3-3.1%2012.1.7%2012.1%206.9v302c0%206.2-6.7%2010-12.1%206.9L175%20274.2V412c0%202.2-1.8%204-4%204h-71c-2.2%200-4-1.8-4-4V100c0-2.2%201.8-4%204-4h71c2.2%200%204%201.8%204%204z%22/%3E%3C/svg%3E\")}.playcontrols-container{position:absolute;top:var(--playcontrols-top);left:var(--playcontrols-left);width:var(--playcontrols-width);height:auto;text-align:center;z-index:11;visibility:visible}.playcontrols-button{display:inline-block;width:var(--playcontrols-button-width,20px);height:var(--playcontrols-button-height,20px);padding-bottom:calc(var(--playcontrols-button-height,20px) * .2)}.disabled{opacity:.2}.hidden{visibility:hidden}"; }
};

export { JeepFullscreen as jeep_fullscreen, JeepNavigation as jeep_navigation, JeepPagination as jeep_pagination, JeepPlayControls as jeep_play_controls };
