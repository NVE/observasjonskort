'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const core = require('./core-ce02df39.js');
const common = require('./common-5e122d9c.js');

const JeepFlipimages = class {
    constructor(hostRef) {
        core.registerInstance(this, hostRef);
        //************************
        //* Property Definitions *
        //************************
        /**
         * The type of image horizontal or vertical
         */
        this.type = "horizontal";
        /**
         * The container padding
         */
        this.fpadding = "0";
        this.defBlocks = false;
        this._typeArray = ['horizontal', 'vertical'];
        this._localCSS = {};
        this.dimImgloaded = core.createEvent(this, "jeepFlipImagesImgLoaded", 7);
    }
    //*****************************
    //* Watch on Property Changes *
    //*****************************
    parseTypeProp(newValue) {
        this.innerType = newValue && this._typeArray.indexOf(newValue) >= 0 ? newValue : "horizontal";
    }
    parseFpaddingProp(newValue) {
        this.innerPadding = newValue ? parseFloat(newValue) : 0;
    }
    //*******************************
    //* Listen to Event Definitions *
    //*******************************
    async handleDimImgloaded(event) {
        let img = event.detail;
        this._preload(this._imagesUrl, 2, this._imagesUrl.length - 1);
        this.imageRatio = img.naturalHeight / img.naturalWidth;
        this._bbContainer = this._container.getBoundingClientRect();
        this._imageWidth = this._bbContainer.width - 2 * this.innerPadding -
            2 * common.convertCSSNumber(this._localCSS.borderWidth) - 2 * common.convertCSSNumber(this._localCSS.shadowWidth);
        this._imageHeight = Math.floor(this._imageWidth * this.imageRatio);
        await this._checkImageWidthHeight();
        this._container.removeChild(this._imgDim);
        this._flipToggle = this._container.querySelector('#flip-toggle');
        if (this.innerType === "vertical") {
            this._backImg1 = this._flipToggle.querySelector('#image-back-left');
            this._backImg2 = this._flipToggle.querySelector('#image-back-right');
            this._frontImg1 = this._flipToggle.querySelector('#image-front-left');
            this._frontImg2 = this._flipToggle.querySelector('#image-front-right');
        }
        else {
            this._backImg1 = this._flipToggle.querySelector('#image-back-top');
            this._backImg2 = this._flipToggle.querySelector('#image-back-bottom');
            this._frontImg1 = this._flipToggle.querySelector('#image-front-top');
            this._frontImg2 = this._flipToggle.querySelector('#image-front-bottom');
        }
        this._setCssProperties();
        this._flipToggle.classList.add("flipvisible");
        this.defBlocks = true;
    }
    //**********************
    //* Method Definitions *
    //**********************
    /**
     * Method initialize
     */
    async init() {
        return await this._init();
    }
    //*******************************
    //* Component Lifecycle Methods *
    //*******************************
    async componentWillLoad() {
        this._window = window;
        await this._init();
        this._window.addEventListener('resize', async () => {
            this._bbContainer = this._container.getBoundingClientRect();
            this._imageWidth = this._bbContainer.width - 2 * this.innerPadding -
                2 * common.convertCSSNumber(this._localCSS.borderWidth) - 2 * common.convertCSSNumber(this._localCSS.shadowWidth);
            this._imageHeight = Math.floor(this._imageWidth * this.imageRatio);
            await this._checkImageWidthHeight();
            this._setCssProperties();
            this.defBlocks = true;
        }, false);
    }
    async componentDidLoad() {
        this._element = this.el.shadowRoot;
        if (this._flipElements != null) {
            this._getImageDim();
        }
    }
    //******************************
    //* Private Method Definitions *
    //******************************
    async _init() {
        this._document = this._window.document;
        this._root = this._document.documentElement;
        // reading properties
        this.parseTypeProp(this.type ? this.type : "horizontal");
        this.parseFpaddingProp(this.fpadding ? this.fpadding : "0");
        this._getElementList();
        this._indexFront = 0;
        this._indexBack = this._imagesUrl.length > 1 ? 1 : 0;
        this.toggle = false;
        this._flipUp = false;
        this._flipLeft = false;
        this._mouseStart = false;
        this._mouseMove = false;
        this._flipElements = null;
        this._first = true;
        //  reading local css variables
        this._localCSS.shadowWidth = window.getComputedStyle(this.el).getPropertyValue('--flipimages-shadow-width');
        this._localCSS.shadowColor = window.getComputedStyle(this.el).getPropertyValue('--flipimages-shadow-color');
        this._localCSS.borderWidth = window.getComputedStyle(this.el).getPropertyValue('--flipimages-border-width');
        this._localCSS.borderColor = window.getComputedStyle(this.el).getPropertyValue('--flipimages-border-color');
        this.el.style.setProperty('--container-padding', this.innerPadding.toString() + 'px');
        return;
    }
    // ---- Deal with Utilities ----
    _getImageDim() {
        this._container = this._element.querySelector('.container');
        this._imgDim = this._container.querySelector('.image-dim');
        let img = this._imgDim.querySelector('img');
        img.onload = async () => {
            this._images = [];
            await this._preload(this._imagesUrl, 0, 1);
            this.dimImgloaded.emit(img);
        };
    }
    _setCssProperties() {
        this.el.style.setProperty('--image-height', this._imageHeight.toString() + 'px');
        this.el.style.setProperty('--image-width', this._imageWidth.toString() + 'px');
        this.el.style.setProperty('--container-padding', this.innerPadding.toString() + 'px');
    }
    async _preload(imageArray, start, end) {
        return new Promise(async (resolve) => {
            for (let i = start; i < end + 1; i++) {
                if (imageArray[i].substring(0, 4) === 'http') {
                    let retVal = await this._toDataUrl(imageArray[i]);
                    this._images = [...this._images, retVal];
                }
                else {
                    this._images = [...this._images, imageArray[i]];
                }
                if (i === end)
                    resolve();
            }
        });
    }
    async _toDataUrl(url) {
        return new Promise((resolve) => {
            fetch(url, {
                method: 'GET'
            }).then((res) => {
                return res.blob();
            }).then((blob) => {
                const reader = new FileReader();
                reader.addEventListener("load", () => {
                    resolve(reader.result);
                }, false);
                reader.readAsDataURL(blob);
            }).catch(async (err) => {
                console.log('Error: ', err.message);
                resolve();
            });
        });
    }
    _getElementList() {
        this._imagesUrl = [];
        this._alts = [];
        for (let i = 0; i < this.el.childElementCount; i++) {
            this._imagesUrl.push(this.el.children[i].getAttribute('src'));
            this._alts.push(this.el.children[i].getAttribute('alt'));
        }
        this._removeChilds(this.el);
    }
    _removeChilds(el) {
        while (el.firstChild) {
            el.removeChild(el.firstChild);
        }
    }
    async _checkImageWidthHeight() {
        let maxHeight = Math.floor(this._bbContainer.height - 2 * this.innerPadding -
            2 * common.convertCSSNumber(this._localCSS.borderWidth) -
            2 * common.convertCSSNumber(this._localCSS.shadowWidth));
        if (this._imageHeight > maxHeight) {
            this._imageHeight = maxHeight;
            this._imageWidth = Math.floor(this._imageHeight / this.imageRatio);
        }
        return;
    }
    /* ---- Deal with handling event  */
    _handleMoveEventTarget() {
        if (this.innerType === "horizontal") {
            // type horizontal
            if (this._stPoint.y < this._bbContainer.height / 2) {
                // top part
                this._top = true;
                if (this._mvPoint.y < this._stPoint.y) {
                    // flip up
                    this._flipUp = true;
                }
                else {
                    // flip down
                    this._flipUp = false;
                }
            }
            else {
                // bottom part
                this._top = false;
                if (this._mvPoint.y < this._stPoint.y) {
                    // flip up
                    this._flipUp = true;
                }
                else {
                    // flip down
                    this._flipUp = false;
                }
            }
        }
        else if (this.innerType === 'vertical') {
            // type vertical
            if (this._stPoint.x < this._bbContainer.width / 2) {
                // left part
                this._left = true;
                if (this._mvPoint.x < this._stPoint.x) {
                    // flip left
                    this._flipLeft = true;
                }
                else {
                    // flip right
                    this._flipLeft = false;
                }
            }
            else {
                // right part
                this._left = false;
                if (this._mvPoint.x < this._stPoint.x) {
                    // flip left
                    this._flipLeft = true;
                }
                else {
                    // flip right
                    this._flipLeft = false;
                }
            }
        }
    }
    _handleEndEventTarget() {
        if (this._flipToggle.classList) {
            if (this.innerType === "horizontal") {
                // type horizontal
                this._handleToggle(this._top, this._flipUp);
            }
            else if (this.innerType === "vertical") {
                // type vertical
                this._handleToggle(this._left, this._flipLeft);
            }
        }
    }
    _handleToggle(block, flip) {
        if (!this.toggle) {
            if (block) {
                this._doToggle = true;
                if (!flip) {
                    this._indexFront = this._indexBack + 1;
                    if (this._indexFront === this._images.length)
                        this._indexFront = 0;
                }
                else {
                    this._indexBack = this._indexFront - 1;
                    if (this._indexBack === -1)
                        this._indexBack = this._images.length - 1;
                }
                this._flipToggle.classList.toggle("toggle");
                this.toggle = !this.toggle;
            }
            else {
                this._doToggle = false;
            }
        }
        else {
            if (!block) {
                this._doToggle = true;
                if (!flip) {
                    this._indexFront = this._indexBack - 1;
                    if (this._indexFront < 0)
                        this._indexFront = this._images.length - 1;
                }
                else {
                    this._indexBack = this._indexFront + 1;
                    if (this._indexBack === this._images.length)
                        this._indexBack = 0;
                }
                this._flipToggle.classList.toggle("toggle");
                this.toggle = !this.toggle;
            }
            else {
                this._doToggle = false;
            }
        }
    }
    _handleMouseDown(ev) {
        ev.preventDefault();
        this._stPoint = { x: ev.pageX, y: ev.pageY };
        this._mouseMove = false;
        this._mouseStart = true;
    }
    _handleMouseMove(ev) {
        ev.preventDefault();
        if (this._mouseStart) {
            this._mouseMove = true;
            this._mvPoint = { x: ev.pageX, y: ev.pageY };
            this._handleMoveEventTarget();
        }
    }
    _handleMouseEnd() {
        if (this._mouseMove) {
            this._handleEndEventTarget();
            this._mouseStart = false;
            this._mouseMove = false;
        }
    }
    _handleTouchStart(ev) {
        ev.preventDefault();
        this._stPoint = { x: ev.touches[0].pageX, y: ev.touches[0].pageY };
        this._mouseStart = true;
    }
    _handleTouchMove(ev) {
        ev.preventDefault();
        this._mvPoint = { x: ev.touches[0].pageX, y: ev.touches[0].pageY };
        this._mouseMove = true;
        this._handleMoveEventTarget();
    }
    _handleTouchEnd() {
        if (this._mouseMove) {
            this._handleEndEventTarget();
            this._mouseStart = false;
            this._mouseMove = false;
        }
    }
    //*************************
    //* Rendering JSX Element *
    //*************************
    renderFlipImages() {
        if (this._first) {
            this._first = false;
            this._frontImg1.setAttribute('src', this._images[this._indexFront]);
            this._frontImg2.setAttribute('src', this._images[this._indexFront]);
            this._backImg1.setAttribute('src', this._images[this._indexBack]);
            this._backImg2.setAttribute('src', this._images[this._indexBack]);
            if (this._alts[this._indexFront] !== null) {
                this._frontImg1.setAttribute('alt', this._alts[this._indexFront]);
                this._frontImg2.setAttribute('alt', this._alts[this._indexFront]);
            }
            if (this._alts[this._indexBack] !== null) {
                this._backImg1.setAttribute('alt', this._alts[this._indexBack]);
                this._backImg2.setAttribute('alt', this._alts[this._indexBack]);
            }
        }
        else {
            if (this._doToggle) {
                if (!this.toggle) {
                    this._frontImg1.setAttribute('src', this._images[this._indexFront]);
                    this._frontImg2.setAttribute('src', this._images[this._indexFront]);
                    if (this._alts[this._indexFront] !== null) {
                        this._frontImg1.setAttribute('alt', this._alts[this._indexFront]);
                        this._frontImg2.setAttribute('alt', this._alts[this._indexFront]);
                    }
                }
                else {
                    this._backImg1.setAttribute('src', this._images[this._indexBack]);
                    this._backImg2.setAttribute('src', this._images[this._indexBack]);
                    if (this._alts[this._indexBack] !== null) {
                        this._backImg1.setAttribute('alt', this._alts[this._indexBack]);
                        this._backImg2.setAttribute('alt', this._alts[this._indexBack]);
                    }
                }
            }
        }
    }
    render() {
        if (this._flipElements === null) {
            // initial definition
            if (this.innerType == 'horizontal') {
                this._flipElements = [
                    core.h("div", { class: "container" }, core.h("div", { class: "image-dim" }, core.h("img", { src: this._imagesUrl[0], alt: this._alts[0] })), core.h("div", { class: 'flip-container horizontal', id: 'flip-toggle', onMouseDown: this._handleMouseDown.bind(this), onMouseMove: this._handleMouseMove.bind(this), onMouseUp: this._handleMouseEnd.bind(this), onTouchStart: this._handleTouchStart.bind(this), onTouchMove: this._handleTouchMove.bind(this), onTouchEnd: this._handleTouchEnd.bind(this) }, core.h("div", { class: 'back-top', id: 'back-top' }, core.h("div", { class: 'image-back-top' }, core.h("img", { id: 'image-back-top' }))), core.h("div", { class: 'flipper', id: 'flipper' }, core.h("div", { class: 'front-top', id: 'front-top' }, core.h("div", { class: 'image-front-top' }, core.h("img", { id: 'image-front-top' }))), core.h("div", { class: 'back-bottom', id: 'back-bottom' }, core.h("div", { class: 'image-back-bottom' }, core.h("img", { id: 'image-back-bottom' })))), core.h("div", { class: 'front-bottom', id: 'front-bottom' }, core.h("div", { class: 'image-front-bottom' }, core.h("img", { id: 'image-front-bottom' })))))
                ];
            }
            else if (this.innerType == 'vertical') {
                this._flipElements = [
                    core.h("div", { class: "container" }, core.h("div", { class: "image-dim" }, core.h("img", { src: this._imagesUrl[0], alt: this._alts[0] })), core.h("div", { class: 'flip-container vertical', id: 'flip-toggle', onMouseDown: this._handleMouseDown.bind(this), onMouseMove: this._handleMouseMove.bind(this), onMouseUp: this._handleMouseEnd.bind(this), onTouchStart: this._handleTouchStart.bind(this), onTouchMove: this._handleTouchMove.bind(this), onTouchEnd: this._handleTouchEnd.bind(this) }, core.h("div", { class: 'back-left', id: 'back-left' }, core.h("div", { class: 'image-back-left' }, core.h("img", { id: 'image-back-left' }))), core.h("div", { class: 'flipper', id: 'flipper' }, core.h("div", { class: 'front-left', id: 'front-left' }, core.h("div", { class: 'image-front-left' }, core.h("img", { id: 'image-front-left' }))), core.h("div", { class: 'back-right', id: 'back-right' }, core.h("div", { class: 'image-back-right' }, core.h("img", { id: 'image-back-right' })))), core.h("div", { class: 'front-right', id: 'front-right' }, core.h("div", { class: 'image-front-right' }, core.h("img", { id: 'image-front-right' })))))
                ];
            }
            else {
                this._flipElements = null;
            }
        }
        else {
            // update
            if (this.defBlocks)
                this.renderFlipImages();
        }
        return (core.h(core.Host, null, core.h("slot", null, this._flipElements)));
    }
    get el() { return core.getElement(this); }
    static get watchers() { return {
        "type": ["parseTypeProp"],
        "fpadding": ["parseFpaddingProp"]
    }; }
    static get style() { return ":host{--flipimages-border-width:10px;--flipimages-border-color:#fff;--flipimages-shadow-width:20px;--flipimages-shadow-color:grey;--image-height:720px;--image-width:1280px;--container-padding:0px}.imghidden{display:none;visibility:hidden}.container{position:absolute;bottom:0;right:0;overflow:hidden;-ms-flex-pack:center;justify-content:center;padding:var(--container-padding)}.container,.image-dim{top:0;left:0;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.image-dim{position:relative;visibility:hidden;width:100%;height:100%;z-index:10}.image-dim img{max-width:100%;max-height:100%;visibility:hidden;overflow:hidden}.flip-container{width:var(--image-width);height:var(--image-height);margin:0;-webkit-perspective:calc(2 * var(--image-width));perspective:calc(2 * var(--image-width));-webkit-box-shadow:0 0 var(--flipimages-shadow-width) 2px var(--flipimages-shadow-color);box-shadow:0 0 var(--flipimages-shadow-width) 2px var(--flipimages-shadow-color);border-color:var(--flipimages-border-color);border-style:solid;border-width:var(--flipimages-border-width);border-radius:var(--flipimages-border-width);visibility:hidden}.flipvisible{visibility:visible}.toggle.horizontal.flip-container .flipper{transform:rotateX(-180deg);-moz-transform:rotateX(-180deg);-webkit-transform:rotateX(-180deg)}.toggle.horizontal.flip-container .back-top{opacity:1}.toggle.horizontal.flip-container .front-bottom{opacity:0}.toggle.vertical.flip-container .flipper{transform:rotateY(-180deg);-moz-transform:rotateY(-180deg);-webkit-transform:rotateY(-180deg)}.toggle.vertical.flip-container .back-left{opacity:1}.toggle.vertical.flip-container .front-right{opacity:0}.flipper{position:absolute;width:100%;height:100%;top:0;left:0;transition:.5s;-webkit-transition:.5s;-moz-transition:.5s;transition-timing-function:linear;-webkit-transition-timing-function:linear;-moz-transition-timing-function:linear;-webkit-transform-style:preserve-3d;transform-style:preserve-3d}.back-bottom,.back-top,.front-bottom,.front-top{max-height:calc(1 * var(--image-height) / 2 + 2px);max-width:var(--image-width);overflow:hidden;margin:0}.back-bottom img,.back-top img,.front-bottom img,.front-top img{display:block;width:var(--image-width)}.front-top{top:0;z-index:10}.front-bottom,.front-top{position:absolute;left:0;backface-visibility:hidden;-webkit-backface-visibility:hidden}.front-bottom{bottom:0;z-index:1;opacity:1;transition:opacity .5s;-webkit-transition:opacity .5s;-moz-transition:opacity .5s;transition-timing-function:ease-in;-webkit-transition-timing-function:ease-in;-moz-transition-timing-function:ease-in}.front-top img{margin-bottom:calc(-1 * var(--image-height) / 2 + 2px)}.front-bottom img{margin-top:calc(-1 * var(--image-height) / 2)}.back-top{opacity:0;transition:opacity .5s;-webkit-transition:opacity .5s;-moz-transition:opacity .5s;transition-timing-function:ease-in;-webkit-transition-timing-function:ease-in;-moz-transition-timing-function:ease-in;z-index:-2}.back-bottom,.back-top{position:absolute;top:0;left:0;backface-visibility:hidden;-webkit-backface-visibility:hidden}.back-bottom{z-index:5}.back-top img{margin-bottom:calc(-1 * var(--image-height) / 2 + 2px)}.back-bottom img{margin-top:calc(-1 * var(--image-height) / 2)}.front-top{transform:rotateX(0deg);-moz-transform:rotateX(0deg);-webkit-transform:rotateX(0deg)}.back-bottom{transform:rotateX(180deg);-moz-transform:rotateX(180deg);-webkit-transform:rotateX(180deg)}.back-left,.back-right,.front-left,.front-right{max-height:var(--image-height);max-width:calc(1 * var(--image-width) / 2 + 2px);overflow:hidden;margin:0}.back-left img,.back-right img,.front-left img,.front-right img{display:block;width:var(--image-width)}.front-left{left:0;z-index:10}.front-left,.front-right{position:absolute;top:0;backface-visibility:hidden;-webkit-backface-visibility:hidden}.front-right{left:50%;z-index:1;opacity:1;transition:opacity .5s;-webkit-transition:opacity .5s;-moz-transition:opacity .5s;transition-timing-function:ease-in;-webkit-transition-timing-function:ease-in;-moz-transition-timing-function:ease-in}.front-left img{margin-right:calc(-1 * var(--image-width) / 2 + 2px)}.front-right img{margin-left:calc(-1 * var(--image-width) / 2)}.back-left{opacity:0;transition:opacity .5s;-webkit-transition:opacity .5s;-moz-transition:opacity .5s;transition-timing-function:ease-in;-webkit-transition-timing-function:ease-in;-moz-transition-timing-function:ease-in;z-index:-2}.back-left,.back-right{position:absolute;top:0;left:0;backface-visibility:hidden;-webkit-backface-visibility:hidden}.back-right{z-index:5}.back-left img{margin-right:calc(-1 * var(--image-width) / 2 + 2px)}.back-right img{margin-left:calc(-1 * var(--image-width) / 2)}.front-left{transform:rotateY(0deg);-moz-transform:rotateY(0deg);-webkit-transform:rotateY(0deg)}.back-right{transform:rotateY(180deg);-moz-transform:rotateY(180deg);-webkit-transform:rotateY(180deg)}"; }
};

exports.jeep_flipimages = JeepFlipimages;
